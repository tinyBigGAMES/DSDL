{==============================================================================
  ___  ___ ___  __™
 |   \/ __|   \| |
 | |) \__ \ |) | |__
 |___/|___/___/|____|
    SDL for Delphi   

 Copyright © 2024-present tinyBigGAMES™ LLC
 All Rights Reserved.

 https://github.com/tinyBigGAMES/DSDL

 BSD 3-Clause License

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.

 ------------------------------------------------------------------------------

 This project uses the following open-source libraries:
  * pl_mpeg        - https://github.com/phoboslab/pl_mpeg
  * SDL            - https://github.com/libsdl-org/SDL
  * SDL_image      - https://github.com/libsdl-org/SDL_image
  * SDL_mixer      - https://github.com/libsdl-org/SDL_mixer
  * SDL_net        - https://github.com/libsdl-org/SDL_net
  * SDL_ttf        - https://github.com/libsdl-org/SDL_ttf
  * spine-runtimes - https://github.com/EsotericSoftware/spine-runtimes
  * zlib           - https://github.com/madler/zlib

 ------------------------------------------------------------------------------

 >>> CHANGELOG <<<

 Version 0.1.0
 ----------------
  - Initial release.

 ------------------------------------------------------------------------------
 DSDL Usage Notes
 ===================


==============================================================================}

unit DSDL;

{$IF CompilerVersion >= 36.0}
  // Code specific to Delphi Athens (12.2) and above
{$ELSE}
  {$MESSAGE ERROR 'This code requires  Delphi Athens (12.2) or later'}
{$IFEND}

{$IFNDEF WIN64}
  // Generates a compile-time error if the target platform is not Win64
  {$MESSAGE Error 'Unsupported platform'}
{$ENDIF}

{$Z4}  // Sets the enumeration size to 4 bytes
{$A8}  // Sets the alignment for record fields to 8 bytes

{$WARN SYMBOL_DEPRECATED OFF}
{$WARN SYMBOL_PLATFORM OFF}

{$WARN UNIT_PLATFORM OFF}
{$WARN UNIT_DEPRECATED OFF}

interface

{$REGION ' USES '}
uses
  System.SysUtils,
  System.Classes,
  System.IOUtils,
  System.Math,
  WinApi.Windows;
{$ENDREGION}  

{$REGION ' LIB API '}
const
  SDL_PLATFORM_WINDOWS = 1;
  HAVE_WINAPIFAMILY_H = 1;
  WINAPI_FAMILY_DESKTOP_APP = 100;
  WINAPI_FAMILY = WINAPI_FAMILY_DESKTOP_APP;
  WINAPI_PARTITION_DESKTOP = (WINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP);
  WINAPI_FAMILY_PHONE_APP = 3;
  SDL_WINAPI_FAMILY_PHONE = (WINAPI_FAMILY=WINAPI_FAMILY_PHONE_APP);
  SDL_PLATFORM_WIN32 = 1;
  SIZE_MAX = $ffffffffffffffff;
  SDL_SIZE_MAX = SIZE_MAX;
  SDL_FLT_EPSILON = 1.1920928955078125e-07;
  SDL_INVALID_UNICODE_CODEPOINT = $FFFD;
  SDL_PI_D = 3.141592653589793238462643383279502884;
  SDL_PI_F = 3.141592653589793238462643383279502884;
  SDL_ASSERT_LEVEL = 1;
  SDL_LIL_ENDIAN = 1234;
  SDL_BIG_ENDIAN = 4321;
  SDL_BYTEORDER = SDL_LIL_ENDIAN;
  SDL_FLOATWORDORDER = SDL_BYTEORDER;
  SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER = 'SDL.thread.create.entry_function';
  SDL_PROP_THREAD_CREATE_NAME_STRING = 'SDL.thread.create.name';
  SDL_PROP_THREAD_CREATE_USERDATA_POINTER = 'SDL.thread.create.userdata';
  SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER = 'SDL.thread.create.stacksize';
  SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER = 'SDL.iostream.windows.handle';
  SDL_PROP_IOSTREAM_STDIO_FILE_POINTER = 'SDL.iostream.stdio.file';
  SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER = 'SDL.iostream.file_descriptor';
  SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER = 'SDL.iostream.android.aasset';
  SDL_PROP_IOSTREAM_MEMORY_POINTER = 'SDL.iostream.memory.base';
  SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER = 'SDL.iostream.memory.size';
  SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER = 'SDL.iostream.dynamic.memory';
  SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER = 'SDL.iostream.dynamic.chunksize';
  SDL_AUDIO_MASK_BITSIZE = ($FF);
  SDL_AUDIO_MASK_FLOAT = (1 shl 8);
  SDL_AUDIO_MASK_BIG_ENDIAN = (1 shl 12);
  SDL_AUDIO_MASK_SIGNED = (1 shl 15);
  SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK = $FFFFFFFF;
  SDL_AUDIO_DEVICE_DEFAULT_RECORDING = $FFFFFFFE;
  SDL_BLENDMODE_NONE = $00000000;
  SDL_BLENDMODE_BLEND = $00000001;
  SDL_BLENDMODE_BLEND_PREMULTIPLIED = $00000010;
  SDL_BLENDMODE_ADD = $00000002;
  SDL_BLENDMODE_ADD_PREMULTIPLIED = $00000020;
  SDL_BLENDMODE_MOD = $00000004;
  SDL_BLENDMODE_MUL = $00000008;
  SDL_BLENDMODE_INVALID = $7FFFFFFF;
  SDL_ALPHA_OPAQUE = 255;
  SDL_ALPHA_OPAQUE_FLOAT = 1.0;
  SDL_ALPHA_TRANSPARENT = 0;
  SDL_ALPHA_TRANSPARENT_FLOAT = 0.0;
  SDL_SURFACE_PREALLOCATED = $00000001;
  SDL_SURFACE_LOCK_NEEDED = $00000002;
  SDL_SURFACE_LOCKED = $00000004;
  SDL_SURFACE_SIMD_ALIGNED = $00000008;
  SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT = 'SDL.surface.SDR_white_point';
  SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT = 'SDL.surface.HDR_headroom';
  SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING = 'SDL.surface.tonemap';
  SDL_CACHELINE_SIZE = 128;
  SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER = 'SDL.video.wayland.wl_display';
  SDL_WINDOWPOS_UNDEFINED_MASK = $1FFF0000;
  SDL_WINDOWPOS_CENTERED_MASK = $2FFF0000;
  SDL_GL_CONTEXT_PROFILE_CORE = $0001;
  SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = $0002;
  SDL_GL_CONTEXT_PROFILE_ES = $0004;
  SDL_GL_CONTEXT_DEBUG_FLAG = $0001;
  SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = $0002;
  SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = $0004;
  SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = $0008;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = $0000;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = $0001;
  SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = $0000;
  SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = $0001;
  SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN = 'SDL.display.HDR_enabled';
  SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER = 'SDL.display.KMSDRM.panel_orientation';
  SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN = 'SDL.window.create.always_on_top';
  SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN = 'SDL.window.create.borderless';
  SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN = 'SDL.window.create.focusable';
  SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN = 'SDL.window.create.external_graphics_context';
  SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER = 'SDL.window.create.flags';
  SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN = 'SDL.window.create.fullscreen';
  SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER = 'SDL.window.create.height';
  SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN = 'SDL.window.create.hidden';
  SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN = 'SDL.window.create.high_pixel_density';
  SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN = 'SDL.window.create.maximized';
  SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN = 'SDL.window.create.menu';
  SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN = 'SDL.window.create.metal';
  SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN = 'SDL.window.create.minimized';
  SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN = 'SDL.window.create.modal';
  SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN = 'SDL.window.create.mouse_grabbed';
  SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN = 'SDL.window.create.opengl';
  SDL_PROP_WINDOW_CREATE_PARENT_POINTER = 'SDL.window.create.parent';
  SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN = 'SDL.window.create.resizable';
  SDL_PROP_WINDOW_CREATE_TITLE_STRING = 'SDL.window.create.title';
  SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN = 'SDL.window.create.transparent';
  SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN = 'SDL.window.create.tooltip';
  SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN = 'SDL.window.create.utility';
  SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN = 'SDL.window.create.vulkan';
  SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER = 'SDL.window.create.width';
  SDL_PROP_WINDOW_CREATE_X_NUMBER = 'SDL.window.create.x';
  SDL_PROP_WINDOW_CREATE_Y_NUMBER = 'SDL.window.create.y';
  SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER = 'SDL.window.create.cocoa.window';
  SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER = 'SDL.window.create.cocoa.view';
  SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN = 'SDL.window.create.wayland.surface_role_custom';
  SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN = 'SDL.window.create.wayland.create_egl_window';
  SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER = 'SDL.window.create.wayland.wl_surface';
  SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER = 'SDL.window.create.win32.hwnd';
  SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER = 'SDL.window.create.win32.pixel_format_hwnd';
  SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER = 'SDL.window.create.x11.window';
  SDL_PROP_WINDOW_SHAPE_POINTER = 'SDL.window.shape';
  SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN = 'SDL.window.HDR_enabled';
  SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT = 'SDL.window.SDR_white_level';
  SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT = 'SDL.window.HDR_headroom';
  SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER = 'SDL.window.android.window';
  SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER = 'SDL.window.android.surface';
  SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER = 'SDL.window.uikit.window';
  SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER = 'SDL.window.uikit.metal_view_tag';
  SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER = 'SDL.window.uikit.opengl.framebuffer';
  SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER = 'SDL.window.uikit.opengl.renderbuffer';
  SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER = 'SDL.window.uikit.opengl.resolve_framebuffer';
  SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER = 'SDL.window.kmsdrm.dev_index';
  SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER = 'SDL.window.kmsdrm.drm_fd';
  SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER = 'SDL.window.kmsdrm.gbm_dev';
  SDL_PROP_WINDOW_COCOA_WINDOW_POINTER = 'SDL.window.cocoa.window';
  SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER = 'SDL.window.cocoa.metal_view_tag';
  SDL_PROP_WINDOW_OPENVR_OVERLAY_ID = 'SDL.window.openvr.overlay_id';
  SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER = 'SDL.window.vivante.display';
  SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER = 'SDL.window.vivante.window';
  SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER = 'SDL.window.vivante.surface';
  SDL_PROP_WINDOW_WIN32_HWND_POINTER = 'SDL.window.win32.hwnd';
  SDL_PROP_WINDOW_WIN32_HDC_POINTER = 'SDL.window.win32.hdc';
  SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER = 'SDL.window.win32.instance';
  SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER = 'SDL.window.wayland.display';
  SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER = 'SDL.window.wayland.surface';
  SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER = 'SDL.window.wayland.viewport';
  SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER = 'SDL.window.wayland.egl_window';
  SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER = 'SDL.window.wayland.xdg_surface';
  SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER = 'SDL.window.wayland.xdg_toplevel';
  SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING = 'SDL.window.wayland.xdg_toplevel_export_handle';
  SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER = 'SDL.window.wayland.xdg_popup';
  SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER = 'SDL.window.wayland.xdg_positioner';
  SDL_PROP_WINDOW_X11_DISPLAY_POINTER = 'SDL.window.x11.display';
  SDL_PROP_WINDOW_X11_SCREEN_NUMBER = 'SDL.window.x11.screen';
  SDL_PROP_WINDOW_X11_WINDOW_NUMBER = 'SDL.window.x11.window';
  SDL_WINDOW_SURFACE_VSYNC_DISABLED = 0;
  SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE = (-1);
  SDL_PROP_FILE_DIALOG_FILTERS_POINTER = 'SDL.filedialog.filters';
  SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER = 'SDL.filedialog.nfilters';
  SDL_PROP_FILE_DIALOG_WINDOW_POINTER = 'SDL.filedialog.window';
  SDL_PROP_FILE_DIALOG_LOCATION_STRING = 'SDL.filedialog.location';
  SDL_PROP_FILE_DIALOG_MANY_BOOLEAN = 'SDL.filedialog.many';
  SDL_PROP_FILE_DIALOG_TITLE_STRING = 'SDL.filedialog.title';
  SDL_PROP_FILE_DIALOG_ACCEPT_STRING = 'SDL.filedialog.accept';
  SDL_PROP_FILE_DIALOG_CANCEL_STRING = 'SDL.filedialog.cancel';
  SDL_STANDARD_GRAVITY = 9.80665;
  SDL_JOYSTICK_AXIS_MAX = 32767;
  SDL_JOYSTICK_AXIS_MIN = -32768;
  SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN = 'SDL.joystick.cap.mono_led';
  SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN = 'SDL.joystick.cap.rgb_led';
  SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN = 'SDL.joystick.cap.player_led';
  SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN = 'SDL.joystick.cap.rumble';
  SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN = 'SDL.joystick.cap.trigger_rumble';
  SDL_HAT_CENTERED = $00;
  SDL_HAT_UP = $01;
  SDL_HAT_RIGHT = $02;
  SDL_HAT_DOWN = $04;
  SDL_HAT_LEFT = $08;
  SDL_HAT_RIGHTUP = (SDL_HAT_RIGHT or SDL_HAT_UP);
  SDL_HAT_RIGHTDOWN = (SDL_HAT_RIGHT or SDL_HAT_DOWN);
  SDL_HAT_LEFTUP = (SDL_HAT_LEFT or SDL_HAT_UP);
  SDL_HAT_LEFTDOWN = (SDL_HAT_LEFT or SDL_HAT_DOWN);
  SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN = SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN;
  SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN = SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN;
  SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN = SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN;
  SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN = SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN;
  SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN = SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN;
  SDLK_SCANCODE_MASK = (1 shl 30);
  SDLK_UNKNOWN = $00000000;
  SDLK_RETURN = $0000000d;
  SDLK_ESCAPE = $0000001b;
  SDLK_BACKSPACE = $00000008;
  SDLK_TAB = $00000009;
  SDLK_SPACE = $00000020;
  SDLK_EXCLAIM = $00000021;
  SDLK_DBLAPOSTROPHE = $00000022;
  SDLK_HASH = $00000023;
  SDLK_DOLLAR = $00000024;
  SDLK_PERCENT = $00000025;
  SDLK_AMPERSAND = $00000026;
  SDLK_APOSTROPHE = $00000027;
  SDLK_LEFTPAREN = $00000028;
  SDLK_RIGHTPAREN = $00000029;
  SDLK_ASTERISK = $0000002a;
  SDLK_PLUS = $0000002b;
  SDLK_COMMA = $0000002c;
  SDLK_MINUS = $0000002d;
  SDLK_PERIOD = $0000002e;
  SDLK_SLASH = $0000002f;
  SDLK_0 = $00000030;
  SDLK_1 = $00000031;
  SDLK_2 = $00000032;
  SDLK_3 = $00000033;
  SDLK_4 = $00000034;
  SDLK_5 = $00000035;
  SDLK_6 = $00000036;
  SDLK_7 = $00000037;
  SDLK_8 = $00000038;
  SDLK_9 = $00000039;
  SDLK_COLON = $0000003a;
  SDLK_SEMICOLON = $0000003b;
  SDLK_LESS = $0000003c;
  SDLK_EQUALS = $0000003d;
  SDLK_GREATER = $0000003e;
  SDLK_QUESTION = $0000003f;
  SDLK_AT = $00000040;
  SDLK_LEFTBRACKET = $0000005b;
  SDLK_BACKSLASH = $0000005c;
  SDLK_RIGHTBRACKET = $0000005d;
  SDLK_CARET = $0000005e;
  SDLK_UNDERSCORE = $0000005f;
  SDLK_GRAVE = $00000060;
  SDLK_A = $00000061;
  SDLK_B = $00000062;
  SDLK_C = $00000063;
  SDLK_D = $00000064;
  SDLK_E = $00000065;
  SDLK_F = $00000066;
  SDLK_G = $00000067;
  SDLK_H = $00000068;
  SDLK_I = $00000069;
  SDLK_J = $0000006a;
  SDLK_K = $0000006b;
  SDLK_L = $0000006c;
  SDLK_M = $0000006d;
  SDLK_N = $0000006e;
  SDLK_O = $0000006f;
  SDLK_P = $00000070;
  SDLK_Q = $00000071;
  SDLK_R = $00000072;
  SDLK_S = $00000073;
  SDLK_T = $00000074;
  SDLK_U = $00000075;
  SDLK_V = $00000076;
  SDLK_W = $00000077;
  SDLK_X = $00000078;
  SDLK_Y = $00000079;
  SDLK_Z = $0000007a;
  SDLK_LEFTBRACE = $0000007b;
  SDLK_PIPE = $0000007c;
  SDLK_RIGHTBRACE = $0000007d;
  SDLK_TILDE = $0000007e;
  SDLK_DELETE = $0000007f;
  SDLK_PLUSMINUS = $000000b1;
  SDLK_CAPSLOCK = $40000039;
  SDLK_F1 = $4000003a;
  SDLK_F2 = $4000003b;
  SDLK_F3 = $4000003c;
  SDLK_F4 = $4000003d;
  SDLK_F5 = $4000003e;
  SDLK_F6 = $4000003f;
  SDLK_F7 = $40000040;
  SDLK_F8 = $40000041;
  SDLK_F9 = $40000042;
  SDLK_F10 = $40000043;
  SDLK_F11 = $40000044;
  SDLK_F12 = $40000045;
  SDLK_PRINTSCREEN = $40000046;
  SDLK_SCROLLLOCK = $40000047;
  SDLK_PAUSE = $40000048;
  SDLK_INSERT = $40000049;
  SDLK_HOME = $4000004a;
  SDLK_PAGEUP = $4000004b;
  SDLK_END = $4000004d;
  SDLK_PAGEDOWN = $4000004e;
  SDLK_RIGHT = $4000004f;
  SDLK_LEFT = $40000050;
  SDLK_DOWN = $40000051;
  SDLK_UP = $40000052;
  SDLK_NUMLOCKCLEAR = $40000053;
  SDLK_KP_DIVIDE = $40000054;
  SDLK_KP_MULTIPLY = $40000055;
  SDLK_KP_MINUS = $40000056;
  SDLK_KP_PLUS = $40000057;
  SDLK_KP_ENTER = $40000058;
  SDLK_KP_1 = $40000059;
  SDLK_KP_2 = $4000005a;
  SDLK_KP_3 = $4000005b;
  SDLK_KP_4 = $4000005c;
  SDLK_KP_5 = $4000005d;
  SDLK_KP_6 = $4000005e;
  SDLK_KP_7 = $4000005f;
  SDLK_KP_8 = $40000060;
  SDLK_KP_9 = $40000061;
  SDLK_KP_0 = $40000062;
  SDLK_KP_PERIOD = $40000063;
  SDLK_APPLICATION = $40000065;
  SDLK_POWER = $40000066;
  SDLK_KP_EQUALS = $40000067;
  SDLK_F13 = $40000068;
  SDLK_F14 = $40000069;
  SDLK_F15 = $4000006a;
  SDLK_F16 = $4000006b;
  SDLK_F17 = $4000006c;
  SDLK_F18 = $4000006d;
  SDLK_F19 = $4000006e;
  SDLK_F20 = $4000006f;
  SDLK_F21 = $40000070;
  SDLK_F22 = $40000071;
  SDLK_F23 = $40000072;
  SDLK_F24 = $40000073;
  SDLK_EXECUTE = $40000074;
  SDLK_HELP = $40000075;
  SDLK_MENU = $40000076;
  SDLK_SELECT = $40000077;
  SDLK_STOP = $40000078;
  SDLK_AGAIN = $40000079;
  SDLK_UNDO = $4000007a;
  SDLK_CUT = $4000007b;
  SDLK_COPY = $4000007c;
  SDLK_PASTE = $4000007d;
  SDLK_FIND = $4000007e;
  SDLK_MUTE = $4000007f;
  SDLK_VOLUMEUP = $40000080;
  SDLK_VOLUMEDOWN = $40000081;
  SDLK_KP_COMMA = $40000085;
  SDLK_KP_EQUALSAS400 = $40000086;
  SDLK_ALTERASE = $40000099;
  SDLK_SYSREQ = $4000009a;
  SDLK_CANCEL = $4000009b;
  SDLK_CLEAR = $4000009c;
  SDLK_PRIOR = $4000009d;
  SDLK_RETURN2 = $4000009e;
  SDLK_SEPARATOR = $4000009f;
  SDLK_OUT = $400000a0;
  SDLK_OPER = $400000a1;
  SDLK_CLEARAGAIN = $400000a2;
  SDLK_CRSEL = $400000a3;
  SDLK_EXSEL = $400000a4;
  SDLK_KP_00 = $400000b0;
  SDLK_KP_000 = $400000b1;
  SDLK_THOUSANDSSEPARATOR = $400000b2;
  SDLK_DECIMALSEPARATOR = $400000b3;
  SDLK_CURRENCYUNIT = $400000b4;
  SDLK_CURRENCYSUBUNIT = $400000b5;
  SDLK_KP_LEFTPAREN = $400000b6;
  SDLK_KP_RIGHTPAREN = $400000b7;
  SDLK_KP_LEFTBRACE = $400000b8;
  SDLK_KP_RIGHTBRACE = $400000b9;
  SDLK_KP_TAB = $400000ba;
  SDLK_KP_BACKSPACE = $400000bb;
  SDLK_KP_A = $400000bc;
  SDLK_KP_B = $400000bd;
  SDLK_KP_C = $400000be;
  SDLK_KP_D = $400000bf;
  SDLK_KP_E = $400000c0;
  SDLK_KP_F = $400000c1;
  SDLK_KP_XOR = $400000c2;
  SDLK_KP_POWER = $400000c3;
  SDLK_KP_PERCENT = $400000c4;
  SDLK_KP_LESS = $400000c5;
  SDLK_KP_GREATER = $400000c6;
  SDLK_KP_AMPERSAND = $400000c7;
  SDLK_KP_DBLAMPERSAND = $400000c8;
  SDLK_KP_VERTICALBAR = $400000c9;
  SDLK_KP_DBLVERTICALBAR = $400000ca;
  SDLK_KP_COLON = $400000cb;
  SDLK_KP_HASH = $400000cc;
  SDLK_KP_SPACE = $400000cd;
  SDLK_KP_AT = $400000ce;
  SDLK_KP_EXCLAM = $400000cf;
  SDLK_KP_MEMSTORE = $400000d0;
  SDLK_KP_MEMRECALL = $400000d1;
  SDLK_KP_MEMCLEAR = $400000d2;
  SDLK_KP_MEMADD = $400000d3;
  SDLK_KP_MEMSUBTRACT = $400000d4;
  SDLK_KP_MEMMULTIPLY = $400000d5;
  SDLK_KP_MEMDIVIDE = $400000d6;
  SDLK_KP_PLUSMINUS = $400000d7;
  SDLK_KP_CLEAR = $400000d8;
  SDLK_KP_CLEARENTRY = $400000d9;
  SDLK_KP_BINARY = $400000da;
  SDLK_KP_OCTAL = $400000db;
  SDLK_KP_DECIMAL = $400000dc;
  SDLK_KP_HEXADECIMAL = $400000dd;
  SDLK_LCTRL = $400000e0;
  SDLK_LSHIFT = $400000e1;
  SDLK_LALT = $400000e2;
  SDLK_LGUI = $400000e3;
  SDLK_RCTRL = $400000e4;
  SDLK_RSHIFT = $400000e5;
  SDLK_RALT = $400000e6;
  SDLK_RGUI = $400000e7;
  SDLK_MODE = $40000101;
  SDLK_SLEEP = $40000102;
  SDLK_WAKE = $40000103;
  SDLK_CHANNEL_INCREMENT = $40000104;
  SDLK_CHANNEL_DECREMENT = $40000105;
  SDLK_MEDIA_PLAY = $40000106;
  SDLK_MEDIA_PAUSE = $40000107;
  SDLK_MEDIA_RECORD = $40000108;
  SDLK_MEDIA_FAST_FORWARD = $40000109;
  SDLK_MEDIA_REWIND = $4000010a;
  SDLK_MEDIA_NEXT_TRACK = $4000010b;
  SDLK_MEDIA_PREVIOUS_TRACK = $4000010c;
  SDLK_MEDIA_STOP = $4000010d;
  SDLK_MEDIA_EJECT = $4000010e;
  SDLK_MEDIA_PLAY_PAUSE = $4000010f;
  SDLK_MEDIA_SELECT = $40000110;
  SDLK_AC_NEW = $40000111;
  SDLK_AC_OPEN = $40000112;
  SDLK_AC_CLOSE = $40000113;
  SDLK_AC_EXIT = $40000114;
  SDLK_AC_SAVE = $40000115;
  SDLK_AC_PRINT = $40000116;
  SDLK_AC_PROPERTIES = $40000117;
  SDLK_AC_SEARCH = $40000118;
  SDLK_AC_HOME = $40000119;
  SDLK_AC_BACK = $4000011a;
  SDLK_AC_FORWARD = $4000011b;
  SDLK_AC_STOP = $4000011c;
  SDLK_AC_REFRESH = $4000011d;
  SDLK_AC_BOOKMARKS = $4000011e;
  SDLK_SOFTLEFT = $4000011f;
  SDLK_SOFTRIGHT = $40000120;
  SDLK_CALL = $40000121;
  SDLK_ENDCALL = $40000122;
  SDL_KMOD_NONE = $0000;
  SDL_KMOD_LSHIFT = $0001;
  SDL_KMOD_RSHIFT = $0002;
  SDL_KMOD_LCTRL = $0040;
  SDL_KMOD_RCTRL = $0080;
  SDL_KMOD_LALT = $0100;
  SDL_KMOD_RALT = $0200;
  SDL_KMOD_LGUI = $0400;
  SDL_KMOD_RGUI = $0800;
  SDL_KMOD_NUM = $1000;
  SDL_KMOD_CAPS = $2000;
  SDL_KMOD_MODE = $4000;
  SDL_KMOD_SCROLL = $8000;
  SDL_KMOD_CTRL = (SDL_KMOD_LCTRL or SDL_KMOD_RCTRL);
  SDL_KMOD_SHIFT = (SDL_KMOD_LSHIFT or SDL_KMOD_RSHIFT);
  SDL_KMOD_ALT = (SDL_KMOD_LALT or SDL_KMOD_RALT);
  SDL_KMOD_GUI = (SDL_KMOD_LGUI or SDL_KMOD_RGUI);
  SDL_PROP_TEXTINPUT_TYPE_NUMBER = 'SDL.textinput.type';
  SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER = 'SDL.textinput.capitalization';
  SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN = 'SDL.textinput.autocorrect';
  SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN = 'SDL.textinput.multiline';
  SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER = 'SDL.textinput.android.inputtype';
  SDL_BUTTON_LEFT = 1;
  SDL_BUTTON_MIDDLE = 2;
  SDL_BUTTON_RIGHT = 3;
  SDL_BUTTON_X1 = 4;
  SDL_BUTTON_X2 = 5;
  SDL_PEN_INPUT_DOWN = (1 shl 0);
  SDL_PEN_INPUT_BUTTON_1 = (1 shl 1);
  SDL_PEN_INPUT_BUTTON_2 = (1 shl 2);
  SDL_PEN_INPUT_BUTTON_3 = (1 shl 3);
  SDL_PEN_INPUT_BUTTON_4 = (1 shl 4);
  SDL_PEN_INPUT_BUTTON_5 = (1 shl 5);
  SDL_PEN_INPUT_ERASER_TIP = (1 shl 30);
  SDL_TOUCH_MOUSEID = -1;
  SDL_MOUSE_TOUCHID = -1;
  SDL_GLOB_CASEINSENSITIVE = (1 shl 0);
  SDL_GPU_TEXTUREUSAGE_SAMPLER = (1 shl 0);
  SDL_GPU_TEXTUREUSAGE_COLOR_TARGET = (1 shl 1);
  SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET = (1 shl 2);
  SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ = (1 shl 3);
  SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ = (1 shl 4);
  SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE = (1 shl 5);
  SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE = (1 shl 6);
  SDL_GPU_BUFFERUSAGE_VERTEX = (1 shl 0);
  SDL_GPU_BUFFERUSAGE_INDEX = (1 shl 1);
  SDL_GPU_BUFFERUSAGE_INDIRECT = (1 shl 2);
  SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ = (1 shl 3);
  SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ = (1 shl 4);
  SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE = (1 shl 5);
  SDL_GPU_SHADERFORMAT_INVALID = 0;
  SDL_GPU_SHADERFORMAT_PRIVATE = (1 shl 0);
  SDL_GPU_SHADERFORMAT_SPIRV = (1 shl 1);
  SDL_GPU_SHADERFORMAT_DXBC = (1 shl 2);
  SDL_GPU_SHADERFORMAT_DXIL = (1 shl 3);
  SDL_GPU_SHADERFORMAT_MSL = (1 shl 4);
  SDL_GPU_SHADERFORMAT_METALLIB = (1 shl 5);
  SDL_GPU_COLORCOMPONENT_R = (1 shl 0);
  SDL_GPU_COLORCOMPONENT_G = (1 shl 1);
  SDL_GPU_COLORCOMPONENT_B = (1 shl 2);
  SDL_GPU_COLORCOMPONENT_A = (1 shl 3);
  SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_R_FLOAT = 'SDL.gpu.createtexture.d3d12.clear.r';
  SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_G_FLOAT = 'SDL.gpu.createtexture.d3d12.clear.g';
  SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_B_FLOAT = 'SDL.gpu.createtexture.d3d12.clear.b';
  SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_A_FLOAT = 'SDL.gpu.createtexture.d3d12.clear.a';
  SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_DEPTH_FLOAT = 'SDL.gpu.createtexture.d3d12.clear.depth';
  SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_STENCIL_UINT8 = 'SDL.gpu.createtexture.d3d12.clear.stencil';
  SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN = 'SDL.gpu.device.create.debugmode';
  SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN = 'SDL.gpu.device.create.preferlowpower';
  SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING = 'SDL.gpu.device.create.name';
  SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN = 'SDL.gpu.device.create.shaders.private';
  SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN = 'SDL.gpu.device.create.shaders.spirv';
  SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN = 'SDL.gpu.device.create.shaders.dxbc';
  SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN = 'SDL.gpu.device.create.shaders.dxil';
  SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN = 'SDL.gpu.device.create.shaders.msl';
  SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN = 'SDL.gpu.device.create.shaders.metallib';
  SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING = 'SDL.gpu.device.create.d3d12.semantic';
  SDL_HAPTIC_CONSTANT = (1 shl 0);
  SDL_HAPTIC_SINE = (1 shl 1);
  SDL_HAPTIC_SQUARE = (1 shl 2);
  SDL_HAPTIC_TRIANGLE = (1 shl 3);
  SDL_HAPTIC_SAWTOOTHUP = (1 shl 4);
  SDL_HAPTIC_SAWTOOTHDOWN = (1 shl 5);
  SDL_HAPTIC_RAMP = (1 shl 6);
  SDL_HAPTIC_SPRING = (1 shl 7);
  SDL_HAPTIC_DAMPER = (1 shl 8);
  SDL_HAPTIC_INERTIA = (1 shl 9);
  SDL_HAPTIC_FRICTION = (1 shl 10);
  SDL_HAPTIC_LEFTRIGHT = (1 shl 11);
  SDL_HAPTIC_RESERVED1 = (1 shl 12);
  SDL_HAPTIC_RESERVED2 = (1 shl 13);
  SDL_HAPTIC_RESERVED3 = (1 shl 14);
  SDL_HAPTIC_CUSTOM = (1 shl 15);
  SDL_HAPTIC_GAIN = (1 shl 16);
  SDL_HAPTIC_AUTOCENTER = (1 shl 17);
  SDL_HAPTIC_STATUS = (1 shl 18);
  SDL_HAPTIC_PAUSE = (1 shl 19);
  SDL_HAPTIC_POLAR = 0;
  SDL_HAPTIC_CARTESIAN = 1;
  SDL_HAPTIC_SPHERICAL = 2;
  SDL_HAPTIC_STEERING_AXIS = 3;
  SDL_HAPTIC_INFINITY = 4294967295;
  SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = 'SDL_ALLOW_ALT_TAB_WHILE_GRABBED';
  SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY = 'SDL_ANDROID_ALLOW_RECREATE_ACTIVITY';
  SDL_HINT_ANDROID_BLOCK_ON_PAUSE = 'SDL_ANDROID_BLOCK_ON_PAUSE';
  SDL_HINT_ANDROID_LOW_LATENCY_AUDIO = 'SDL_ANDROID_LOW_LATENCY_AUDIO';
  SDL_HINT_ANDROID_TRAP_BACK_BUTTON = 'SDL_ANDROID_TRAP_BACK_BUTTON';
  SDL_HINT_APP_ID = 'SDL_APP_ID';
  SDL_HINT_APP_NAME = 'SDL_APP_NAME';
  SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = 'SDL_APPLE_TV_CONTROLLER_UI_EVENTS';
  SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = 'SDL_APPLE_TV_REMOTE_ALLOW_ROTATION';
  SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE = 'SDL_AUDIO_ALSA_DEFAULT_DEVICE';
  SDL_HINT_AUDIO_CATEGORY = 'SDL_AUDIO_CATEGORY';
  SDL_HINT_AUDIO_CHANNELS = 'SDL_AUDIO_CHANNELS';
  SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME = 'SDL_AUDIO_DEVICE_APP_ICON_NAME';
  SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES = 'SDL_AUDIO_DEVICE_SAMPLE_FRAMES';
  SDL_HINT_AUDIO_DEVICE_STREAM_NAME = 'SDL_AUDIO_DEVICE_STREAM_NAME';
  SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = 'SDL_AUDIO_DEVICE_STREAM_ROLE';
  SDL_HINT_AUDIO_DISK_INPUT_FILE = 'SDL_AUDIO_DISK_INPUT_FILE';
  SDL_HINT_AUDIO_DISK_OUTPUT_FILE = 'SDL_AUDIO_DISK_OUTPUT_FILE';
  SDL_HINT_AUDIO_DISK_TIMESCALE = 'SDL_AUDIO_DISK_TIMESCALE';
  SDL_HINT_AUDIO_DRIVER = 'SDL_AUDIO_DRIVER';
  SDL_HINT_AUDIO_DUMMY_TIMESCALE = 'SDL_AUDIO_DUMMY_TIMESCALE';
  SDL_HINT_AUDIO_FORMAT = 'SDL_AUDIO_FORMAT';
  SDL_HINT_AUDIO_FREQUENCY = 'SDL_AUDIO_FREQUENCY';
  SDL_HINT_AUDIO_INCLUDE_MONITORS = 'SDL_AUDIO_INCLUDE_MONITORS';
  SDL_HINT_AUTO_UPDATE_JOYSTICKS = 'SDL_AUTO_UPDATE_JOYSTICKS';
  SDL_HINT_AUTO_UPDATE_SENSORS = 'SDL_AUTO_UPDATE_SENSORS';
  SDL_HINT_BMP_SAVE_LEGACY_FORMAT = 'SDL_BMP_SAVE_LEGACY_FORMAT';
  SDL_HINT_CAMERA_DRIVER = 'SDL_CAMERA_DRIVER';
  SDL_HINT_CPU_FEATURE_MASK = 'SDL_CPU_FEATURE_MASK';
  SDL_HINT_JOYSTICK_DIRECTINPUT = 'SDL_JOYSTICK_DIRECTINPUT';
  SDL_HINT_FILE_DIALOG_DRIVER = 'SDL_FILE_DIALOG_DRIVER';
  SDL_HINT_DISPLAY_USABLE_BOUNDS = 'SDL_DISPLAY_USABLE_BOUNDS';
  SDL_HINT_EMSCRIPTEN_ASYNCIFY = 'SDL_EMSCRIPTEN_ASYNCIFY';
  SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR = 'SDL_EMSCRIPTEN_CANVAS_SELECTOR';
  SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = 'SDL_EMSCRIPTEN_KEYBOARD_ELEMENT';
  SDL_HINT_ENABLE_SCREEN_KEYBOARD = 'SDL_ENABLE_SCREEN_KEYBOARD';
  SDL_HINT_EVDEV_DEVICES = 'SDL_EVDEV_DEVICES';
  SDL_HINT_EVENT_LOGGING = 'SDL_EVENT_LOGGING';
  SDL_HINT_FORCE_RAISEWINDOW = 'SDL_FORCE_RAISEWINDOW';
  SDL_HINT_FRAMEBUFFER_ACCELERATION = 'SDL_FRAMEBUFFER_ACCELERATION';
  SDL_HINT_GAMECONTROLLERCONFIG = 'SDL_GAMECONTROLLERCONFIG';
  SDL_HINT_GAMECONTROLLERCONFIG_FILE = 'SDL_GAMECONTROLLERCONFIG_FILE';
  SDL_HINT_GAMECONTROLLERTYPE = 'SDL_GAMECONTROLLERTYPE';
  SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = 'SDL_GAMECONTROLLER_IGNORE_DEVICES';
  SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = 'SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT';
  SDL_HINT_GAMECONTROLLER_SENSOR_FUSION = 'SDL_GAMECONTROLLER_SENSOR_FUSION';
  SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT = 'SDL_GDK_TEXTINPUT_DEFAULT_TEXT';
  SDL_HINT_GDK_TEXTINPUT_DESCRIPTION = 'SDL_GDK_TEXTINPUT_DESCRIPTION';
  SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH = 'SDL_GDK_TEXTINPUT_MAX_LENGTH';
  SDL_HINT_GDK_TEXTINPUT_SCOPE = 'SDL_GDK_TEXTINPUT_SCOPE';
  SDL_HINT_GDK_TEXTINPUT_TITLE = 'SDL_GDK_TEXTINPUT_TITLE';
  SDL_HINT_HIDAPI_LIBUSB = 'SDL_HIDAPI_LIBUSB';
  SDL_HINT_HIDAPI_LIBUSB_WHITELIST = 'SDL_HIDAPI_LIBUSB_WHITELIST';
  SDL_HINT_HIDAPI_UDEV = 'SDL_HIDAPI_UDEV';
  SDL_HINT_GPU_DRIVER = 'SDL_GPU_DRIVER';
  SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS = 'SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS';
  SDL_HINT_HIDAPI_IGNORE_DEVICES = 'SDL_HIDAPI_IGNORE_DEVICES';
  SDL_HINT_IME_IMPLEMENTED_UI = 'SDL_IME_IMPLEMENTED_UI';
  SDL_HINT_IOS_HIDE_HOME_INDICATOR = 'SDL_IOS_HIDE_HOME_INDICATOR';
  SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = 'SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS';
  SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES = 'SDL_JOYSTICK_ARCADESTICK_DEVICES';
  SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED = 'SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED';
  SDL_HINT_JOYSTICK_BLACKLIST_DEVICES = 'SDL_JOYSTICK_BLACKLIST_DEVICES';
  SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED = 'SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED';
  SDL_HINT_JOYSTICK_DEVICE = 'SDL_JOYSTICK_DEVICE';
  SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES = 'SDL_JOYSTICK_FLIGHTSTICK_DEVICES';
  SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED = 'SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED';
  SDL_HINT_JOYSTICK_GAMEINPUT = 'SDL_JOYSTICK_GAMEINPUT';
  SDL_HINT_JOYSTICK_GAMECUBE_DEVICES = 'SDL_JOYSTICK_GAMECUBE_DEVICES';
  SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED = 'SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED';
  SDL_HINT_JOYSTICK_HIDAPI = 'SDL_JOYSTICK_HIDAPI';
  SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS = 'SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS';
  SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = 'SDL_JOYSTICK_HIDAPI_GAMECUBE';
  SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE = 'SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE';
  SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = 'SDL_JOYSTICK_HIDAPI_JOY_CONS';
  SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED = 'SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED';
  SDL_HINT_JOYSTICK_HIDAPI_LUNA = 'SDL_JOYSTICK_HIDAPI_LUNA';
  SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC = 'SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC';
  SDL_HINT_JOYSTICK_HIDAPI_PS3 = 'SDL_JOYSTICK_HIDAPI_PS3';
  SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER = 'SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER';
  SDL_HINT_JOYSTICK_HIDAPI_PS4 = 'SDL_JOYSTICK_HIDAPI_PS4';
  SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL = 'SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL';
  SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = 'SDL_JOYSTICK_HIDAPI_PS4_RUMBLE';
  SDL_HINT_JOYSTICK_HIDAPI_PS5 = 'SDL_JOYSTICK_HIDAPI_PS5';
  SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = 'SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED';
  SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = 'SDL_JOYSTICK_HIDAPI_PS5_RUMBLE';
  SDL_HINT_JOYSTICK_HIDAPI_SHIELD = 'SDL_JOYSTICK_HIDAPI_SHIELD';
  SDL_HINT_JOYSTICK_HIDAPI_STADIA = 'SDL_JOYSTICK_HIDAPI_STADIA';
  SDL_HINT_JOYSTICK_HIDAPI_STEAM = 'SDL_JOYSTICK_HIDAPI_STEAM';
  SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED = 'SDL_JOYSTICK_HIDAPI_STEAM_HOME_LED';
  SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK = 'SDL_JOYSTICK_HIDAPI_STEAMDECK';
  SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI = 'SDL_JOYSTICK_HIDAPI_STEAM_HORI';
  SDL_HINT_JOYSTICK_HIDAPI_SWITCH = 'SDL_JOYSTICK_HIDAPI_SWITCH';
  SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = 'SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED';
  SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED = 'SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED';
  SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS = 'SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS';
  SDL_HINT_JOYSTICK_HIDAPI_WII = 'SDL_JOYSTICK_HIDAPI_WII';
  SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED = 'SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED';
  SDL_HINT_JOYSTICK_HIDAPI_XBOX = 'SDL_JOYSTICK_HIDAPI_XBOX';
  SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 = 'SDL_JOYSTICK_HIDAPI_XBOX_360';
  SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED = 'SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED';
  SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS = 'SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS';
  SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE = 'SDL_JOYSTICK_HIDAPI_XBOX_ONE';
  SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED = 'SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED';
  SDL_HINT_JOYSTICK_IOKIT = 'SDL_JOYSTICK_IOKIT';
  SDL_HINT_JOYSTICK_LINUX_CLASSIC = 'SDL_JOYSTICK_LINUX_CLASSIC';
  SDL_HINT_JOYSTICK_LINUX_DEADZONES = 'SDL_JOYSTICK_LINUX_DEADZONES';
  SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS = 'SDL_JOYSTICK_LINUX_DIGITAL_HATS';
  SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES = 'SDL_JOYSTICK_LINUX_HAT_DEADZONES';
  SDL_HINT_JOYSTICK_MFI = 'SDL_JOYSTICK_MFI';
  SDL_HINT_JOYSTICK_RAWINPUT = 'SDL_JOYSTICK_RAWINPUT';
  SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = 'SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT';
  SDL_HINT_JOYSTICK_ROG_CHAKRAM = 'SDL_JOYSTICK_ROG_CHAKRAM';
  SDL_HINT_JOYSTICK_THREAD = 'SDL_JOYSTICK_THREAD';
  SDL_HINT_JOYSTICK_THROTTLE_DEVICES = 'SDL_JOYSTICK_THROTTLE_DEVICES';
  SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED = 'SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED';
  SDL_HINT_JOYSTICK_WGI = 'SDL_JOYSTICK_WGI';
  SDL_HINT_JOYSTICK_WHEEL_DEVICES = 'SDL_JOYSTICK_WHEEL_DEVICES';
  SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED = 'SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED';
  SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES = 'SDL_JOYSTICK_ZERO_CENTERED_DEVICES';
  SDL_HINT_KEYCODE_OPTIONS = 'SDL_KEYCODE_OPTIONS';
  SDL_HINT_KMSDRM_DEVICE_INDEX = 'SDL_KMSDRM_DEVICE_INDEX';
  SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = 'SDL_KMSDRM_REQUIRE_DRM_MASTER';
  SDL_HINT_LOGGING = 'SDL_LOGGING';
  SDL_HINT_MAC_BACKGROUND_APP = 'SDL_MAC_BACKGROUND_APP';
  SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = 'SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK';
  SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH = 'SDL_MAC_OPENGL_ASYNC_DISPATCH';
  SDL_HINT_MAC_SCROLL_MOMENTUM = 'SDL_MAC_SCROLL_MOMENTUM';
  SDL_HINT_MAIN_CALLBACK_RATE = 'SDL_MAIN_CALLBACK_RATE';
  SDL_HINT_MOUSE_AUTO_CAPTURE = 'SDL_MOUSE_AUTO_CAPTURE';
  SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = 'SDL_MOUSE_DOUBLE_CLICK_RADIUS';
  SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = 'SDL_MOUSE_DOUBLE_CLICK_TIME';
  SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR = 'SDL_MOUSE_DEFAULT_SYSTEM_CURSOR';
  SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE = 'SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE';
  SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = 'SDL_MOUSE_FOCUS_CLICKTHROUGH';
  SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = 'SDL_MOUSE_NORMAL_SPEED_SCALE';
  SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = 'SDL_MOUSE_RELATIVE_MODE_CENTER';
  SDL_HINT_MOUSE_RELATIVE_MODE_WARP = 'SDL_MOUSE_RELATIVE_MODE_WARP';
  SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = 'SDL_MOUSE_RELATIVE_SPEED_SCALE';
  SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE = 'SDL_MOUSE_RELATIVE_SYSTEM_SCALE';
  SDL_HINT_MOUSE_RELATIVE_WARP_MOTION = 'SDL_MOUSE_RELATIVE_WARP_MOTION';
  SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE = 'SDL_MOUSE_RELATIVE_CURSOR_VISIBLE';
  SDL_HINT_MOUSE_RELATIVE_CLIP_INTERVAL = 'SDL_MOUSE_RELATIVE_CLIP_INTERVAL';
  SDL_HINT_MOUSE_TOUCH_EVENTS = 'SDL_MOUSE_TOUCH_EVENTS';
  SDL_HINT_MUTE_CONSOLE_KEYBOARD = 'SDL_MUTE_CONSOLE_KEYBOARD';
  SDL_HINT_NO_SIGNAL_HANDLERS = 'SDL_NO_SIGNAL_HANDLERS';
  SDL_HINT_OPENGL_LIBRARY = 'SDL_OPENGL_LIBRARY';
  SDL_HINT_OPENGL_ES_DRIVER = 'SDL_OPENGL_ES_DRIVER';
  SDL_HINT_OPENVR_LIBRARY = 'SDL_OPENVR_LIBRARY';
  SDL_HINT_ORIENTATIONS = 'SDL_ORIENTATIONS';
  SDL_HINT_POLL_SENTINEL = 'SDL_POLL_SENTINEL';
  SDL_HINT_PREFERRED_LOCALES = 'SDL_PREFERRED_LOCALES';
  SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = 'SDL_QUIT_ON_LAST_WINDOW_CLOSE';
  SDL_HINT_RENDER_DIRECT3D_THREADSAFE = 'SDL_RENDER_DIRECT3D_THREADSAFE';
  SDL_HINT_RENDER_DIRECT3D11_DEBUG = 'SDL_RENDER_DIRECT3D11_DEBUG';
  SDL_HINT_RENDER_VULKAN_DEBUG = 'SDL_RENDER_VULKAN_DEBUG';
  SDL_HINT_RENDER_GPU_DEBUG = 'SDL_RENDER_GPU_DEBUG';
  SDL_HINT_RENDER_GPU_LOW_POWER = 'SDL_RENDER_GPU_LOW_POWER';
  SDL_HINT_RENDER_DRIVER = 'SDL_RENDER_DRIVER';
  SDL_HINT_RENDER_LINE_METHOD = 'SDL_RENDER_LINE_METHOD';
  SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE = 'SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE';
  SDL_HINT_RENDER_VSYNC = 'SDL_RENDER_VSYNC';
  SDL_HINT_RETURN_KEY_HIDES_IME = 'SDL_RETURN_KEY_HIDES_IME';
  SDL_HINT_ROG_GAMEPAD_MICE = 'SDL_ROG_GAMEPAD_MICE';
  SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED = 'SDL_ROG_GAMEPAD_MICE_EXCLUDED';
  SDL_HINT_RPI_VIDEO_LAYER = 'SDL_RPI_VIDEO_LAYER';
  SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = 'SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME';
  SDL_HINT_SHUTDOWN_DBUS_ON_QUIT = 'SDL_SHUTDOWN_DBUS_ON_QUIT';
  SDL_HINT_STORAGE_TITLE_DRIVER = 'SDL_STORAGE_TITLE_DRIVER';
  SDL_HINT_STORAGE_USER_DRIVER = 'SDL_STORAGE_USER_DRIVER';
  SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = 'SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL';
  SDL_HINT_THREAD_PRIORITY_POLICY = 'SDL_THREAD_PRIORITY_POLICY';
  SDL_HINT_TIMER_RESOLUTION = 'SDL_TIMER_RESOLUTION';
  SDL_HINT_TOUCH_MOUSE_EVENTS = 'SDL_TOUCH_MOUSE_EVENTS';
  SDL_HINT_TRACKPAD_IS_TOUCH_ONLY = 'SDL_TRACKPAD_IS_TOUCH_ONLY';
  SDL_HINT_TV_REMOTE_AS_JOYSTICK = 'SDL_TV_REMOTE_AS_JOYSTICK';
  SDL_HINT_VIDEO_ALLOW_SCREENSAVER = 'SDL_VIDEO_ALLOW_SCREENSAVER';
  SDL_HINT_VIDEO_DISPLAY_PRIORITY = 'SDL_VIDEO_DISPLAY_PRIORITY';
  SDL_HINT_VIDEO_DOUBLE_BUFFER = 'SDL_VIDEO_DOUBLE_BUFFER';
  SDL_HINT_VIDEO_DRIVER = 'SDL_VIDEO_DRIVER';
  SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES = 'SDL_VIDEO_DUMMY_SAVE_FRAMES';
  SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK = 'SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK';
  SDL_HINT_VIDEO_FORCE_EGL = 'SDL_VIDEO_FORCE_EGL';
  SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = 'SDL_VIDEO_MAC_FULLSCREEN_SPACES';
  SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = 'SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS';
  SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES = 'SDL_VIDEO_OFFSCREEN_SAVE_FRAMES';
  SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS = 'SDL_VIDEO_SYNC_WINDOW_OPERATIONS';
  SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = 'SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR';
  SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION = 'SDL_VIDEO_WAYLAND_MODE_EMULATION';
  SDL_HINT_VIDEO_WAYLAND_MODE_SCALING = 'SDL_VIDEO_WAYLAND_MODE_SCALING';
  SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR = 'SDL_VIDEO_WAYLAND_PREFER_LIBDECOR';
  SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY = 'SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY';
  SDL_HINT_VIDEO_WIN_D3DCOMPILER = 'SDL_VIDEO_WIN_D3DCOMPILER';
  SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = 'SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR';
  SDL_HINT_VIDEO_X11_NET_WM_PING = 'SDL_VIDEO_X11_NET_WM_PING';
  SDL_HINT_VIDEO_X11_NODIRECTCOLOR = 'SDL_VIDEO_X11_NODIRECTCOLOR';
  SDL_HINT_VIDEO_X11_SCALING_FACTOR = 'SDL_VIDEO_X11_SCALING_FACTOR';
  SDL_HINT_VIDEO_X11_VISUALID = 'SDL_VIDEO_X11_VISUALID';
  SDL_HINT_VIDEO_X11_WINDOW_VISUALID = 'SDL_VIDEO_X11_WINDOW_VISUALID';
  SDL_HINT_VIDEO_X11_XRANDR = 'SDL_VIDEO_X11_XRANDR';
  SDL_HINT_VITA_ENABLE_BACK_TOUCH = 'SDL_VITA_ENABLE_BACK_TOUCH';
  SDL_HINT_VITA_ENABLE_FRONT_TOUCH = 'SDL_VITA_ENABLE_FRONT_TOUCH';
  SDL_HINT_VITA_MODULE_PATH = 'SDL_VITA_MODULE_PATH';
  SDL_HINT_VITA_PVR_INIT = 'SDL_VITA_PVR_INIT';
  SDL_HINT_VITA_RESOLUTION = 'SDL_VITA_RESOLUTION';
  SDL_HINT_VITA_PVR_OPENGL = 'SDL_VITA_PVR_OPENGL';
  SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = 'SDL_VITA_TOUCH_MOUSE_DEVICE';
  SDL_HINT_VULKAN_DISPLAY = 'SDL_VULKAN_DISPLAY';
  SDL_HINT_VULKAN_LIBRARY = 'SDL_VULKAN_LIBRARY';
  SDL_HINT_WAVE_FACT_CHUNK = 'SDL_WAVE_FACT_CHUNK';
  SDL_HINT_WAVE_CHUNK_LIMIT = 'SDL_WAVE_CHUNK_LIMIT';
  SDL_HINT_WAVE_RIFF_CHUNK_SIZE = 'SDL_WAVE_RIFF_CHUNK_SIZE';
  SDL_HINT_WAVE_TRUNCATION = 'SDL_WAVE_TRUNCATION';
  SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED = 'SDL_WINDOW_ACTIVATE_WHEN_RAISED';
  SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN = 'SDL_WINDOW_ACTIVATE_WHEN_SHOWN';
  SDL_HINT_WINDOW_ALLOW_TOPMOST = 'SDL_WINDOW_ALLOW_TOPMOST';
  SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = 'SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN';
  SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 = 'SDL_WINDOWS_CLOSE_ON_ALT_F4';
  SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS = 'SDL_WINDOWS_ENABLE_MENU_MNEMONICS';
  SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = 'SDL_WINDOWS_ENABLE_MESSAGELOOP';
  SDL_HINT_WINDOWS_GAMEINPUT = 'SDL_WINDOWS_GAMEINPUT';
  SDL_HINT_WINDOWS_RAW_KEYBOARD = 'SDL_WINDOWS_RAW_KEYBOARD';
  SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = 'SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL';
  SDL_HINT_WINDOWS_INTRESOURCE_ICON = 'SDL_WINDOWS_INTRESOURCE_ICON';
  SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = 'SDL_WINDOWS_INTRESOURCE_ICON_SMALL';
  SDL_HINT_WINDOWS_USE_D3D9EX = 'SDL_WINDOWS_USE_D3D9EX';
  SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE = 'SDL_WINDOWS_ERASE_BACKGROUND_MODE';
  SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = 'SDL_X11_FORCE_OVERRIDE_REDIRECT';
  SDL_HINT_X11_WINDOW_TYPE = 'SDL_X11_WINDOW_TYPE';
  SDL_HINT_X11_XCB_LIBRARY = 'SDL_X11_XCB_LIBRARY';
  SDL_HINT_XINPUT_ENABLED = 'SDL_XINPUT_ENABLED';
  SDL_HINT_ASSERT = 'SDL_ASSERT';
  SDL_INIT_AUDIO = $00000010;
  SDL_INIT_VIDEO = $00000020;
  SDL_INIT_JOYSTICK = $00000200;
  SDL_INIT_HAPTIC = $00001000;
  SDL_INIT_GAMEPAD = $00002000;
  SDL_INIT_EVENTS = $00004000;
  SDL_INIT_SENSOR = $00008000;
  SDL_INIT_CAMERA = $00010000;
  SDL_PROP_APP_METADATA_NAME_STRING = 'SDL.app.metadata.name';
  SDL_PROP_APP_METADATA_VERSION_STRING = 'SDL.app.metadata.version';
  SDL_PROP_APP_METADATA_IDENTIFIER_STRING = 'SDL.app.metadata.identifier';
  SDL_PROP_APP_METADATA_CREATOR_STRING = 'SDL.app.metadata.creator';
  SDL_PROP_APP_METADATA_COPYRIGHT_STRING = 'SDL.app.metadata.copyright';
  SDL_PROP_APP_METADATA_URL_STRING = 'SDL.app.metadata.url';
  SDL_PROP_APP_METADATA_TYPE_STRING = 'SDL.app.metadata.type';
  SDL_MESSAGEBOX_ERROR = $00000010;
  SDL_MESSAGEBOX_WARNING = $00000020;
  SDL_MESSAGEBOX_INFORMATION = $00000040;
  SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = $00000080;
  SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = $00000100;
  SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = $00000001;
  SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = $00000002;
  SDL_PROP_PROCESS_CREATE_ARGS_POINTER = 'SDL.process.create.args';
  SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER = 'SDL.process.create.environment';
  SDL_PROP_PROCESS_CREATE_STDIN_NUMBER = 'SDL.process.create.stdin_option';
  SDL_PROP_PROCESS_CREATE_STDIN_POINTER = 'SDL.process.create.stdin_source';
  SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER = 'SDL.process.create.stdout_option';
  SDL_PROP_PROCESS_CREATE_STDOUT_POINTER = 'SDL.process.create.stdout_source';
  SDL_PROP_PROCESS_CREATE_STDERR_NUMBER = 'SDL.process.create.stderr_option';
  SDL_PROP_PROCESS_CREATE_STDERR_POINTER = 'SDL.process.create.stderr_source';
  SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN = 'SDL.process.create.stderr_to_stdout';
  SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN = 'SDL.process.create.background';
  SDL_PROP_PROCESS_PID_NUMBER = 'SDL.process.pid';
  SDL_PROP_PROCESS_STDIN_POINTER = 'SDL.process.stdin';
  SDL_PROP_PROCESS_STDOUT_POINTER = 'SDL.process.stdout';
  SDL_PROP_PROCESS_STDERR_POINTER = 'SDL.process.stderr';
  SDL_PROP_PROCESS_BACKGROUND_BOOLEAN = 'SDL.process.background';
  SDL_SOFTWARE_RENDERER = 'software';
  SDL_PROP_RENDERER_CREATE_NAME_STRING = 'SDL.renderer.create.name';
  SDL_PROP_RENDERER_CREATE_WINDOW_POINTER = 'SDL.renderer.create.window';
  SDL_PROP_RENDERER_CREATE_SURFACE_POINTER = 'SDL.renderer.create.surface';
  SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER = 'SDL.renderer.create.output_colorspace';
  SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER = 'SDL.renderer.create.present_vsync';
  SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER = 'SDL.renderer.create.vulkan.instance';
  SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER = 'SDL.renderer.create.vulkan.surface';
  SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER = 'SDL.renderer.create.vulkan.physical_device';
  SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER = 'SDL.renderer.create.vulkan.device';
  SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = 'SDL.renderer.create.vulkan.graphics_queue_family_index';
  SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = 'SDL.renderer.create.vulkan.present_queue_family_index';
  SDL_PROP_RENDERER_NAME_STRING = 'SDL.renderer.name';
  SDL_PROP_RENDERER_WINDOW_POINTER = 'SDL.renderer.window';
  SDL_PROP_RENDERER_SURFACE_POINTER = 'SDL.renderer.surface';
  SDL_PROP_RENDERER_VSYNC_NUMBER = 'SDL.renderer.vsync';
  SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER = 'SDL.renderer.max_texture_size';
  SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER = 'SDL.renderer.texture_formats';
  SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER = 'SDL.renderer.output_colorspace';
  SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN = 'SDL.renderer.HDR_enabled';
  SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT = 'SDL.renderer.SDR_white_point';
  SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT = 'SDL.renderer.HDR_headroom';
  SDL_PROP_RENDERER_D3D9_DEVICE_POINTER = 'SDL.renderer.d3d9.device';
  SDL_PROP_RENDERER_D3D11_DEVICE_POINTER = 'SDL.renderer.d3d11.device';
  SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER = 'SDL.renderer.d3d11.swap_chain';
  SDL_PROP_RENDERER_D3D12_DEVICE_POINTER = 'SDL.renderer.d3d12.device';
  SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER = 'SDL.renderer.d3d12.swap_chain';
  SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER = 'SDL.renderer.d3d12.command_queue';
  SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER = 'SDL.renderer.vulkan.instance';
  SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER = 'SDL.renderer.vulkan.surface';
  SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER = 'SDL.renderer.vulkan.physical_device';
  SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER = 'SDL.renderer.vulkan.device';
  SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = 'SDL.renderer.vulkan.graphics_queue_family_index';
  SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = 'SDL.renderer.vulkan.present_queue_family_index';
  SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER = 'SDL.renderer.vulkan.swapchain_image_count';
  SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER = 'SDL.texture.create.colorspace';
  SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER = 'SDL.texture.create.format';
  SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER = 'SDL.texture.create.access';
  SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER = 'SDL.texture.create.width';
  SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER = 'SDL.texture.create.height';
  SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT = 'SDL.texture.create.SDR_white_point';
  SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT = 'SDL.texture.create.HDR_headroom';
  SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER = 'SDL.texture.create.d3d11.texture';
  SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER = 'SDL.texture.create.d3d11.texture_u';
  SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER = 'SDL.texture.create.d3d11.texture_v';
  SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER = 'SDL.texture.create.d3d12.texture';
  SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER = 'SDL.texture.create.d3d12.texture_u';
  SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER = 'SDL.texture.create.d3d12.texture_v';
  SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER = 'SDL.texture.create.metal.pixelbuffer';
  SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER = 'SDL.texture.create.opengl.texture';
  SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER = 'SDL.texture.create.opengl.texture_uv';
  SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER = 'SDL.texture.create.opengl.texture_u';
  SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER = 'SDL.texture.create.opengl.texture_v';
  SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER = 'SDL.texture.create.opengles2.texture';
  SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER = 'SDL.texture.create.opengles2.texture_uv';
  SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER = 'SDL.texture.create.opengles2.texture_u';
  SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER = 'SDL.texture.create.opengles2.texture_v';
  SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER = 'SDL.texture.create.vulkan.texture';
  SDL_PROP_TEXTURE_COLORSPACE_NUMBER = 'SDL.texture.colorspace';
  SDL_PROP_TEXTURE_FORMAT_NUMBER = 'SDL.texture.format';
  SDL_PROP_TEXTURE_ACCESS_NUMBER = 'SDL.texture.access';
  SDL_PROP_TEXTURE_WIDTH_NUMBER = 'SDL.texture.width';
  SDL_PROP_TEXTURE_HEIGHT_NUMBER = 'SDL.texture.height';
  SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT = 'SDL.texture.SDR_white_point';
  SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT = 'SDL.texture.HDR_headroom';
  SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER = 'SDL.texture.d3d11.texture';
  SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER = 'SDL.texture.d3d11.texture_u';
  SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER = 'SDL.texture.d3d11.texture_v';
  SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER = 'SDL.texture.d3d12.texture';
  SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER = 'SDL.texture.d3d12.texture_u';
  SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER = 'SDL.texture.d3d12.texture_v';
  SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER = 'SDL.texture.opengl.texture';
  SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER = 'SDL.texture.opengl.texture_uv';
  SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER = 'SDL.texture.opengl.texture_u';
  SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER = 'SDL.texture.opengl.texture_v';
  SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER = 'SDL.texture.opengl.target';
  SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT = 'SDL.texture.opengl.tex_w';
  SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT = 'SDL.texture.opengl.tex_h';
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER = 'SDL.texture.opengles2.texture';
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER = 'SDL.texture.opengles2.texture_uv';
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER = 'SDL.texture.opengles2.texture_u';
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER = 'SDL.texture.opengles2.texture_v';
  SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER = 'SDL.texture.opengles2.target';
  SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER = 'SDL.texture.vulkan.texture';
  SDL_RENDERER_VSYNC_DISABLED = 0;
  SDL_RENDERER_VSYNC_ADAPTIVE = (-1);
  SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE = 8;
  SDL_MS_PER_SECOND = 1000;
  SDL_US_PER_SECOND = 1000000;
  SDL_NS_PER_SECOND = 1000000000;
  SDL_NS_PER_MS = 1000000;
  SDL_NS_PER_US = 1000;
  SDL_MAJOR_VERSION = 3;
  SDL_MINOR_VERSION = 1;
  SDL_MICRO_VERSION = 7;
  SDL_IMAGE_MAJOR_VERSION = 3;
  SDL_IMAGE_MINOR_VERSION = 1;
  SDL_IMAGE_MICRO_VERSION = 0;
  SDL_MIXER_MAJOR_VERSION = 3;
  SDL_MIXER_MINOR_VERSION = 0;
  SDL_MIXER_MICRO_VERSION = 0;
  MIX_INIT_FLAC = $00000001;
  MIX_INIT_MOD = $00000002;
  MIX_INIT_MP3 = $00000008;
  MIX_INIT_OGG = $00000010;
  MIX_INIT_MID = $00000020;
  MIX_INIT_OPUS = $00000040;
  MIX_INIT_WAVPACK = $00000080;
  MIX_CHANNELS = 8;
  MIX_DEFAULT_FREQUENCY = 44100;
  MIX_DEFAULT_CHANNELS = 2;
  MIX_MAX_VOLUME = 128;
  MIX_CHANNEL_POST = (-2);
  MIX_EFFECTSMAXSPEED = 'MIX_EFFECTSMAXSPEED';
  SDL_NET_MAJOR_VERSION = 3;
  SDL_NET_MINOR_VERSION = 0;
  SDL_NET_MICRO_VERSION = 0;
  SDL_TTF_MAJOR_VERSION = 3;
  SDL_TTF_MINOR_VERSION = 0;
  SDL_TTF_MICRO_VERSION = 0;
  TTF_PROP_FONT_CREATE_FILENAME_STRING = 'SDL_ttf.font.create.filename';
  TTF_PROP_FONT_CREATE_IOSTREAM_POINTER = 'SDL_ttf.font.create.iostream';
  TTF_PROP_FONT_CREATE_IOSTREAM_OFFSET_NUMBER = 'SDL_ttf.font.create.iostream.offset';
  TTF_PROP_FONT_CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN = 'SDL_ttf.font.create.iostream.autoclose';
  TTF_PROP_FONT_CREATE_SIZE_FLOAT = 'SDL_ttf.font.create.size';
  TTF_PROP_FONT_CREATE_FACE_NUMBER = 'SDL_ttf.font.create.face';
  TTF_PROP_FONT_CREATE_HORIZONTAL_DPI_NUMBER = 'SDL_ttf.font.create.hdpi';
  TTF_PROP_FONT_CREATE_VERTICAL_DPI_NUMBER = 'SDL_ttf.font.create.vdpi';
  TTF_PROP_FONT_OUTLINE_LINE_CAP_NUMBER = 'SDL_ttf.font.outline.line_cap';
  TTF_PROP_FONT_OUTLINE_LINE_JOIN_NUMBER = 'SDL_ttf.font.outline.line_join';
  TTF_PROP_FONT_OUTLINE_MITER_LIMIT_NUMBER = 'SDL_ttf.font.outline.miter_limit';
  TTF_STYLE_NORMAL = $00;
  TTF_STYLE_BOLD = $01;
  TTF_STYLE_ITALIC = $02;
  TTF_STYLE_UNDERLINE = $04;
  TTF_STYLE_STRIKETHROUGH = $08;
  TTF_HINTING_NORMAL = 0;
  TTF_HINTING_LIGHT = 1;
  TTF_HINTING_MONO = 2;
  TTF_HINTING_NONE = 3;
  TTF_HINTING_LIGHT_SUBPIXEL = 4;
  TTF_SUBSTRING_TEXT_START = $00000001;
  TTF_SUBSTRING_LINE_START = $00000002;
  TTF_SUBSTRING_LINE_END = $00000004;
  TTF_SUBSTRING_TEXT_END = $00000008;
  Z_ERRNO = -1;
  Z_OK = 0;
  Z_DEFLATED = 8;
  Z_DEFAULT_STRATEGY = 0;
  ZIP_OK = (0);
  ZIP_EOF = (0);
  ZIP_ERRNO = (Z_ERRNO);
  ZIP_PARAMERROR = (-102);
  ZIP_BADZIPFILE = (-103);
  ZIP_INTERNALERROR = (-104);
  UNZ_OK = (0);
  UNZ_END_OF_LIST_OF_FILE = (-100);
  UNZ_ERRNO = (Z_ERRNO);
  UNZ_EOF = (0);
  UNZ_PARAMERROR = (-102);
  UNZ_BADZIPFILE = (-103);
  UNZ_INTERNALERROR = (-104);
  UNZ_CRCERROR = (-105);
  APPEND_STATUS_CREATE = (0);
  APPEND_STATUS_CREATEAFTER = (1);
  APPEND_STATUS_ADDINZIP = (2);
  PLM_PACKET_INVALID_TS = -1;
  PLM_AUDIO_SAMPLES_PER_FRAME = 1152;
  PLM_BUFFER_DEFAULT_SIZE = (128*1024);
  SP_SEQUENCE_MODE_HOLD = 0;
  SP_SEQUENCE_MODE_ONCE = 1;
  SP_SEQUENCE_MODE_LOOP = 2;
  SP_SEQUENCE_MODE_PINGPONG = 3;
  SP_SEQUENCE_MODE_ONCEREVERSE = 4;
  SP_SEQUENCE_MODE_LOOPREVERSE = 5;
  SP_SEQUENCE_MODE_PINGPONGREVERSE = 6;
  SP_MAX_PROPERTY_IDS = 3;
  SKIN_ENTRIES_HASH_TABLE_SIZE = 100;

type
  SDL_DUMMY_ENUM = Integer;
  PSDL_DUMMY_ENUM = ^SDL_DUMMY_ENUM;

const
  DUMMY_ENUM_VALUE = 0;

type
  SDL_AssertState = Integer;
  PSDL_AssertState = ^SDL_AssertState;

const
  SDL_ASSERTION_RETRY = 0;
  SDL_ASSERTION_BREAK = 1;
  SDL_ASSERTION_ABORT = 2;
  SDL_ASSERTION_IGNORE = 3;
  SDL_ASSERTION_ALWAYS_IGNORE = 4;

type
  SDL_AsyncIOTaskType = Integer;
  PSDL_AsyncIOTaskType = ^SDL_AsyncIOTaskType;

const
  SDL_ASYNCIO_TASK_READ = 0;
  SDL_ASYNCIO_TASK_WRITE = 1;
  SDL_ASYNCIO_TASK_CLOSE = 2;

type
  SDL_AsyncIOResult = Integer;
  PSDL_AsyncIOResult = ^SDL_AsyncIOResult;

const
  SDL_ASYNCIO_COMPLETE = 0;
  SDL_ASYNCIO_FAILURE = 1;
  SDL_ASYNCIO_CANCELLED = 2;

type
  SDL_PropertyType = Integer;
  PSDL_PropertyType = ^SDL_PropertyType;

const
  SDL_PROPERTY_TYPE_INVALID = 0;
  SDL_PROPERTY_TYPE_POINTER = 1;
  SDL_PROPERTY_TYPE_STRING = 2;
  SDL_PROPERTY_TYPE_NUMBER = 3;
  SDL_PROPERTY_TYPE_FLOAT = 4;
  SDL_PROPERTY_TYPE_BOOLEAN = 5;

type
  SDL_ThreadPriority = Integer;
  PSDL_ThreadPriority = ^SDL_ThreadPriority;

const
  SDL_THREAD_PRIORITY_LOW = 0;
  SDL_THREAD_PRIORITY_NORMAL = 1;
  SDL_THREAD_PRIORITY_HIGH = 2;
  SDL_THREAD_PRIORITY_TIME_CRITICAL = 3;

type
  SDL_InitStatus = Integer;
  PSDL_InitStatus = ^SDL_InitStatus;

const
  SDL_INIT_STATUS_UNINITIALIZED = 0;
  SDL_INIT_STATUS_INITIALIZING = 1;
  SDL_INIT_STATUS_INITIALIZED = 2;
  SDL_INIT_STATUS_UNINITIALIZING = 3;

type
  SDL_IOStatus = Integer;
  PSDL_IOStatus = ^SDL_IOStatus;

const
  SDL_IO_STATUS_READY = 0;
  SDL_IO_STATUS_ERROR = 1;
  SDL_IO_STATUS_EOF = 2;
  SDL_IO_STATUS_NOT_READY = 3;
  SDL_IO_STATUS_READONLY = 4;
  SDL_IO_STATUS_WRITEONLY = 5;

type
  SDL_IOWhence = Integer;
  PSDL_IOWhence = ^SDL_IOWhence;

const
  SDL_IO_SEEK_SET = 0;
  SDL_IO_SEEK_CUR = 1;
  SDL_IO_SEEK_END = 2;

type
  SDL_AudioFormat = Integer;
  PSDL_AudioFormat = ^SDL_AudioFormat;

const
  SDL_AUDIO_UNKNOWN = 0;
  SDL_AUDIO_U8 = 8;
  SDL_AUDIO_S8 = 32776;
  SDL_AUDIO_S16LE = 32784;
  SDL_AUDIO_S16BE = 36880;
  SDL_AUDIO_S32LE = 32800;
  SDL_AUDIO_S32BE = 36896;
  SDL_AUDIO_F32LE = 33056;
  SDL_AUDIO_F32BE = 37152;
  SDL_AUDIO_S16 = 32784;
  MIX_DEFAULT_FORMAT = SDL_AUDIO_S16;
  SDL_AUDIO_S32 = 32800;
  SDL_AUDIO_F32 = 33056;

type
  SDL_BlendOperation = Integer;
  PSDL_BlendOperation = ^SDL_BlendOperation;

const
  SDL_BLENDOPERATION_ADD = 1;
  SDL_BLENDOPERATION_SUBTRACT = 2;
  SDL_BLENDOPERATION_REV_SUBTRACT = 3;
  SDL_BLENDOPERATION_MINIMUM = 4;
  SDL_BLENDOPERATION_MAXIMUM = 5;

type
  SDL_BlendFactor = Integer;
  PSDL_BlendFactor = ^SDL_BlendFactor;

const
  SDL_BLENDFACTOR_ZERO = 1;
  SDL_BLENDFACTOR_ONE = 2;
  SDL_BLENDFACTOR_SRC_COLOR = 3;
  SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4;
  SDL_BLENDFACTOR_SRC_ALPHA = 5;
  SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6;
  SDL_BLENDFACTOR_DST_COLOR = 7;
  SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8;
  SDL_BLENDFACTOR_DST_ALPHA = 9;
  SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10;

type
  SDL_PixelType = Integer;
  PSDL_PixelType = ^SDL_PixelType;

const
  SDL_PIXELTYPE_UNKNOWN = 0;
  SDL_PIXELTYPE_INDEX1 = 1;
  SDL_PIXELTYPE_INDEX4 = 2;
  SDL_PIXELTYPE_INDEX8 = 3;
  SDL_PIXELTYPE_PACKED8 = 4;
  SDL_PIXELTYPE_PACKED16 = 5;
  SDL_PIXELTYPE_PACKED32 = 6;
  SDL_PIXELTYPE_ARRAYU8 = 7;
  SDL_PIXELTYPE_ARRAYU16 = 8;
  SDL_PIXELTYPE_ARRAYU32 = 9;
  SDL_PIXELTYPE_ARRAYF16 = 10;
  SDL_PIXELTYPE_ARRAYF32 = 11;
  SDL_PIXELTYPE_INDEX2 = 12;

type
  SDL_BitmapOrder = Integer;
  PSDL_BitmapOrder = ^SDL_BitmapOrder;

const
  SDL_BITMAPORDER_NONE = 0;
  SDL_BITMAPORDER_4321 = 1;
  SDL_BITMAPORDER_1234 = 2;

type
  SDL_PackedOrder = Integer;
  PSDL_PackedOrder = ^SDL_PackedOrder;

const
  SDL_PACKEDORDER_NONE = 0;
  SDL_PACKEDORDER_XRGB = 1;
  SDL_PACKEDORDER_RGBX = 2;
  SDL_PACKEDORDER_ARGB = 3;
  SDL_PACKEDORDER_RGBA = 4;
  SDL_PACKEDORDER_XBGR = 5;
  SDL_PACKEDORDER_BGRX = 6;
  SDL_PACKEDORDER_ABGR = 7;
  SDL_PACKEDORDER_BGRA = 8;

type
  SDL_ArrayOrder = Integer;
  PSDL_ArrayOrder = ^SDL_ArrayOrder;

const
  SDL_ARRAYORDER_NONE = 0;
  SDL_ARRAYORDER_RGB = 1;
  SDL_ARRAYORDER_RGBA = 2;
  SDL_ARRAYORDER_ARGB = 3;
  SDL_ARRAYORDER_BGR = 4;
  SDL_ARRAYORDER_BGRA = 5;
  SDL_ARRAYORDER_ABGR = 6;

type
  SDL_PackedLayout = Integer;
  PSDL_PackedLayout = ^SDL_PackedLayout;

const
  SDL_PACKEDLAYOUT_NONE = 0;
  SDL_PACKEDLAYOUT_332 = 1;
  SDL_PACKEDLAYOUT_4444 = 2;
  SDL_PACKEDLAYOUT_1555 = 3;
  SDL_PACKEDLAYOUT_5551 = 4;
  SDL_PACKEDLAYOUT_565 = 5;
  SDL_PACKEDLAYOUT_8888 = 6;
  SDL_PACKEDLAYOUT_2101010 = 7;
  SDL_PACKEDLAYOUT_1010102 = 8;

type
  SDL_PixelFormat = Integer;
  PSDL_PixelFormat = ^SDL_PixelFormat;

const
  SDL_PIXELFORMAT_UNKNOWN = 0;
  SDL_PIXELFORMAT_INDEX1LSB = 286261504;
  SDL_PIXELFORMAT_INDEX1MSB = 287310080;
  SDL_PIXELFORMAT_INDEX2LSB = 470811136;
  SDL_PIXELFORMAT_INDEX2MSB = 471859712;
  SDL_PIXELFORMAT_INDEX4LSB = 303039488;
  SDL_PIXELFORMAT_INDEX4MSB = 304088064;
  SDL_PIXELFORMAT_INDEX8 = 318769153;
  SDL_PIXELFORMAT_RGB332 = 336660481;
  SDL_PIXELFORMAT_XRGB4444 = 353504258;
  SDL_PIXELFORMAT_XBGR4444 = 357698562;
  SDL_PIXELFORMAT_XRGB1555 = 353570562;
  SDL_PIXELFORMAT_XBGR1555 = 357764866;
  SDL_PIXELFORMAT_ARGB4444 = 355602434;
  SDL_PIXELFORMAT_RGBA4444 = 356651010;
  SDL_PIXELFORMAT_ABGR4444 = 359796738;
  SDL_PIXELFORMAT_BGRA4444 = 360845314;
  SDL_PIXELFORMAT_ARGB1555 = 355667970;
  SDL_PIXELFORMAT_RGBA5551 = 356782082;
  SDL_PIXELFORMAT_ABGR1555 = 359862274;
  SDL_PIXELFORMAT_BGRA5551 = 360976386;
  SDL_PIXELFORMAT_RGB565 = 353701890;
  SDL_PIXELFORMAT_BGR565 = 357896194;
  SDL_PIXELFORMAT_RGB24 = 386930691;
  SDL_PIXELFORMAT_BGR24 = 390076419;
  SDL_PIXELFORMAT_XRGB8888 = 370546692;
  SDL_PIXELFORMAT_RGBX8888 = 371595268;
  SDL_PIXELFORMAT_XBGR8888 = 374740996;
  SDL_PIXELFORMAT_BGRX8888 = 375789572;
  SDL_PIXELFORMAT_ARGB8888 = 372645892;
  SDL_PIXELFORMAT_RGBA8888 = 373694468;
  SDL_PIXELFORMAT_ABGR8888 = 376840196;
  SDL_PIXELFORMAT_BGRA8888 = 377888772;
  SDL_PIXELFORMAT_XRGB2101010 = 370614276;
  SDL_PIXELFORMAT_XBGR2101010 = 374808580;
  SDL_PIXELFORMAT_ARGB2101010 = 372711428;
  SDL_PIXELFORMAT_ABGR2101010 = 376905732;
  SDL_PIXELFORMAT_RGB48 = 403714054;
  SDL_PIXELFORMAT_BGR48 = 406859782;
  SDL_PIXELFORMAT_RGBA64 = 404766728;
  SDL_PIXELFORMAT_ARGB64 = 405815304;
  SDL_PIXELFORMAT_BGRA64 = 407912456;
  SDL_PIXELFORMAT_ABGR64 = 408961032;
  SDL_PIXELFORMAT_RGB48_FLOAT = 437268486;
  SDL_PIXELFORMAT_BGR48_FLOAT = 440414214;
  SDL_PIXELFORMAT_RGBA64_FLOAT = 438321160;
  SDL_PIXELFORMAT_ARGB64_FLOAT = 439369736;
  SDL_PIXELFORMAT_BGRA64_FLOAT = 441466888;
  SDL_PIXELFORMAT_ABGR64_FLOAT = 442515464;
  SDL_PIXELFORMAT_RGB96_FLOAT = 454057996;
  SDL_PIXELFORMAT_BGR96_FLOAT = 457203724;
  SDL_PIXELFORMAT_RGBA128_FLOAT = 455114768;
  SDL_PIXELFORMAT_ARGB128_FLOAT = 456163344;
  SDL_PIXELFORMAT_BGRA128_FLOAT = 458260496;
  SDL_PIXELFORMAT_ABGR128_FLOAT = 459309072;
  SDL_PIXELFORMAT_YV12 = 842094169;
  SDL_PIXELFORMAT_IYUV = 1448433993;
  SDL_PIXELFORMAT_YUY2 = 844715353;
  SDL_PIXELFORMAT_UYVY = 1498831189;
  SDL_PIXELFORMAT_YVYU = 1431918169;
  SDL_PIXELFORMAT_NV12 = 842094158;
  SDL_PIXELFORMAT_NV21 = 825382478;
  SDL_PIXELFORMAT_P010 = 808530000;
  SDL_PIXELFORMAT_EXTERNAL_OES = 542328143;
  SDL_PIXELFORMAT_RGBA32 = 376840196;
  SDL_PIXELFORMAT_ARGB32 = 377888772;
  SDL_PIXELFORMAT_BGRA32 = 372645892;
  SDL_PIXELFORMAT_ABGR32 = 373694468;
  SDL_PIXELFORMAT_RGBX32 = 374740996;
  SDL_PIXELFORMAT_XRGB32 = 375789572;
  SDL_PIXELFORMAT_BGRX32 = 370546692;
  SDL_PIXELFORMAT_XBGR32 = 371595268;

type
  SDL_ColorType = Integer;
  PSDL_ColorType = ^SDL_ColorType;

const
  SDL_COLOR_TYPE_UNKNOWN = 0;
  SDL_COLOR_TYPE_RGB = 1;
  SDL_COLOR_TYPE_YCBCR = 2;

type
  SDL_ColorRange = Integer;
  PSDL_ColorRange = ^SDL_ColorRange;

const
  SDL_COLOR_RANGE_UNKNOWN = 0;
  SDL_COLOR_RANGE_LIMITED = 1;
  SDL_COLOR_RANGE_FULL = 2;

type
  SDL_ColorPrimaries = Integer;
  PSDL_ColorPrimaries = ^SDL_ColorPrimaries;

const
  SDL_COLOR_PRIMARIES_UNKNOWN = 0;
  SDL_COLOR_PRIMARIES_BT709 = 1;
  SDL_COLOR_PRIMARIES_UNSPECIFIED = 2;
  SDL_COLOR_PRIMARIES_BT470M = 4;
  SDL_COLOR_PRIMARIES_BT470BG = 5;
  SDL_COLOR_PRIMARIES_BT601 = 6;
  SDL_COLOR_PRIMARIES_SMPTE240 = 7;
  SDL_COLOR_PRIMARIES_GENERIC_FILM = 8;
  SDL_COLOR_PRIMARIES_BT2020 = 9;
  SDL_COLOR_PRIMARIES_XYZ = 10;
  SDL_COLOR_PRIMARIES_SMPTE431 = 11;
  SDL_COLOR_PRIMARIES_SMPTE432 = 12;
  SDL_COLOR_PRIMARIES_EBU3213 = 22;
  SDL_COLOR_PRIMARIES_CUSTOM = 31;

type
  SDL_TransferCharacteristics = Integer;
  PSDL_TransferCharacteristics = ^SDL_TransferCharacteristics;

const
  SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0;
  SDL_TRANSFER_CHARACTERISTICS_BT709 = 1;
  SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2;
  SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4;
  SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5;
  SDL_TRANSFER_CHARACTERISTICS_BT601 = 6;
  SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7;
  SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8;
  SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9;
  SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10;
  SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11;
  SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12;
  SDL_TRANSFER_CHARACTERISTICS_SRGB = 13;
  SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14;
  SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15;
  SDL_TRANSFER_CHARACTERISTICS_PQ = 16;
  SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17;
  SDL_TRANSFER_CHARACTERISTICS_HLG = 18;
  SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31;

type
  SDL_MatrixCoefficients = Integer;
  PSDL_MatrixCoefficients = ^SDL_MatrixCoefficients;

const
  SDL_MATRIX_COEFFICIENTS_IDENTITY = 0;
  SDL_MATRIX_COEFFICIENTS_BT709 = 1;
  SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2;
  SDL_MATRIX_COEFFICIENTS_FCC = 4;
  SDL_MATRIX_COEFFICIENTS_BT470BG = 5;
  SDL_MATRIX_COEFFICIENTS_BT601 = 6;
  SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7;
  SDL_MATRIX_COEFFICIENTS_YCGCO = 8;
  SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9;
  SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10;
  SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11;
  SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12;
  SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13;
  SDL_MATRIX_COEFFICIENTS_ICTCP = 14;
  SDL_MATRIX_COEFFICIENTS_CUSTOM = 31;

type
  SDL_ChromaLocation = Integer;
  PSDL_ChromaLocation = ^SDL_ChromaLocation;

const
  SDL_CHROMA_LOCATION_NONE = 0;
  SDL_CHROMA_LOCATION_LEFT = 1;
  SDL_CHROMA_LOCATION_CENTER = 2;
  SDL_CHROMA_LOCATION_TOPLEFT = 3;

type
  SDL_Colorspace = Integer;
  PSDL_Colorspace = ^SDL_Colorspace;

const
  SDL_COLORSPACE_UNKNOWN = 0;
  SDL_COLORSPACE_SRGB = 301991328;
  SDL_COLORSPACE_SRGB_LINEAR = 301991168;
  SDL_COLORSPACE_HDR10 = 301999616;
  SDL_COLORSPACE_JPEG = 570426566;
  SDL_COLORSPACE_BT601_LIMITED = 554703046;
  SDL_COLORSPACE_BT601_FULL = 571480262;
  SDL_COLORSPACE_BT709_LIMITED = 554697761;
  SDL_COLORSPACE_BT709_FULL = 571474977;
  SDL_COLORSPACE_BT2020_LIMITED = 554706441;
  SDL_COLORSPACE_BT2020_FULL = 571483657;
  SDL_COLORSPACE_RGB_DEFAULT = 301991328;
  SDL_COLORSPACE_YUV_DEFAULT = 570426566;

type
  SDL_ScaleMode = Integer;
  PSDL_ScaleMode = ^SDL_ScaleMode;

const
  SDL_SCALEMODE_NEAREST = 0;
  SDL_SCALEMODE_LINEAR = 1;

type
  SDL_FlipMode = Integer;
  PSDL_FlipMode = ^SDL_FlipMode;

const
  SDL_FLIP_NONE = 0;
  SDL_FLIP_HORIZONTAL = 1;
  SDL_FLIP_VERTICAL = 2;

type
  SDL_CameraPosition = Integer;
  PSDL_CameraPosition = ^SDL_CameraPosition;

const
  SDL_CAMERA_POSITION_UNKNOWN = 0;
  SDL_CAMERA_POSITION_FRONT_FACING = 1;
  SDL_CAMERA_POSITION_BACK_FACING = 2;

type
  SDL_SystemTheme = Integer;
  PSDL_SystemTheme = ^SDL_SystemTheme;

const
  SDL_SYSTEM_THEME_UNKNOWN = 0;
  SDL_SYSTEM_THEME_LIGHT = 1;
  SDL_SYSTEM_THEME_DARK = 2;

type
  SDL_DisplayOrientation = Integer;
  PSDL_DisplayOrientation = ^SDL_DisplayOrientation;

const
  SDL_ORIENTATION_UNKNOWN = 0;
  SDL_ORIENTATION_LANDSCAPE = 1;
  SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2;
  SDL_ORIENTATION_PORTRAIT = 3;
  SDL_ORIENTATION_PORTRAIT_FLIPPED = 4;

type
  SDL_FlashOperation = Integer;
  PSDL_FlashOperation = ^SDL_FlashOperation;

const
  SDL_FLASH_CANCEL = 0;
  SDL_FLASH_BRIEFLY = 1;
  SDL_FLASH_UNTIL_FOCUSED = 2;

type
  SDL_GLAttr = Integer;
  PSDL_GLAttr = ^SDL_GLAttr;

const
  SDL_GL_RED_SIZE = 0;
  SDL_GL_GREEN_SIZE = 1;
  SDL_GL_BLUE_SIZE = 2;
  SDL_GL_ALPHA_SIZE = 3;
  SDL_GL_BUFFER_SIZE = 4;
  SDL_GL_DOUBLEBUFFER = 5;
  SDL_GL_DEPTH_SIZE = 6;
  SDL_GL_STENCIL_SIZE = 7;
  SDL_GL_ACCUM_RED_SIZE = 8;
  SDL_GL_ACCUM_GREEN_SIZE = 9;
  SDL_GL_ACCUM_BLUE_SIZE = 10;
  SDL_GL_ACCUM_ALPHA_SIZE = 11;
  SDL_GL_STEREO = 12;
  SDL_GL_MULTISAMPLEBUFFERS = 13;
  SDL_GL_MULTISAMPLESAMPLES = 14;
  SDL_GL_ACCELERATED_VISUAL = 15;
  SDL_GL_RETAINED_BACKING = 16;
  SDL_GL_CONTEXT_MAJOR_VERSION = 17;
  SDL_GL_CONTEXT_MINOR_VERSION = 18;
  SDL_GL_CONTEXT_FLAGS = 19;
  SDL_GL_CONTEXT_PROFILE_MASK = 20;
  SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 21;
  SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 22;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 23;
  SDL_GL_CONTEXT_RESET_NOTIFICATION = 24;
  SDL_GL_CONTEXT_NO_ERROR = 25;
  SDL_GL_FLOATBUFFERS = 26;
  SDL_GL_EGL_PLATFORM = 27;

type
  SDL_HitTestResult = Integer;
  PSDL_HitTestResult = ^SDL_HitTestResult;

const
  SDL_HITTEST_NORMAL = 0;
  SDL_HITTEST_DRAGGABLE = 1;
  SDL_HITTEST_RESIZE_TOPLEFT = 2;
  SDL_HITTEST_RESIZE_TOP = 3;
  SDL_HITTEST_RESIZE_TOPRIGHT = 4;
  SDL_HITTEST_RESIZE_RIGHT = 5;
  SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6;
  SDL_HITTEST_RESIZE_BOTTOM = 7;
  SDL_HITTEST_RESIZE_BOTTOMLEFT = 8;
  SDL_HITTEST_RESIZE_LEFT = 9;

type
  SDL_FileDialogType = Integer;
  PSDL_FileDialogType = ^SDL_FileDialogType;

const
  SDL_FILEDIALOG_OPENFILE = 0;
  SDL_FILEDIALOG_SAVEFILE = 1;
  SDL_FILEDIALOG_OPENFOLDER = 2;

type
  SDL_PowerState = Integer;
  PSDL_PowerState = ^SDL_PowerState;

const
  SDL_POWERSTATE_ERROR = -1;
  SDL_POWERSTATE_UNKNOWN = 0;
  SDL_POWERSTATE_ON_BATTERY = 1;
  SDL_POWERSTATE_NO_BATTERY = 2;
  SDL_POWERSTATE_CHARGING = 3;
  SDL_POWERSTATE_CHARGED = 4;

type
  SDL_SensorType = Integer;
  PSDL_SensorType = ^SDL_SensorType;

const
  SDL_SENSOR_INVALID = -1;
  SDL_SENSOR_UNKNOWN = 0;
  SDL_SENSOR_ACCEL = 1;
  SDL_SENSOR_GYRO = 2;
  SDL_SENSOR_ACCEL_L = 3;
  SDL_SENSOR_GYRO_L = 4;
  SDL_SENSOR_ACCEL_R = 5;
  SDL_SENSOR_GYRO_R = 6;

type
  SDL_JoystickType = Integer;
  PSDL_JoystickType = ^SDL_JoystickType;

const
  SDL_JOYSTICK_TYPE_UNKNOWN = 0;
  SDL_JOYSTICK_TYPE_GAMEPAD = 1;
  SDL_JOYSTICK_TYPE_WHEEL = 2;
  SDL_JOYSTICK_TYPE_ARCADE_STICK = 3;
  SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4;
  SDL_JOYSTICK_TYPE_DANCE_PAD = 5;
  SDL_JOYSTICK_TYPE_GUITAR = 6;
  SDL_JOYSTICK_TYPE_DRUM_KIT = 7;
  SDL_JOYSTICK_TYPE_ARCADE_PAD = 8;
  SDL_JOYSTICK_TYPE_THROTTLE = 9;
  SDL_JOYSTICK_TYPE_COUNT = 10;

type
  SDL_JoystickConnectionState = Integer;
  PSDL_JoystickConnectionState = ^SDL_JoystickConnectionState;

const
  SDL_JOYSTICK_CONNECTION_INVALID = -1;
  SDL_JOYSTICK_CONNECTION_UNKNOWN = 0;
  SDL_JOYSTICK_CONNECTION_WIRED = 1;
  SDL_JOYSTICK_CONNECTION_WIRELESS = 2;

type
  SDL_GamepadType = Integer;
  PSDL_GamepadType = ^SDL_GamepadType;

const
  SDL_GAMEPAD_TYPE_UNKNOWN = 0;
  SDL_GAMEPAD_TYPE_STANDARD = 1;
  SDL_GAMEPAD_TYPE_XBOX360 = 2;
  SDL_GAMEPAD_TYPE_XBOXONE = 3;
  SDL_GAMEPAD_TYPE_PS3 = 4;
  SDL_GAMEPAD_TYPE_PS4 = 5;
  SDL_GAMEPAD_TYPE_PS5 = 6;
  SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = 7;
  SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 8;
  SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 9;
  SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 10;
  SDL_GAMEPAD_TYPE_COUNT = 11;

type
  SDL_GamepadButton = Integer;
  PSDL_GamepadButton = ^SDL_GamepadButton;

const
  SDL_GAMEPAD_BUTTON_INVALID = -1;
  SDL_GAMEPAD_BUTTON_SOUTH = 0;
  SDL_GAMEPAD_BUTTON_EAST = 1;
  SDL_GAMEPAD_BUTTON_WEST = 2;
  SDL_GAMEPAD_BUTTON_NORTH = 3;
  SDL_GAMEPAD_BUTTON_BACK = 4;
  SDL_GAMEPAD_BUTTON_GUIDE = 5;
  SDL_GAMEPAD_BUTTON_START = 6;
  SDL_GAMEPAD_BUTTON_LEFT_STICK = 7;
  SDL_GAMEPAD_BUTTON_RIGHT_STICK = 8;
  SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = 9;
  SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = 10;
  SDL_GAMEPAD_BUTTON_DPAD_UP = 11;
  SDL_GAMEPAD_BUTTON_DPAD_DOWN = 12;
  SDL_GAMEPAD_BUTTON_DPAD_LEFT = 13;
  SDL_GAMEPAD_BUTTON_DPAD_RIGHT = 14;
  SDL_GAMEPAD_BUTTON_MISC1 = 15;
  SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = 16;
  SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = 17;
  SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = 18;
  SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = 19;
  SDL_GAMEPAD_BUTTON_TOUCHPAD = 20;
  SDL_GAMEPAD_BUTTON_MISC2 = 21;
  SDL_GAMEPAD_BUTTON_MISC3 = 22;
  SDL_GAMEPAD_BUTTON_MISC4 = 23;
  SDL_GAMEPAD_BUTTON_MISC5 = 24;
  SDL_GAMEPAD_BUTTON_MISC6 = 25;
  SDL_GAMEPAD_BUTTON_COUNT = 26;

type
  SDL_GamepadButtonLabel = Integer;
  PSDL_GamepadButtonLabel = ^SDL_GamepadButtonLabel;

const
  SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN = 0;
  SDL_GAMEPAD_BUTTON_LABEL_A = 1;
  SDL_GAMEPAD_BUTTON_LABEL_B = 2;
  SDL_GAMEPAD_BUTTON_LABEL_X = 3;
  SDL_GAMEPAD_BUTTON_LABEL_Y = 4;
  SDL_GAMEPAD_BUTTON_LABEL_CROSS = 5;
  SDL_GAMEPAD_BUTTON_LABEL_CIRCLE = 6;
  SDL_GAMEPAD_BUTTON_LABEL_SQUARE = 7;
  SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE = 8;

type
  SDL_GamepadAxis = Integer;
  PSDL_GamepadAxis = ^SDL_GamepadAxis;

const
  SDL_GAMEPAD_AXIS_INVALID = -1;
  SDL_GAMEPAD_AXIS_LEFTX = 0;
  SDL_GAMEPAD_AXIS_LEFTY = 1;
  SDL_GAMEPAD_AXIS_RIGHTX = 2;
  SDL_GAMEPAD_AXIS_RIGHTY = 3;
  SDL_GAMEPAD_AXIS_LEFT_TRIGGER = 4;
  SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = 5;
  SDL_GAMEPAD_AXIS_COUNT = 6;

type
  SDL_GamepadBindingType = Integer;
  PSDL_GamepadBindingType = ^SDL_GamepadBindingType;

const
  SDL_GAMEPAD_BINDTYPE_NONE = 0;
  SDL_GAMEPAD_BINDTYPE_BUTTON = 1;
  SDL_GAMEPAD_BINDTYPE_AXIS = 2;
  SDL_GAMEPAD_BINDTYPE_HAT = 3;

type
  SDL_Scancode = Integer;
  PSDL_Scancode = ^SDL_Scancode;

const
  SDL_SCANCODE_UNKNOWN = 0;
  SDL_SCANCODE_A = 4;
  SDL_SCANCODE_B = 5;
  SDL_SCANCODE_C = 6;
  SDL_SCANCODE_D = 7;
  SDL_SCANCODE_E = 8;
  SDL_SCANCODE_F = 9;
  SDL_SCANCODE_G = 10;
  SDL_SCANCODE_H = 11;
  SDL_SCANCODE_I = 12;
  SDL_SCANCODE_J = 13;
  SDL_SCANCODE_K = 14;
  SDL_SCANCODE_L = 15;
  SDL_SCANCODE_M = 16;
  SDL_SCANCODE_N = 17;
  SDL_SCANCODE_O = 18;
  SDL_SCANCODE_P = 19;
  SDL_SCANCODE_Q = 20;
  SDL_SCANCODE_R = 21;
  SDL_SCANCODE_S = 22;
  SDL_SCANCODE_T = 23;
  SDL_SCANCODE_U = 24;
  SDL_SCANCODE_V = 25;
  SDL_SCANCODE_W = 26;
  SDL_SCANCODE_X = 27;
  SDL_SCANCODE_Y = 28;
  SDL_SCANCODE_Z = 29;
  SDL_SCANCODE_1 = 30;
  SDL_SCANCODE_2 = 31;
  SDL_SCANCODE_3 = 32;
  SDL_SCANCODE_4 = 33;
  SDL_SCANCODE_5 = 34;
  SDL_SCANCODE_6 = 35;
  SDL_SCANCODE_7 = 36;
  SDL_SCANCODE_8 = 37;
  SDL_SCANCODE_9 = 38;
  SDL_SCANCODE_0 = 39;
  SDL_SCANCODE_RETURN = 40;
  SDL_SCANCODE_ESCAPE = 41;
  SDL_SCANCODE_BACKSPACE = 42;
  SDL_SCANCODE_TAB = 43;
  SDL_SCANCODE_SPACE = 44;
  SDL_SCANCODE_MINUS = 45;
  SDL_SCANCODE_EQUALS = 46;
  SDL_SCANCODE_LEFTBRACKET = 47;
  SDL_SCANCODE_RIGHTBRACKET = 48;
  SDL_SCANCODE_BACKSLASH = 49;
  SDL_SCANCODE_NONUSHASH = 50;
  SDL_SCANCODE_SEMICOLON = 51;
  SDL_SCANCODE_APOSTROPHE = 52;
  SDL_SCANCODE_GRAVE = 53;
  SDL_SCANCODE_COMMA = 54;
  SDL_SCANCODE_PERIOD = 55;
  SDL_SCANCODE_SLASH = 56;
  SDL_SCANCODE_CAPSLOCK = 57;
  SDL_SCANCODE_F1 = 58;
  SDL_SCANCODE_F2 = 59;
  SDL_SCANCODE_F3 = 60;
  SDL_SCANCODE_F4 = 61;
  SDL_SCANCODE_F5 = 62;
  SDL_SCANCODE_F6 = 63;
  SDL_SCANCODE_F7 = 64;
  SDL_SCANCODE_F8 = 65;
  SDL_SCANCODE_F9 = 66;
  SDL_SCANCODE_F10 = 67;
  SDL_SCANCODE_F11 = 68;
  SDL_SCANCODE_F12 = 69;
  SDL_SCANCODE_PRINTSCREEN = 70;
  SDL_SCANCODE_SCROLLLOCK = 71;
  SDL_SCANCODE_PAUSE = 72;
  SDL_SCANCODE_INSERT = 73;
  SDL_SCANCODE_HOME = 74;
  SDL_SCANCODE_PAGEUP = 75;
  SDL_SCANCODE_DELETE = 76;
  SDL_SCANCODE_END = 77;
  SDL_SCANCODE_PAGEDOWN = 78;
  SDL_SCANCODE_RIGHT = 79;
  SDL_SCANCODE_LEFT = 80;
  SDL_SCANCODE_DOWN = 81;
  SDL_SCANCODE_UP = 82;
  SDL_SCANCODE_NUMLOCKCLEAR = 83;
  SDL_SCANCODE_KP_DIVIDE = 84;
  SDL_SCANCODE_KP_MULTIPLY = 85;
  SDL_SCANCODE_KP_MINUS = 86;
  SDL_SCANCODE_KP_PLUS = 87;
  SDL_SCANCODE_KP_ENTER = 88;
  SDL_SCANCODE_KP_1 = 89;
  SDL_SCANCODE_KP_2 = 90;
  SDL_SCANCODE_KP_3 = 91;
  SDL_SCANCODE_KP_4 = 92;
  SDL_SCANCODE_KP_5 = 93;
  SDL_SCANCODE_KP_6 = 94;
  SDL_SCANCODE_KP_7 = 95;
  SDL_SCANCODE_KP_8 = 96;
  SDL_SCANCODE_KP_9 = 97;
  SDL_SCANCODE_KP_0 = 98;
  SDL_SCANCODE_KP_PERIOD = 99;
  SDL_SCANCODE_NONUSBACKSLASH = 100;
  SDL_SCANCODE_APPLICATION = 101;
  SDL_SCANCODE_POWER = 102;
  SDL_SCANCODE_KP_EQUALS = 103;
  SDL_SCANCODE_F13 = 104;
  SDL_SCANCODE_F14 = 105;
  SDL_SCANCODE_F15 = 106;
  SDL_SCANCODE_F16 = 107;
  SDL_SCANCODE_F17 = 108;
  SDL_SCANCODE_F18 = 109;
  SDL_SCANCODE_F19 = 110;
  SDL_SCANCODE_F20 = 111;
  SDL_SCANCODE_F21 = 112;
  SDL_SCANCODE_F22 = 113;
  SDL_SCANCODE_F23 = 114;
  SDL_SCANCODE_F24 = 115;
  SDL_SCANCODE_EXECUTE = 116;
  SDL_SCANCODE_HELP = 117;
  SDL_SCANCODE_MENU = 118;
  SDL_SCANCODE_SELECT = 119;
  SDL_SCANCODE_STOP = 120;
  SDL_SCANCODE_AGAIN = 121;
  SDL_SCANCODE_UNDO = 122;
  SDL_SCANCODE_CUT = 123;
  SDL_SCANCODE_COPY = 124;
  SDL_SCANCODE_PASTE = 125;
  SDL_SCANCODE_FIND = 126;
  SDL_SCANCODE_MUTE = 127;
  SDL_SCANCODE_VOLUMEUP = 128;
  SDL_SCANCODE_VOLUMEDOWN = 129;
  SDL_SCANCODE_KP_COMMA = 133;
  SDL_SCANCODE_KP_EQUALSAS400 = 134;
  SDL_SCANCODE_INTERNATIONAL1 = 135;
  SDL_SCANCODE_INTERNATIONAL2 = 136;
  SDL_SCANCODE_INTERNATIONAL3 = 137;
  SDL_SCANCODE_INTERNATIONAL4 = 138;
  SDL_SCANCODE_INTERNATIONAL5 = 139;
  SDL_SCANCODE_INTERNATIONAL6 = 140;
  SDL_SCANCODE_INTERNATIONAL7 = 141;
  SDL_SCANCODE_INTERNATIONAL8 = 142;
  SDL_SCANCODE_INTERNATIONAL9 = 143;
  SDL_SCANCODE_LANG1 = 144;
  SDL_SCANCODE_LANG2 = 145;
  SDL_SCANCODE_LANG3 = 146;
  SDL_SCANCODE_LANG4 = 147;
  SDL_SCANCODE_LANG5 = 148;
  SDL_SCANCODE_LANG6 = 149;
  SDL_SCANCODE_LANG7 = 150;
  SDL_SCANCODE_LANG8 = 151;
  SDL_SCANCODE_LANG9 = 152;
  SDL_SCANCODE_ALTERASE = 153;
  SDL_SCANCODE_SYSREQ = 154;
  SDL_SCANCODE_CANCEL = 155;
  SDL_SCANCODE_CLEAR = 156;
  SDL_SCANCODE_PRIOR = 157;
  SDL_SCANCODE_RETURN2 = 158;
  SDL_SCANCODE_SEPARATOR = 159;
  SDL_SCANCODE_OUT = 160;
  SDL_SCANCODE_OPER = 161;
  SDL_SCANCODE_CLEARAGAIN = 162;
  SDL_SCANCODE_CRSEL = 163;
  SDL_SCANCODE_EXSEL = 164;
  SDL_SCANCODE_KP_00 = 176;
  SDL_SCANCODE_KP_000 = 177;
  SDL_SCANCODE_THOUSANDSSEPARATOR = 178;
  SDL_SCANCODE_DECIMALSEPARATOR = 179;
  SDL_SCANCODE_CURRENCYUNIT = 180;
  SDL_SCANCODE_CURRENCYSUBUNIT = 181;
  SDL_SCANCODE_KP_LEFTPAREN = 182;
  SDL_SCANCODE_KP_RIGHTPAREN = 183;
  SDL_SCANCODE_KP_LEFTBRACE = 184;
  SDL_SCANCODE_KP_RIGHTBRACE = 185;
  SDL_SCANCODE_KP_TAB = 186;
  SDL_SCANCODE_KP_BACKSPACE = 187;
  SDL_SCANCODE_KP_A = 188;
  SDL_SCANCODE_KP_B = 189;
  SDL_SCANCODE_KP_C = 190;
  SDL_SCANCODE_KP_D = 191;
  SDL_SCANCODE_KP_E = 192;
  SDL_SCANCODE_KP_F = 193;
  SDL_SCANCODE_KP_XOR = 194;
  SDL_SCANCODE_KP_POWER = 195;
  SDL_SCANCODE_KP_PERCENT = 196;
  SDL_SCANCODE_KP_LESS = 197;
  SDL_SCANCODE_KP_GREATER = 198;
  SDL_SCANCODE_KP_AMPERSAND = 199;
  SDL_SCANCODE_KP_DBLAMPERSAND = 200;
  SDL_SCANCODE_KP_VERTICALBAR = 201;
  SDL_SCANCODE_KP_DBLVERTICALBAR = 202;
  SDL_SCANCODE_KP_COLON = 203;
  SDL_SCANCODE_KP_HASH = 204;
  SDL_SCANCODE_KP_SPACE = 205;
  SDL_SCANCODE_KP_AT = 206;
  SDL_SCANCODE_KP_EXCLAM = 207;
  SDL_SCANCODE_KP_MEMSTORE = 208;
  SDL_SCANCODE_KP_MEMRECALL = 209;
  SDL_SCANCODE_KP_MEMCLEAR = 210;
  SDL_SCANCODE_KP_MEMADD = 211;
  SDL_SCANCODE_KP_MEMSUBTRACT = 212;
  SDL_SCANCODE_KP_MEMMULTIPLY = 213;
  SDL_SCANCODE_KP_MEMDIVIDE = 214;
  SDL_SCANCODE_KP_PLUSMINUS = 215;
  SDL_SCANCODE_KP_CLEAR = 216;
  SDL_SCANCODE_KP_CLEARENTRY = 217;
  SDL_SCANCODE_KP_BINARY = 218;
  SDL_SCANCODE_KP_OCTAL = 219;
  SDL_SCANCODE_KP_DECIMAL = 220;
  SDL_SCANCODE_KP_HEXADECIMAL = 221;
  SDL_SCANCODE_LCTRL = 224;
  SDL_SCANCODE_LSHIFT = 225;
  SDL_SCANCODE_LALT = 226;
  SDL_SCANCODE_LGUI = 227;
  SDL_SCANCODE_RCTRL = 228;
  SDL_SCANCODE_RSHIFT = 229;
  SDL_SCANCODE_RALT = 230;
  SDL_SCANCODE_RGUI = 231;
  SDL_SCANCODE_MODE = 257;
  SDL_SCANCODE_SLEEP = 258;
  SDL_SCANCODE_WAKE = 259;
  SDL_SCANCODE_CHANNEL_INCREMENT = 260;
  SDL_SCANCODE_CHANNEL_DECREMENT = 261;
  SDL_SCANCODE_MEDIA_PLAY = 262;
  SDL_SCANCODE_MEDIA_PAUSE = 263;
  SDL_SCANCODE_MEDIA_RECORD = 264;
  SDL_SCANCODE_MEDIA_FAST_FORWARD = 265;
  SDL_SCANCODE_MEDIA_REWIND = 266;
  SDL_SCANCODE_MEDIA_NEXT_TRACK = 267;
  SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268;
  SDL_SCANCODE_MEDIA_STOP = 269;
  SDL_SCANCODE_MEDIA_EJECT = 270;
  SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271;
  SDL_SCANCODE_MEDIA_SELECT = 272;
  SDL_SCANCODE_AC_NEW = 273;
  SDL_SCANCODE_AC_OPEN = 274;
  SDL_SCANCODE_AC_CLOSE = 275;
  SDL_SCANCODE_AC_EXIT = 276;
  SDL_SCANCODE_AC_SAVE = 277;
  SDL_SCANCODE_AC_PRINT = 278;
  SDL_SCANCODE_AC_PROPERTIES = 279;
  SDL_SCANCODE_AC_SEARCH = 280;
  SDL_SCANCODE_AC_HOME = 281;
  SDL_SCANCODE_AC_BACK = 282;
  SDL_SCANCODE_AC_FORWARD = 283;
  SDL_SCANCODE_AC_STOP = 284;
  SDL_SCANCODE_AC_REFRESH = 285;
  SDL_SCANCODE_AC_BOOKMARKS = 286;
  SDL_SCANCODE_SOFTLEFT = 287;
  SDL_SCANCODE_SOFTRIGHT = 288;
  SDL_SCANCODE_CALL = 289;
  SDL_SCANCODE_ENDCALL = 290;
  SDL_SCANCODE_RESERVED = 400;
  SDL_SCANCODE_COUNT = 512;

type
  SDL_TextInputType = Integer;
  PSDL_TextInputType = ^SDL_TextInputType;

const
  SDL_TEXTINPUT_TYPE_TEXT = 0;
  SDL_TEXTINPUT_TYPE_TEXT_NAME = 1;
  SDL_TEXTINPUT_TYPE_TEXT_EMAIL = 2;
  SDL_TEXTINPUT_TYPE_TEXT_USERNAME = 3;
  SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN = 4;
  SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE = 5;
  SDL_TEXTINPUT_TYPE_NUMBER = 6;
  SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN = 7;
  SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE = 8;

type
  SDL_Capitalization = Integer;
  PSDL_Capitalization = ^SDL_Capitalization;

const
  SDL_CAPITALIZE_NONE = 0;
  SDL_CAPITALIZE_SENTENCES = 1;
  SDL_CAPITALIZE_WORDS = 2;
  SDL_CAPITALIZE_LETTERS = 3;

type
  SDL_SystemCursor = Integer;
  PSDL_SystemCursor = ^SDL_SystemCursor;

const
  SDL_SYSTEM_CURSOR_DEFAULT = 0;
  SDL_SYSTEM_CURSOR_TEXT = 1;
  SDL_SYSTEM_CURSOR_WAIT = 2;
  SDL_SYSTEM_CURSOR_CROSSHAIR = 3;
  SDL_SYSTEM_CURSOR_PROGRESS = 4;
  SDL_SYSTEM_CURSOR_NWSE_RESIZE = 5;
  SDL_SYSTEM_CURSOR_NESW_RESIZE = 6;
  SDL_SYSTEM_CURSOR_EW_RESIZE = 7;
  SDL_SYSTEM_CURSOR_NS_RESIZE = 8;
  SDL_SYSTEM_CURSOR_MOVE = 9;
  SDL_SYSTEM_CURSOR_NOT_ALLOWED = 10;
  SDL_SYSTEM_CURSOR_POINTER = 11;
  SDL_SYSTEM_CURSOR_NW_RESIZE = 12;
  SDL_SYSTEM_CURSOR_N_RESIZE = 13;
  SDL_SYSTEM_CURSOR_NE_RESIZE = 14;
  SDL_SYSTEM_CURSOR_E_RESIZE = 15;
  SDL_SYSTEM_CURSOR_SE_RESIZE = 16;
  SDL_SYSTEM_CURSOR_S_RESIZE = 17;
  SDL_SYSTEM_CURSOR_SW_RESIZE = 18;
  SDL_SYSTEM_CURSOR_W_RESIZE = 19;
  SDL_SYSTEM_CURSOR_COUNT = 20;

type
  SDL_MouseWheelDirection = Integer;
  PSDL_MouseWheelDirection = ^SDL_MouseWheelDirection;

const
  SDL_MOUSEWHEEL_NORMAL = 0;
  SDL_MOUSEWHEEL_FLIPPED = 1;

type
  SDL_PenAxis = Integer;
  PSDL_PenAxis = ^SDL_PenAxis;

const
  SDL_PEN_AXIS_PRESSURE = 0;
  SDL_PEN_AXIS_XTILT = 1;
  SDL_PEN_AXIS_YTILT = 2;
  SDL_PEN_AXIS_DISTANCE = 3;
  SDL_PEN_AXIS_ROTATION = 4;
  SDL_PEN_AXIS_SLIDER = 5;
  SDL_PEN_AXIS_TANGENTIAL_PRESSURE = 6;
  SDL_PEN_AXIS_COUNT = 7;

type
  SDL_TouchDeviceType = Integer;
  PSDL_TouchDeviceType = ^SDL_TouchDeviceType;

const
  SDL_TOUCH_DEVICE_INVALID = -1;
  SDL_TOUCH_DEVICE_DIRECT = 0;
  SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1;
  SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2;

type
  SDL_EventType = Integer;
  PSDL_EventType = ^SDL_EventType;

const
  SDL_EVENT_FIRST = 0;
  SDL_EVENT_QUIT = 256;
  SDL_EVENT_TERMINATING = 257;
  SDL_EVENT_LOW_MEMORY = 258;
  SDL_EVENT_WILL_ENTER_BACKGROUND = 259;
  SDL_EVENT_DID_ENTER_BACKGROUND = 260;
  SDL_EVENT_WILL_ENTER_FOREGROUND = 261;
  SDL_EVENT_DID_ENTER_FOREGROUND = 262;
  SDL_EVENT_LOCALE_CHANGED = 263;
  SDL_EVENT_SYSTEM_THEME_CHANGED = 264;
  SDL_EVENT_DISPLAY_ORIENTATION = 337;
  SDL_EVENT_DISPLAY_ADDED = 338;
  SDL_EVENT_DISPLAY_REMOVED = 339;
  SDL_EVENT_DISPLAY_MOVED = 340;
  SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED = 341;
  SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED = 342;
  SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = 343;
  SDL_EVENT_DISPLAY_FIRST = 337;
  SDL_EVENT_DISPLAY_LAST = 343;
  SDL_EVENT_WINDOW_SHOWN = 514;
  SDL_EVENT_WINDOW_HIDDEN = 515;
  SDL_EVENT_WINDOW_EXPOSED = 516;
  SDL_EVENT_WINDOW_MOVED = 517;
  SDL_EVENT_WINDOW_RESIZED = 518;
  SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = 519;
  SDL_EVENT_WINDOW_METAL_VIEW_RESIZED = 520;
  SDL_EVENT_WINDOW_MINIMIZED = 521;
  SDL_EVENT_WINDOW_MAXIMIZED = 522;
  SDL_EVENT_WINDOW_RESTORED = 523;
  SDL_EVENT_WINDOW_MOUSE_ENTER = 524;
  SDL_EVENT_WINDOW_MOUSE_LEAVE = 525;
  SDL_EVENT_WINDOW_FOCUS_GAINED = 526;
  SDL_EVENT_WINDOW_FOCUS_LOST = 527;
  SDL_EVENT_WINDOW_CLOSE_REQUESTED = 528;
  SDL_EVENT_WINDOW_HIT_TEST = 529;
  SDL_EVENT_WINDOW_ICCPROF_CHANGED = 530;
  SDL_EVENT_WINDOW_DISPLAY_CHANGED = 531;
  SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = 532;
  SDL_EVENT_WINDOW_SAFE_AREA_CHANGED = 533;
  SDL_EVENT_WINDOW_OCCLUDED = 534;
  SDL_EVENT_WINDOW_ENTER_FULLSCREEN = 535;
  SDL_EVENT_WINDOW_LEAVE_FULLSCREEN = 536;
  SDL_EVENT_WINDOW_DESTROYED = 537;
  SDL_EVENT_WINDOW_HDR_STATE_CHANGED = 538;
  SDL_EVENT_WINDOW_FIRST = 514;
  SDL_EVENT_WINDOW_LAST = 538;
  SDL_EVENT_KEY_DOWN = 768;
  SDL_EVENT_KEY_UP = 769;
  SDL_EVENT_TEXT_EDITING = 770;
  SDL_EVENT_TEXT_INPUT = 771;
  SDL_EVENT_KEYMAP_CHANGED = 772;
  SDL_EVENT_KEYBOARD_ADDED = 773;
  SDL_EVENT_KEYBOARD_REMOVED = 774;
  SDL_EVENT_TEXT_EDITING_CANDIDATES = 775;
  SDL_EVENT_MOUSE_MOTION = 1024;
  SDL_EVENT_MOUSE_BUTTON_DOWN = 1025;
  SDL_EVENT_MOUSE_BUTTON_UP = 1026;
  SDL_EVENT_MOUSE_WHEEL = 1027;
  SDL_EVENT_MOUSE_ADDED = 1028;
  SDL_EVENT_MOUSE_REMOVED = 1029;
  SDL_EVENT_JOYSTICK_AXIS_MOTION = 1536;
  SDL_EVENT_JOYSTICK_BALL_MOTION = 1537;
  SDL_EVENT_JOYSTICK_HAT_MOTION = 1538;
  SDL_EVENT_JOYSTICK_BUTTON_DOWN = 1539;
  SDL_EVENT_JOYSTICK_BUTTON_UP = 1540;
  SDL_EVENT_JOYSTICK_ADDED = 1541;
  SDL_EVENT_JOYSTICK_REMOVED = 1542;
  SDL_EVENT_JOYSTICK_BATTERY_UPDATED = 1543;
  SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = 1544;
  SDL_EVENT_GAMEPAD_AXIS_MOTION = 1616;
  SDL_EVENT_GAMEPAD_BUTTON_DOWN = 1617;
  SDL_EVENT_GAMEPAD_BUTTON_UP = 1618;
  SDL_EVENT_GAMEPAD_ADDED = 1619;
  SDL_EVENT_GAMEPAD_REMOVED = 1620;
  SDL_EVENT_GAMEPAD_REMAPPED = 1621;
  SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = 1622;
  SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = 1623;
  SDL_EVENT_GAMEPAD_TOUCHPAD_UP = 1624;
  SDL_EVENT_GAMEPAD_SENSOR_UPDATE = 1625;
  SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = 1626;
  SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED = 1627;
  SDL_EVENT_FINGER_DOWN = 1792;
  SDL_EVENT_FINGER_UP = 1793;
  SDL_EVENT_FINGER_MOTION = 1794;
  SDL_EVENT_CLIPBOARD_UPDATE = 2304;
  SDL_EVENT_DROP_FILE = 4096;
  SDL_EVENT_DROP_TEXT = 4097;
  SDL_EVENT_DROP_BEGIN = 4098;
  SDL_EVENT_DROP_COMPLETE = 4099;
  SDL_EVENT_DROP_POSITION = 4100;
  SDL_EVENT_AUDIO_DEVICE_ADDED = 4352;
  SDL_EVENT_AUDIO_DEVICE_REMOVED = 4353;
  SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED = 4354;
  SDL_EVENT_SENSOR_UPDATE = 4608;
  SDL_EVENT_PEN_PROXIMITY_IN = 4864;
  SDL_EVENT_PEN_PROXIMITY_OUT = 4865;
  SDL_EVENT_PEN_DOWN = 4866;
  SDL_EVENT_PEN_UP = 4867;
  SDL_EVENT_PEN_BUTTON_DOWN = 4868;
  SDL_EVENT_PEN_BUTTON_UP = 4869;
  SDL_EVENT_PEN_MOTION = 4870;
  SDL_EVENT_PEN_AXIS = 4871;
  SDL_EVENT_CAMERA_DEVICE_ADDED = 5120;
  SDL_EVENT_CAMERA_DEVICE_REMOVED = 5121;
  SDL_EVENT_CAMERA_DEVICE_APPROVED = 5122;
  SDL_EVENT_CAMERA_DEVICE_DENIED = 5123;
  SDL_EVENT_RENDER_TARGETS_RESET = 8192;
  SDL_EVENT_RENDER_DEVICE_RESET = 8193;
  SDL_EVENT_RENDER_DEVICE_LOST = 8194;
  SDL_EVENT_PRIVATE0 = 16384;
  SDL_EVENT_PRIVATE1 = 16385;
  SDL_EVENT_PRIVATE2 = 16386;
  SDL_EVENT_PRIVATE3 = 16387;
  SDL_EVENT_POLL_SENTINEL = 32512;
  SDL_EVENT_USER = 32768;
  SDL_EVENT_LAST = 65535;
  SDL_EVENT_ENUM_PADDING = 2147483647;

type
  SDL_EventAction = Integer;
  PSDL_EventAction = ^SDL_EventAction;

const
  SDL_ADDEVENT = 0;
  SDL_PEEKEVENT = 1;
  SDL_GETEVENT = 2;

type
  SDL_Folder = Integer;
  PSDL_Folder = ^SDL_Folder;

const
  SDL_FOLDER_HOME = 0;
  SDL_FOLDER_DESKTOP = 1;
  SDL_FOLDER_DOCUMENTS = 2;
  SDL_FOLDER_DOWNLOADS = 3;
  SDL_FOLDER_MUSIC = 4;
  SDL_FOLDER_PICTURES = 5;
  SDL_FOLDER_PUBLICSHARE = 6;
  SDL_FOLDER_SAVEDGAMES = 7;
  SDL_FOLDER_SCREENSHOTS = 8;
  SDL_FOLDER_TEMPLATES = 9;
  SDL_FOLDER_VIDEOS = 10;
  SDL_FOLDER_COUNT = 11;

type
  SDL_PathType = Integer;
  PSDL_PathType = ^SDL_PathType;

const
  SDL_PATHTYPE_NONE = 0;
  SDL_PATHTYPE_FILE = 1;
  SDL_PATHTYPE_DIRECTORY = 2;
  SDL_PATHTYPE_OTHER = 3;

type
  SDL_EnumerationResult = Integer;
  PSDL_EnumerationResult = ^SDL_EnumerationResult;

const
  SDL_ENUM_CONTINUE = 0;
  SDL_ENUM_SUCCESS = 1;
  SDL_ENUM_FAILURE = 2;

type
  SDL_GPUPrimitiveType = Integer;
  PSDL_GPUPrimitiveType = ^SDL_GPUPrimitiveType;

const
  SDL_GPU_PRIMITIVETYPE_TRIANGLELIST = 0;
  SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP = 1;
  SDL_GPU_PRIMITIVETYPE_LINELIST = 2;
  SDL_GPU_PRIMITIVETYPE_LINESTRIP = 3;
  SDL_GPU_PRIMITIVETYPE_POINTLIST = 4;

type
  SDL_GPULoadOp = Integer;
  PSDL_GPULoadOp = ^SDL_GPULoadOp;

const
  SDL_GPU_LOADOP_LOAD = 0;
  SDL_GPU_LOADOP_CLEAR = 1;
  SDL_GPU_LOADOP_DONT_CARE = 2;

type
  SDL_GPUStoreOp = Integer;
  PSDL_GPUStoreOp = ^SDL_GPUStoreOp;

const
  SDL_GPU_STOREOP_STORE = 0;
  SDL_GPU_STOREOP_DONT_CARE = 1;
  SDL_GPU_STOREOP_RESOLVE = 2;
  SDL_GPU_STOREOP_RESOLVE_AND_STORE = 3;

type
  SDL_GPUIndexElementSize = Integer;
  PSDL_GPUIndexElementSize = ^SDL_GPUIndexElementSize;

const
  SDL_GPU_INDEXELEMENTSIZE_16BIT = 0;
  SDL_GPU_INDEXELEMENTSIZE_32BIT = 1;

type
  SDL_GPUTextureFormat = Integer;
  PSDL_GPUTextureFormat = ^SDL_GPUTextureFormat;

const
  SDL_GPU_TEXTUREFORMAT_INVALID = 0;
  SDL_GPU_TEXTUREFORMAT_A8_UNORM = 1;
  SDL_GPU_TEXTUREFORMAT_R8_UNORM = 2;
  SDL_GPU_TEXTUREFORMAT_R8G8_UNORM = 3;
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = 4;
  SDL_GPU_TEXTUREFORMAT_R16_UNORM = 5;
  SDL_GPU_TEXTUREFORMAT_R16G16_UNORM = 6;
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = 7;
  SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = 8;
  SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM = 9;
  SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = 10;
  SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = 11;
  SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = 12;
  SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM = 13;
  SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM = 14;
  SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM = 15;
  SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM = 16;
  SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM = 17;
  SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM = 18;
  SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT = 19;
  SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT = 20;
  SDL_GPU_TEXTUREFORMAT_R8_SNORM = 21;
  SDL_GPU_TEXTUREFORMAT_R8G8_SNORM = 22;
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = 23;
  SDL_GPU_TEXTUREFORMAT_R16_SNORM = 24;
  SDL_GPU_TEXTUREFORMAT_R16G16_SNORM = 25;
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM = 26;
  SDL_GPU_TEXTUREFORMAT_R16_FLOAT = 27;
  SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT = 28;
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = 29;
  SDL_GPU_TEXTUREFORMAT_R32_FLOAT = 30;
  SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT = 31;
  SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = 32;
  SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT = 33;
  SDL_GPU_TEXTUREFORMAT_R8_UINT = 34;
  SDL_GPU_TEXTUREFORMAT_R8G8_UINT = 35;
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT = 36;
  SDL_GPU_TEXTUREFORMAT_R16_UINT = 37;
  SDL_GPU_TEXTUREFORMAT_R16G16_UINT = 38;
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT = 39;
  SDL_GPU_TEXTUREFORMAT_R32_UINT = 40;
  SDL_GPU_TEXTUREFORMAT_R32G32_UINT = 41;
  SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT = 42;
  SDL_GPU_TEXTUREFORMAT_R8_INT = 43;
  SDL_GPU_TEXTUREFORMAT_R8G8_INT = 44;
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT = 45;
  SDL_GPU_TEXTUREFORMAT_R16_INT = 46;
  SDL_GPU_TEXTUREFORMAT_R16G16_INT = 47;
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT = 48;
  SDL_GPU_TEXTUREFORMAT_R32_INT = 49;
  SDL_GPU_TEXTUREFORMAT_R32G32_INT = 50;
  SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT = 51;
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = 52;
  SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = 53;
  SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB = 54;
  SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB = 55;
  SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB = 56;
  SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB = 57;
  SDL_GPU_TEXTUREFORMAT_D16_UNORM = 58;
  SDL_GPU_TEXTUREFORMAT_D24_UNORM = 59;
  SDL_GPU_TEXTUREFORMAT_D32_FLOAT = 60;
  SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = 61;
  SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = 62;
  SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM = 63;
  SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM = 64;
  SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM = 65;
  SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM = 66;
  SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM = 67;
  SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM = 68;
  SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM = 69;
  SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM = 70;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM = 71;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM = 72;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM = 73;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM = 74;
  SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM = 75;
  SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM = 76;
  SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB = 77;
  SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB = 78;
  SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB = 79;
  SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB = 80;
  SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB = 81;
  SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB = 82;
  SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB = 83;
  SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB = 84;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB = 85;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB = 86;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB = 87;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB = 88;
  SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB = 89;
  SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB = 90;
  SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT = 91;
  SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT = 92;
  SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT = 93;
  SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT = 94;
  SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT = 95;
  SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT = 96;
  SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT = 97;
  SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT = 98;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT = 99;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT = 100;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT = 101;
  SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT = 102;
  SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT = 103;
  SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT = 104;

type
  SDL_GPUTextureType = Integer;
  PSDL_GPUTextureType = ^SDL_GPUTextureType;

const
  SDL_GPU_TEXTURETYPE_2D = 0;
  SDL_GPU_TEXTURETYPE_2D_ARRAY = 1;
  SDL_GPU_TEXTURETYPE_3D = 2;
  SDL_GPU_TEXTURETYPE_CUBE = 3;
  SDL_GPU_TEXTURETYPE_CUBE_ARRAY = 4;

type
  SDL_GPUSampleCount = Integer;
  PSDL_GPUSampleCount = ^SDL_GPUSampleCount;

const
  SDL_GPU_SAMPLECOUNT_1 = 0;
  SDL_GPU_SAMPLECOUNT_2 = 1;
  SDL_GPU_SAMPLECOUNT_4 = 2;
  SDL_GPU_SAMPLECOUNT_8 = 3;

type
  SDL_GPUCubeMapFace = Integer;
  PSDL_GPUCubeMapFace = ^SDL_GPUCubeMapFace;

const
  SDL_GPU_CUBEMAPFACE_POSITIVEX = 0;
  SDL_GPU_CUBEMAPFACE_NEGATIVEX = 1;
  SDL_GPU_CUBEMAPFACE_POSITIVEY = 2;
  SDL_GPU_CUBEMAPFACE_NEGATIVEY = 3;
  SDL_GPU_CUBEMAPFACE_POSITIVEZ = 4;
  SDL_GPU_CUBEMAPFACE_NEGATIVEZ = 5;

type
  SDL_GPUTransferBufferUsage = Integer;
  PSDL_GPUTransferBufferUsage = ^SDL_GPUTransferBufferUsage;

const
  SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD = 0;
  SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = 1;

type
  SDL_GPUShaderStage = Integer;
  PSDL_GPUShaderStage = ^SDL_GPUShaderStage;

const
  SDL_GPU_SHADERSTAGE_VERTEX = 0;
  SDL_GPU_SHADERSTAGE_FRAGMENT = 1;

type
  SDL_GPUVertexElementFormat = Integer;
  PSDL_GPUVertexElementFormat = ^SDL_GPUVertexElementFormat;

const
  SDL_GPU_VERTEXELEMENTFORMAT_INVALID = 0;
  SDL_GPU_VERTEXELEMENTFORMAT_INT = 1;
  SDL_GPU_VERTEXELEMENTFORMAT_INT2 = 2;
  SDL_GPU_VERTEXELEMENTFORMAT_INT3 = 3;
  SDL_GPU_VERTEXELEMENTFORMAT_INT4 = 4;
  SDL_GPU_VERTEXELEMENTFORMAT_UINT = 5;
  SDL_GPU_VERTEXELEMENTFORMAT_UINT2 = 6;
  SDL_GPU_VERTEXELEMENTFORMAT_UINT3 = 7;
  SDL_GPU_VERTEXELEMENTFORMAT_UINT4 = 8;
  SDL_GPU_VERTEXELEMENTFORMAT_FLOAT = 9;
  SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2 = 10;
  SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3 = 11;
  SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4 = 12;
  SDL_GPU_VERTEXELEMENTFORMAT_BYTE2 = 13;
  SDL_GPU_VERTEXELEMENTFORMAT_BYTE4 = 14;
  SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2 = 15;
  SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4 = 16;
  SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = 17;
  SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = 18;
  SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = 19;
  SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = 20;
  SDL_GPU_VERTEXELEMENTFORMAT_SHORT2 = 21;
  SDL_GPU_VERTEXELEMENTFORMAT_SHORT4 = 22;
  SDL_GPU_VERTEXELEMENTFORMAT_USHORT2 = 23;
  SDL_GPU_VERTEXELEMENTFORMAT_USHORT4 = 24;
  SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = 25;
  SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = 26;
  SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = 27;
  SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = 28;
  SDL_GPU_VERTEXELEMENTFORMAT_HALF2 = 29;
  SDL_GPU_VERTEXELEMENTFORMAT_HALF4 = 30;

type
  SDL_GPUVertexInputRate = Integer;
  PSDL_GPUVertexInputRate = ^SDL_GPUVertexInputRate;

const
  SDL_GPU_VERTEXINPUTRATE_VERTEX = 0;
  SDL_GPU_VERTEXINPUTRATE_INSTANCE = 1;

type
  SDL_GPUFillMode = Integer;
  PSDL_GPUFillMode = ^SDL_GPUFillMode;

const
  SDL_GPU_FILLMODE_FILL = 0;
  SDL_GPU_FILLMODE_LINE = 1;

type
  SDL_GPUCullMode = Integer;
  PSDL_GPUCullMode = ^SDL_GPUCullMode;

const
  SDL_GPU_CULLMODE_NONE = 0;
  SDL_GPU_CULLMODE_FRONT = 1;
  SDL_GPU_CULLMODE_BACK = 2;

type
  SDL_GPUFrontFace = Integer;
  PSDL_GPUFrontFace = ^SDL_GPUFrontFace;

const
  SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE = 0;
  SDL_GPU_FRONTFACE_CLOCKWISE = 1;

type
  SDL_GPUCompareOp = Integer;
  PSDL_GPUCompareOp = ^SDL_GPUCompareOp;

const
  SDL_GPU_COMPAREOP_INVALID = 0;
  SDL_GPU_COMPAREOP_NEVER = 1;
  SDL_GPU_COMPAREOP_LESS = 2;
  SDL_GPU_COMPAREOP_EQUAL = 3;
  SDL_GPU_COMPAREOP_LESS_OR_EQUAL = 4;
  SDL_GPU_COMPAREOP_GREATER = 5;
  SDL_GPU_COMPAREOP_NOT_EQUAL = 6;
  SDL_GPU_COMPAREOP_GREATER_OR_EQUAL = 7;
  SDL_GPU_COMPAREOP_ALWAYS = 8;

type
  SDL_GPUStencilOp = Integer;
  PSDL_GPUStencilOp = ^SDL_GPUStencilOp;

const
  SDL_GPU_STENCILOP_INVALID = 0;
  SDL_GPU_STENCILOP_KEEP = 1;
  SDL_GPU_STENCILOP_ZERO = 2;
  SDL_GPU_STENCILOP_REPLACE = 3;
  SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP = 4;
  SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP = 5;
  SDL_GPU_STENCILOP_INVERT = 6;
  SDL_GPU_STENCILOP_INCREMENT_AND_WRAP = 7;
  SDL_GPU_STENCILOP_DECREMENT_AND_WRAP = 8;

type
  SDL_GPUBlendOp = Integer;
  PSDL_GPUBlendOp = ^SDL_GPUBlendOp;

const
  SDL_GPU_BLENDOP_INVALID = 0;
  SDL_GPU_BLENDOP_ADD = 1;
  SDL_GPU_BLENDOP_SUBTRACT = 2;
  SDL_GPU_BLENDOP_REVERSE_SUBTRACT = 3;
  SDL_GPU_BLENDOP_MIN = 4;
  SDL_GPU_BLENDOP_MAX = 5;

type
  SDL_GPUBlendFactor = Integer;
  PSDL_GPUBlendFactor = ^SDL_GPUBlendFactor;

const
  SDL_GPU_BLENDFACTOR_INVALID = 0;
  SDL_GPU_BLENDFACTOR_ZERO = 1;
  SDL_GPU_BLENDFACTOR_ONE = 2;
  SDL_GPU_BLENDFACTOR_SRC_COLOR = 3;
  SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4;
  SDL_GPU_BLENDFACTOR_DST_COLOR = 5;
  SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = 6;
  SDL_GPU_BLENDFACTOR_SRC_ALPHA = 7;
  SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 8;
  SDL_GPU_BLENDFACTOR_DST_ALPHA = 9;
  SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10;
  SDL_GPU_BLENDFACTOR_CONSTANT_COLOR = 11;
  SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 12;
  SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = 13;

type
  SDL_GPUFilter = Integer;
  PSDL_GPUFilter = ^SDL_GPUFilter;

const
  SDL_GPU_FILTER_NEAREST = 0;
  SDL_GPU_FILTER_LINEAR = 1;

type
  SDL_GPUSamplerMipmapMode = Integer;
  PSDL_GPUSamplerMipmapMode = ^SDL_GPUSamplerMipmapMode;

const
  SDL_GPU_SAMPLERMIPMAPMODE_NEAREST = 0;
  SDL_GPU_SAMPLERMIPMAPMODE_LINEAR = 1;

type
  SDL_GPUSamplerAddressMode = Integer;
  PSDL_GPUSamplerAddressMode = ^SDL_GPUSamplerAddressMode;

const
  SDL_GPU_SAMPLERADDRESSMODE_REPEAT = 0;
  SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1;
  SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2;

type
  SDL_GPUPresentMode = Integer;
  PSDL_GPUPresentMode = ^SDL_GPUPresentMode;

const
  SDL_GPU_PRESENTMODE_VSYNC = 0;
  SDL_GPU_PRESENTMODE_IMMEDIATE = 1;
  SDL_GPU_PRESENTMODE_MAILBOX = 2;

type
  SDL_GPUSwapchainComposition = Integer;
  PSDL_GPUSwapchainComposition = ^SDL_GPUSwapchainComposition;

const
  SDL_GPU_SWAPCHAINCOMPOSITION_SDR = 0;
  SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = 1;
  SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = 2;
  SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048 = 3;

type
  SDL_hid_bus_type = Integer;
  PSDL_hid_bus_type = ^SDL_hid_bus_type;

const
  SDL_HID_API_BUS_UNKNOWN = 0;
  SDL_HID_API_BUS_USB = 1;
  SDL_HID_API_BUS_BLUETOOTH = 2;
  SDL_HID_API_BUS_I2C = 3;
  SDL_HID_API_BUS_SPI = 4;

type
  SDL_HintPriority = Integer;
  PSDL_HintPriority = ^SDL_HintPriority;

const
  SDL_HINT_DEFAULT = 0;
  SDL_HINT_NORMAL = 1;
  SDL_HINT_OVERRIDE = 2;

type
  SDL_AppResult = Integer;
  PSDL_AppResult = ^SDL_AppResult;

const
  SDL_APP_CONTINUE = 0;
  SDL_APP_SUCCESS = 1;
  SDL_APP_FAILURE = 2;

type
  SDL_LogCategory = Integer;
  PSDL_LogCategory = ^SDL_LogCategory;

const
  SDL_LOG_CATEGORY_APPLICATION = 0;
  SDL_LOG_CATEGORY_ERROR = 1;
  SDL_LOG_CATEGORY_ASSERT = 2;
  SDL_LOG_CATEGORY_SYSTEM = 3;
  SDL_LOG_CATEGORY_AUDIO = 4;
  SDL_LOG_CATEGORY_VIDEO = 5;
  SDL_LOG_CATEGORY_RENDER = 6;
  SDL_LOG_CATEGORY_INPUT = 7;
  SDL_LOG_CATEGORY_TEST = 8;
  SDL_LOG_CATEGORY_GPU = 9;
  SDL_LOG_CATEGORY_RESERVED2 = 10;
  SDL_LOG_CATEGORY_RESERVED3 = 11;
  SDL_LOG_CATEGORY_RESERVED4 = 12;
  SDL_LOG_CATEGORY_RESERVED5 = 13;
  SDL_LOG_CATEGORY_RESERVED6 = 14;
  SDL_LOG_CATEGORY_RESERVED7 = 15;
  SDL_LOG_CATEGORY_RESERVED8 = 16;
  SDL_LOG_CATEGORY_RESERVED9 = 17;
  SDL_LOG_CATEGORY_RESERVED10 = 18;
  SDL_LOG_CATEGORY_CUSTOM = 19;

type
  SDL_LogPriority = Integer;
  PSDL_LogPriority = ^SDL_LogPriority;

const
  SDL_LOG_PRIORITY_INVALID = 0;
  SDL_LOG_PRIORITY_TRACE = 1;
  SDL_LOG_PRIORITY_VERBOSE = 2;
  SDL_LOG_PRIORITY_DEBUG = 3;
  SDL_LOG_PRIORITY_INFO = 4;
  SDL_LOG_PRIORITY_WARN = 5;
  SDL_LOG_PRIORITY_ERROR = 6;
  SDL_LOG_PRIORITY_CRITICAL = 7;
  SDL_LOG_PRIORITY_COUNT = 8;

type
  SDL_MessageBoxColorType = Integer;
  PSDL_MessageBoxColorType = ^SDL_MessageBoxColorType;

const
  SDL_MESSAGEBOX_COLOR_BACKGROUND = 0;
  SDL_MESSAGEBOX_COLOR_TEXT = 1;
  SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2;
  SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3;
  SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4;
  SDL_MESSAGEBOX_COLOR_COUNT = 5;

type
  SDL_ProcessIO = Integer;
  PSDL_ProcessIO = ^SDL_ProcessIO;

const
  SDL_PROCESS_STDIO_INHERITED = 0;
  SDL_PROCESS_STDIO_NULL = 1;
  SDL_PROCESS_STDIO_APP = 2;
  SDL_PROCESS_STDIO_REDIRECT = 3;

type
  SDL_TextureAccess = Integer;
  PSDL_TextureAccess = ^SDL_TextureAccess;

const
  SDL_TEXTUREACCESS_STATIC = 0;
  SDL_TEXTUREACCESS_STREAMING = 1;
  SDL_TEXTUREACCESS_TARGET = 2;

type
  SDL_RendererLogicalPresentation = Integer;
  PSDL_RendererLogicalPresentation = ^SDL_RendererLogicalPresentation;

const
  SDL_LOGICAL_PRESENTATION_DISABLED = 0;
  SDL_LOGICAL_PRESENTATION_STRETCH = 1;
  SDL_LOGICAL_PRESENTATION_LETTERBOX = 2;
  SDL_LOGICAL_PRESENTATION_OVERSCAN = 3;
  SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = 4;

type
  SDL_Sandbox = Integer;
  PSDL_Sandbox = ^SDL_Sandbox;

const
  SDL_SANDBOX_NONE = 0;
  SDL_SANDBOX_UNKNOWN_CONTAINER = 1;
  SDL_SANDBOX_FLATPAK = 2;
  SDL_SANDBOX_SNAP = 3;
  SDL_SANDBOX_MACOS = 4;

type
  SDL_DateFormat = Integer;
  PSDL_DateFormat = ^SDL_DateFormat;

const
  SDL_DATE_FORMAT_YYYYMMDD = 0;
  SDL_DATE_FORMAT_DDMMYYYY = 1;
  SDL_DATE_FORMAT_MMDDYYYY = 2;

type
  SDL_TimeFormat = Integer;
  PSDL_TimeFormat = ^SDL_TimeFormat;

const
  SDL_TIME_FORMAT_24HR = 0;
  SDL_TIME_FORMAT_12HR = 1;

type
  Mix_Fading = Integer;
  PMix_Fading = ^Mix_Fading;

const
  MIX_NO_FADING = 0;
  MIX_FADING_OUT = 1;
  MIX_FADING_IN = 2;

type
  Mix_MusicType = Integer;
  PMix_MusicType = ^Mix_MusicType;

const
  MUS_NONE = 0;
  MUS_WAV = 1;
  MUS_MOD = 2;
  MUS_MID = 3;
  MUS_OGG = 4;
  MUS_MP3 = 5;
  MUS_MP3_MAD_UNUSED = 6;
  MUS_FLAC = 7;
  MUS_MODPLUG_UNUSED = 8;
  MUS_OPUS = 9;
  MUS_WAVPACK = 10;
  MUS_GME = 11;

type
  TTF_HorizontalAlignment = Integer;
  PTTF_HorizontalAlignment = ^TTF_HorizontalAlignment;

const
  TTF_HORIZONTAL_ALIGN_INVALID = -1;
  TTF_HORIZONTAL_ALIGN_LEFT = 0;
  TTF_HORIZONTAL_ALIGN_CENTER = 1;
  TTF_HORIZONTAL_ALIGN_RIGHT = 2;

type
  TTF_Direction = Integer;
  PTTF_Direction = ^TTF_Direction;

const
  TTF_DIRECTION_LTR = 0;
  TTF_DIRECTION_RTL = 1;
  TTF_DIRECTION_TTB = 2;
  TTF_DIRECTION_BTT = 3;

type
  spAttachmentType = Integer;
  PspAttachmentType = ^spAttachmentType;

const
  SP_ATTACHMENT_REGION = 0;
  SP_ATTACHMENT_BOUNDING_BOX = 1;
  SP_ATTACHMENT_MESH = 2;
  SP_ATTACHMENT_LINKED_MESH = 3;
  SP_ATTACHMENT_PATH = 4;
  SP_ATTACHMENT_POINT = 5;
  SP_ATTACHMENT_CLIPPING = 6;

type
  spInherit = Integer;
  PspInherit = ^spInherit;

const
  SP_INHERIT_NORMAL = 0;
  SP_INHERIT_ONLYTRANSLATION = 1;
  SP_INHERIT_NOROTATIONORREFLECTION = 2;
  SP_INHERIT_NOSCALE = 3;
  SP_INHERIT_NOSCALEORREFLECTION = 4;

type
  spPhysics = Integer;
  PspPhysics = ^spPhysics;

const
  SP_PHYSICS_NONE = 0;
  SP_PHYSICS_RESET = 1;
  SP_PHYSICS_UPDATE = 2;
  SP_PHYSICS_POSE = 3;

type
  spBlendMode = Integer;
  PspBlendMode = ^spBlendMode;

const
  SP_BLEND_MODE_NORMAL = 0;
  SP_BLEND_MODE_ADDITIVE = 1;
  SP_BLEND_MODE_MULTIPLY = 2;
  SP_BLEND_MODE_SCREEN = 3;

type
  spAtlasFormat = Integer;
  PspAtlasFormat = ^spAtlasFormat;

const
  SP_ATLAS_UNKNOWN_FORMAT = 0;
  SP_ATLAS_ALPHA = 1;
  SP_ATLAS_INTENSITY = 2;
  SP_ATLAS_LUMINANCE_ALPHA = 3;
  SP_ATLAS_RGB565 = 4;
  SP_ATLAS_RGBA4444 = 5;
  SP_ATLAS_RGB888 = 6;
  SP_ATLAS_RGBA8888 = 7;

type
  spAtlasFilter = Integer;
  PspAtlasFilter = ^spAtlasFilter;

const
  SP_ATLAS_UNKNOWN_FILTER = 0;
  SP_ATLAS_NEAREST = 1;
  SP_ATLAS_LINEAR = 2;
  SP_ATLAS_MIPMAP = 3;
  SP_ATLAS_MIPMAP_NEAREST_NEAREST = 4;
  SP_ATLAS_MIPMAP_LINEAR_NEAREST = 5;
  SP_ATLAS_MIPMAP_NEAREST_LINEAR = 6;
  SP_ATLAS_MIPMAP_LINEAR_LINEAR = 7;

type
  spAtlasWrap = Integer;
  PspAtlasWrap = ^spAtlasWrap;

const
  SP_ATLAS_MIRROREDREPEAT = 0;
  SP_ATLAS_CLAMPTOEDGE = 1;
  SP_ATLAS_REPEAT = 2;

type
  spMixBlend = Integer;
  PspMixBlend = ^spMixBlend;

const
  SP_MIX_BLEND_SETUP = 0;
  SP_MIX_BLEND_FIRST = 1;
  SP_MIX_BLEND_REPLACE = 2;
  SP_MIX_BLEND_ADD = 3;

type
  spMixDirection = Integer;
  PspMixDirection = ^spMixDirection;

const
  SP_MIX_DIRECTION_IN = 0;
  SP_MIX_DIRECTION_OUT = 1;

type
  spTimelineType = Integer;
  PspTimelineType = ^spTimelineType;

const
  SP_TIMELINE_ATTACHMENT = 0;
  SP_TIMELINE_ALPHA = 1;
  SP_TIMELINE_PATHCONSTRAINTPOSITION = 2;
  SP_TIMELINE_PATHCONSTRAINTSPACING = 3;
  SP_TIMELINE_ROTATE = 4;
  SP_TIMELINE_SCALEX = 5;
  SP_TIMELINE_SCALEY = 6;
  SP_TIMELINE_SHEARX = 7;
  SP_TIMELINE_SHEARY = 8;
  SP_TIMELINE_TRANSLATEX = 9;
  SP_TIMELINE_TRANSLATEY = 10;
  SP_TIMELINE_SCALE = 11;
  SP_TIMELINE_SHEAR = 12;
  SP_TIMELINE_TRANSLATE = 13;
  SP_TIMELINE_DEFORM = 14;
  SP_TIMELINE_SEQUENCE = 15;
  SP_TIMELINE_INHERIT = 16;
  SP_TIMELINE_IKCONSTRAINT = 17;
  SP_TIMELINE_PATHCONSTRAINTMIX = 18;
  SP_TIMELINE_PHYSICSCONSTRAINT_INERTIA = 19;
  SP_TIMELINE_PHYSICSCONSTRAINT_STRENGTH = 20;
  SP_TIMELINE_PHYSICSCONSTRAINT_DAMPING = 21;
  SP_TIMELINE_PHYSICSCONSTRAINT_MASS = 22;
  SP_TIMELINE_PHYSICSCONSTRAINT_WIND = 23;
  SP_TIMELINE_PHYSICSCONSTRAINT_GRAVITY = 24;
  SP_TIMELINE_PHYSICSCONSTRAINT_MIX = 25;
  SP_TIMELINE_PHYSICSCONSTRAINT_RESET = 26;
  SP_TIMELINE_RGB2 = 27;
  SP_TIMELINE_RGBA2 = 28;
  SP_TIMELINE_RGBA = 29;
  SP_TIMELINE_RGB = 30;
  SP_TIMELINE_TRANSFORMCONSTRAINT = 31;
  SP_TIMELINE_DRAWORDER = 32;
  SP_TIMELINE_EVENT = 33;

type
  spProperty = Integer;
  PspProperty = ^spProperty;

const
  SP_PROPERTY_ROTATE = 1;
  SP_PROPERTY_X = 2;
  SP_PROPERTY_Y = 4;
  SP_PROPERTY_SCALEX = 8;
  SP_PROPERTY_SCALEY = 16;
  SP_PROPERTY_SHEARX = 32;
  SP_PROPERTY_SHEARY = 64;
  SP_PROPERTY_INHERIT = 128;
  SP_PROPERTY_RGB = 256;
  SP_PROPERTY_ALPHA = 512;
  SP_PROPERTY_RGB2 = 1024;
  SP_PROPERTY_ATTACHMENT = 2048;
  SP_PROPERTY_DEFORM = 4096;
  SP_PROPERTY_EVENT = 8192;
  SP_PROPERTY_DRAWORDER = 16384;
  SP_PROPERTY_IKCONSTRAINT = 32768;
  SP_PROPERTY_TRANSFORMCONSTRAINT = 65536;
  SP_PROPERTY_PATHCONSTRAINT_POSITION = 131072;
  SP_PROPERTY_PATHCONSTRAINT_SPACING = 262144;
  SP_PROPERTY_PATHCONSTRAINT_MIX = 524288;
  SP_PROPERTY_PHYSICSCONSTRAINT_INERTIA = 1048576;
  SP_PROPERTY_PHYSICSCONSTRAINT_STRENGTH = 2097152;
  SP_PROPERTY_PHYSICSCONSTRAINT_DAMPING = 4194304;
  SP_PROPERTY_PHYSICSCONSTRAINT_MASS = 8388608;
  SP_PROPERTY_PHYSICSCONSTRAINT_WIND = 16777216;
  SP_PROPERTY_PHYSICSCONSTRAINT_GRAVITY = 33554432;
  SP_PROPERTY_PHYSICSCONSTRAINT_MIX = 67108864;
  SP_PROPERTY_PHYSICSCONSTRAINT_RESET = 134217728;
  SP_PROPERTY_SEQUENCE = 268435456;

type
  spPositionMode = Integer;
  PspPositionMode = ^spPositionMode;

const
  SP_POSITION_MODE_FIXED = 0;
  SP_POSITION_MODE_PERCENT = 1;

type
  spSpacingMode = Integer;
  PspSpacingMode = ^spSpacingMode;

const
  SP_SPACING_MODE_LENGTH = 0;
  SP_SPACING_MODE_FIXED = 1;
  SP_SPACING_MODE_PERCENT = 2;
  SP_SPACING_MODE_PROPORTIONAL = 3;

type
  spRotateMode = Integer;
  PspRotateMode = ^spRotateMode;

const
  SP_ROTATE_MODE_TANGENT = 0;
  SP_ROTATE_MODE_CHAIN = 1;
  SP_ROTATE_MODE_CHAIN_SCALE = 2;

type
  spEventType = Integer;
  PspEventType = ^spEventType;

const
  SP_ANIMATION_START = 0;
  SP_ANIMATION_INTERRUPT = 1;
  SP_ANIMATION_END = 2;
  SP_ANIMATION_COMPLETE = 3;
  SP_ANIMATION_DISPOSE = 4;
  SP_ANIMATION_EVENT = 5;

type
  // Forward declarations
  PUint16 = ^Uint16;
  PUint8 = ^Uint8;
  PPUint8 = ^PUint8;
  PPUTF8Char = ^PUTF8Char;
  PPInteger = ^PInteger;
  PPSingle = ^PSingle;
  PPointer = ^Pointer;
  PSDL_iconv_data_t = Pointer;
  PPSDL_iconv_data_t = ^PSDL_iconv_data_t;
  PSDL_GLContextState = Pointer;
  PPSDL_GLContextState = ^PSDL_GLContextState;
  PtagMSG = Pointer;
  PPtagMSG = ^PtagMSG;
  PSDL_alignment_test = ^SDL_alignment_test;
  PSDL_AssertData = ^SDL_AssertData;
  PSDL_AsyncIOOutcome = ^SDL_AsyncIOOutcome;
  PSDL_AtomicInt = ^SDL_AtomicInt;
  PSDL_AtomicU32 = ^SDL_AtomicU32;
  PSDL_InitState = ^SDL_InitState;
  PSDL_IOStreamInterface = ^SDL_IOStreamInterface;
  PSDL_AudioSpec = ^SDL_AudioSpec;
  PSDL_Color = ^SDL_Color;
  PSDL_FColor = ^SDL_FColor;
  PSDL_Palette = ^SDL_Palette;
  PSDL_PixelFormatDetails = ^SDL_PixelFormatDetails;
  PSDL_Point = ^SDL_Point;
  PSDL_FPoint = ^SDL_FPoint;
  PSDL_Rect = ^SDL_Rect;
  PSDL_FRect = ^SDL_FRect;
  PSDL_Surface = ^SDL_Surface;
  PPSDL_Surface = ^PSDL_Surface;
  PSDL_CameraSpec = ^SDL_CameraSpec;
  PPSDL_CameraSpec = ^PSDL_CameraSpec;
  PSDL_DisplayMode = ^SDL_DisplayMode;
  PPSDL_DisplayMode = ^PSDL_DisplayMode;
  PSDL_DialogFileFilter = ^SDL_DialogFileFilter;
  PSDL_GUID = ^SDL_GUID;
  PSDL_VirtualJoystickTouchpadDesc = ^SDL_VirtualJoystickTouchpadDesc;
  PSDL_VirtualJoystickSensorDesc = ^SDL_VirtualJoystickSensorDesc;
  PSDL_VirtualJoystickDesc = ^SDL_VirtualJoystickDesc;
  PSDL_GamepadBinding = ^SDL_GamepadBinding;
  PPSDL_GamepadBinding = ^PSDL_GamepadBinding;
  PSDL_Finger = ^SDL_Finger;
  PPSDL_Finger = ^PSDL_Finger;
  PSDL_CommonEvent = ^SDL_CommonEvent;
  PSDL_DisplayEvent = ^SDL_DisplayEvent;
  PSDL_WindowEvent = ^SDL_WindowEvent;
  PSDL_KeyboardDeviceEvent = ^SDL_KeyboardDeviceEvent;
  PSDL_KeyboardEvent = ^SDL_KeyboardEvent;
  PSDL_TextEditingEvent = ^SDL_TextEditingEvent;
  PSDL_TextEditingCandidatesEvent = ^SDL_TextEditingCandidatesEvent;
  PSDL_TextInputEvent = ^SDL_TextInputEvent;
  PSDL_MouseDeviceEvent = ^SDL_MouseDeviceEvent;
  PSDL_MouseMotionEvent = ^SDL_MouseMotionEvent;
  PSDL_MouseButtonEvent = ^SDL_MouseButtonEvent;
  PSDL_MouseWheelEvent = ^SDL_MouseWheelEvent;
  PSDL_JoyAxisEvent = ^SDL_JoyAxisEvent;
  PSDL_JoyBallEvent = ^SDL_JoyBallEvent;
  PSDL_JoyHatEvent = ^SDL_JoyHatEvent;
  PSDL_JoyButtonEvent = ^SDL_JoyButtonEvent;
  PSDL_JoyDeviceEvent = ^SDL_JoyDeviceEvent;
  PSDL_JoyBatteryEvent = ^SDL_JoyBatteryEvent;
  PSDL_GamepadAxisEvent = ^SDL_GamepadAxisEvent;
  PSDL_GamepadButtonEvent = ^SDL_GamepadButtonEvent;
  PSDL_GamepadDeviceEvent = ^SDL_GamepadDeviceEvent;
  PSDL_GamepadTouchpadEvent = ^SDL_GamepadTouchpadEvent;
  PSDL_GamepadSensorEvent = ^SDL_GamepadSensorEvent;
  PSDL_AudioDeviceEvent = ^SDL_AudioDeviceEvent;
  PSDL_CameraDeviceEvent = ^SDL_CameraDeviceEvent;
  PSDL_RenderEvent = ^SDL_RenderEvent;
  PSDL_TouchFingerEvent = ^SDL_TouchFingerEvent;
  PSDL_PenProximityEvent = ^SDL_PenProximityEvent;
  PSDL_PenMotionEvent = ^SDL_PenMotionEvent;
  PSDL_PenTouchEvent = ^SDL_PenTouchEvent;
  PSDL_PenButtonEvent = ^SDL_PenButtonEvent;
  PSDL_PenAxisEvent = ^SDL_PenAxisEvent;
  PSDL_DropEvent = ^SDL_DropEvent;
  PSDL_ClipboardEvent = ^SDL_ClipboardEvent;
  PSDL_SensorEvent = ^SDL_SensorEvent;
  PSDL_QuitEvent = ^SDL_QuitEvent;
  PSDL_UserEvent = ^SDL_UserEvent;
  PSDL_PathInfo = ^SDL_PathInfo;
  PSDL_GPUViewport = ^SDL_GPUViewport;
  PSDL_GPUTextureTransferInfo = ^SDL_GPUTextureTransferInfo;
  PSDL_GPUTransferBufferLocation = ^SDL_GPUTransferBufferLocation;
  PSDL_GPUTextureLocation = ^SDL_GPUTextureLocation;
  PSDL_GPUTextureRegion = ^SDL_GPUTextureRegion;
  PSDL_GPUBlitRegion = ^SDL_GPUBlitRegion;
  PSDL_GPUBufferLocation = ^SDL_GPUBufferLocation;
  PSDL_GPUBufferRegion = ^SDL_GPUBufferRegion;
  PSDL_GPUIndirectDrawCommand = ^SDL_GPUIndirectDrawCommand;
  PSDL_GPUIndexedIndirectDrawCommand = ^SDL_GPUIndexedIndirectDrawCommand;
  PSDL_GPUIndirectDispatchCommand = ^SDL_GPUIndirectDispatchCommand;
  PSDL_GPUSamplerCreateInfo = ^SDL_GPUSamplerCreateInfo;
  PSDL_GPUVertexBufferDescription = ^SDL_GPUVertexBufferDescription;
  PSDL_GPUVertexAttribute = ^SDL_GPUVertexAttribute;
  PSDL_GPUVertexInputState = ^SDL_GPUVertexInputState;
  PSDL_GPUStencilOpState = ^SDL_GPUStencilOpState;
  PSDL_GPUColorTargetBlendState = ^SDL_GPUColorTargetBlendState;
  PSDL_GPUShaderCreateInfo = ^SDL_GPUShaderCreateInfo;
  PSDL_GPUTextureCreateInfo = ^SDL_GPUTextureCreateInfo;
  PSDL_GPUBufferCreateInfo = ^SDL_GPUBufferCreateInfo;
  PSDL_GPUTransferBufferCreateInfo = ^SDL_GPUTransferBufferCreateInfo;
  PSDL_GPURasterizerState = ^SDL_GPURasterizerState;
  PSDL_GPUMultisampleState = ^SDL_GPUMultisampleState;
  PSDL_GPUDepthStencilState = ^SDL_GPUDepthStencilState;
  PSDL_GPUColorTargetDescription = ^SDL_GPUColorTargetDescription;
  PSDL_GPUGraphicsPipelineTargetInfo = ^SDL_GPUGraphicsPipelineTargetInfo;
  PSDL_GPUGraphicsPipelineCreateInfo = ^SDL_GPUGraphicsPipelineCreateInfo;
  PSDL_GPUComputePipelineCreateInfo = ^SDL_GPUComputePipelineCreateInfo;
  PSDL_GPUColorTargetInfo = ^SDL_GPUColorTargetInfo;
  PSDL_GPUDepthStencilTargetInfo = ^SDL_GPUDepthStencilTargetInfo;
  PSDL_GPUBlitInfo = ^SDL_GPUBlitInfo;
  PSDL_GPUBufferBinding = ^SDL_GPUBufferBinding;
  PSDL_GPUTextureSamplerBinding = ^SDL_GPUTextureSamplerBinding;
  PSDL_GPUStorageBufferReadWriteBinding = ^SDL_GPUStorageBufferReadWriteBinding;
  PSDL_GPUStorageTextureReadWriteBinding = ^SDL_GPUStorageTextureReadWriteBinding;
  PSDL_HapticDirection = ^SDL_HapticDirection;
  PSDL_HapticConstant = ^SDL_HapticConstant;
  PSDL_HapticPeriodic = ^SDL_HapticPeriodic;
  PSDL_HapticCondition = ^SDL_HapticCondition;
  PSDL_HapticRamp = ^SDL_HapticRamp;
  PSDL_HapticLeftRight = ^SDL_HapticLeftRight;
  PSDL_HapticCustom = ^SDL_HapticCustom;
  PSDL_hid_device_info = ^SDL_hid_device_info;
  PSDL_Locale = ^SDL_Locale;
  PPSDL_Locale = ^PSDL_Locale;
  PSDL_MessageBoxButtonData = ^SDL_MessageBoxButtonData;
  PSDL_MessageBoxColor = ^SDL_MessageBoxColor;
  PSDL_MessageBoxColorScheme = ^SDL_MessageBoxColorScheme;
  PSDL_MessageBoxData = ^SDL_MessageBoxData;
  PSDL_Vertex = ^SDL_Vertex;
  PSDL_Texture = ^SDL_Texture;
  PSDL_StorageInterface = ^SDL_StorageInterface;
  PSDL_DateTime = ^SDL_DateTime;
  PIMG_Animation = ^IMG_Animation;
  PMix_Chunk = ^Mix_Chunk;
  PSDLNet_Datagram = ^SDLNet_Datagram;
  PPSDLNet_Datagram = ^PSDLNet_Datagram;
  PTTF_Text = ^TTF_Text;
  PTTF_GPUAtlasDrawSequence = ^TTF_GPUAtlasDrawSequence;
  PTTF_SubString = ^TTF_SubString;
  PPTTF_SubString = ^PTTF_SubString;
  Ptm_zip_s = ^tm_zip_s;
  Pzip_fileinfo = ^zip_fileinfo;
  Ptm_unz_s = ^tm_unz_s;
  Punz_file_info64_s = ^unz_file_info64_s;
  Pplm_packet_t = ^plm_packet_t;
  Pplm_plane_t = ^plm_plane_t;
  Pplm_frame_t = ^plm_frame_t;
  Pplm_samples_t = ^plm_samples_t;
  PspFloatArray = ^spFloatArray;
  PPspFloatArray = ^PspFloatArray;
  PspIntArray = ^spIntArray;
  PspShortArray = ^spShortArray;
  PPspShortArray = ^PspShortArray;
  PspUnsignedShortArray = ^spUnsignedShortArray;
  PspArrayFloatArray = ^spArrayFloatArray;
  PspArrayShortArray = ^spArrayShortArray;
  PspEventData = ^spEventData;
  PPspEventData = ^PspEventData;
  PspEvent = ^spEvent;
  PPspEvent = ^PspEvent;
  PspAttachment = ^spAttachment;
  PspColor = ^spColor;
  PspBoneData = ^spBoneData;
  PPspBoneData = ^PspBoneData;
  PspBone = ^spBone;
  PPspBone = ^PspBone;
  PspSlotData = ^spSlotData;
  PPspSlotData = ^PspSlotData;
  PspSlot = ^spSlot;
  PPspSlot = ^PspSlot;
  PspVertexAttachment = ^spVertexAttachment;
  PspTextureRegion = ^spTextureRegion;
  PPspTextureRegion = ^PspTextureRegion;
  PspAtlasPage = ^spAtlasPage;
  PspKeyValue = ^spKeyValue;
  PspKeyValueArray = ^spKeyValueArray;
  PspAtlasRegion = ^spAtlasRegion;
  PspAtlas = ^spAtlas;
  PspTextureRegionArray = ^spTextureRegionArray;
  PspSequence = ^spSequence;
  PspPropertyIdArray = ^spPropertyIdArray;
  PspTimelineArray = ^spTimelineArray;
  PspAnimation = ^spAnimation;
  PPspAnimation = ^PspAnimation;
  P_spTimelineVtable = ^_spTimelineVtable;
  PspTimeline = ^spTimeline;
  PPspTimeline = ^PspTimeline;
  PspCurveTimeline = ^spCurveTimeline;
  PspRotateTimeline = ^spRotateTimeline;
  PspTranslateTimeline = ^spTranslateTimeline;
  PspTranslateXTimeline = ^spTranslateXTimeline;
  PspTranslateYTimeline = ^spTranslateYTimeline;
  PspScaleTimeline = ^spScaleTimeline;
  PspScaleXTimeline = ^spScaleXTimeline;
  PspScaleYTimeline = ^spScaleYTimeline;
  PspShearTimeline = ^spShearTimeline;
  PspShearXTimeline = ^spShearXTimeline;
  PspShearYTimeline = ^spShearYTimeline;
  PspRGBATimeline = ^spRGBATimeline;
  PspRGBTimeline = ^spRGBTimeline;
  PspAlphaTimeline = ^spAlphaTimeline;
  PspRGBA2Timeline = ^spRGBA2Timeline;
  PspRGB2Timeline = ^spRGB2Timeline;
  PspAttachmentTimeline = ^spAttachmentTimeline;
  PspDeformTimeline = ^spDeformTimeline;
  PspSequenceTimeline = ^spSequenceTimeline;
  PspEventTimeline = ^spEventTimeline;
  PspDrawOrderTimeline = ^spDrawOrderTimeline;
  PspInheritTimeline = ^spInheritTimeline;
  PspIkConstraintTimeline = ^spIkConstraintTimeline;
  PspTransformConstraintTimeline = ^spTransformConstraintTimeline;
  PspPathConstraintPositionTimeline = ^spPathConstraintPositionTimeline;
  PspPathConstraintSpacingTimeline = ^spPathConstraintSpacingTimeline;
  PspPathConstraintMixTimeline = ^spPathConstraintMixTimeline;
  PspPhysicsConstraintTimeline = ^spPhysicsConstraintTimeline;
  PspPhysicsConstraintResetTimeline = ^spPhysicsConstraintResetTimeline;
  PspIkConstraintData = ^spIkConstraintData;
  PPspIkConstraintData = ^PspIkConstraintData;
  PspTransformConstraintData = ^spTransformConstraintData;
  PPspTransformConstraintData = ^PspTransformConstraintData;
  PspPathConstraintData = ^spPathConstraintData;
  PPspPathConstraintData = ^PspPathConstraintData;
  PspPhysicsConstraintData = ^spPhysicsConstraintData;
  PPspPhysicsConstraintData = ^PspPhysicsConstraintData;
  PspBoneDataArray = ^spBoneDataArray;
  PspIkConstraintDataArray = ^spIkConstraintDataArray;
  PspTransformConstraintDataArray = ^spTransformConstraintDataArray;
  PspPathConstraintDataArray = ^spPathConstraintDataArray;
  PspPhysicsConstraintDataArray = ^spPhysicsConstraintDataArray;
  PspSkin = ^spSkin;
  PPspSkin = ^PspSkin;
  P_Entry = ^_Entry;
  P_SkinHashTableEntry = ^_SkinHashTableEntry;
  P_spSkin = ^_spSkin;
  PspSkeletonData = ^spSkeletonData;
  PspAnimationStateData = ^spAnimationStateData;
  PspTrackEntryArray = ^spTrackEntryArray;
  PspTrackEntry = ^spTrackEntry;
  PPspTrackEntry = ^PspTrackEntry;
  PspAnimationState = ^spAnimationState;
  PspAttachmentLoader = ^spAttachmentLoader;
  PspAtlasAttachmentLoader = ^spAtlasAttachmentLoader;
  PspRegionAttachment = ^spRegionAttachment;
  PspMeshAttachment = ^spMeshAttachment;
  PspBoundingBoxAttachment = ^spBoundingBoxAttachment;
  PPspBoundingBoxAttachment = ^PspBoundingBoxAttachment;
  PspClippingAttachment = ^spClippingAttachment;
  PspPointAttachment = ^spPointAttachment;
  PspIkConstraint = ^spIkConstraint;
  PPspIkConstraint = ^PspIkConstraint;
  PspTransformConstraint = ^spTransformConstraint;
  PPspTransformConstraint = ^PspTransformConstraint;
  PspPathAttachment = ^spPathAttachment;
  PspPathConstraint = ^spPathConstraint;
  PPspPathConstraint = ^PspPathConstraint;
  PspPhysicsConstraint = ^spPhysicsConstraint;
  PPspPhysicsConstraint = ^PspPhysicsConstraint;
  PspSkeleton = ^spSkeleton;
  PspPolygon = ^spPolygon;
  PPspPolygon = ^PspPolygon;
  PspSkeletonBounds = ^spSkeletonBounds;
  PspSkeletonBinary = ^spSkeletonBinary;
  PspSkeletonJson = ^spSkeletonJson;
  PspTriangulator = ^spTriangulator;
  PspSkeletonClipping = ^spSkeletonClipping;
  PspSdlVertexArray = ^spSdlVertexArray;
  PspSkeletonDrawable = ^spSkeletonDrawable;

  Sint8 = Int8;
  PSint8 = ^Sint8;
  Sint16 = Int16;
  PSint16 = ^Sint16;
  Sint32 = Int32;
  PSint32 = ^Sint32;
  Sint64 = Int64;
  PSint64 = ^Sint64;
  SDL_Time = Sint64;
  PSDL_Time = ^SDL_Time;

  SDL_alignment_test = record
    a: Uint8;
    b: Pointer;
  end;

  SDL_malloc_func = function(size: NativeUInt): Pointer; cdecl;
  PSDL_malloc_func = ^SDL_malloc_func;

  SDL_calloc_func = function(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl;
  PSDL_calloc_func = ^SDL_calloc_func;

  SDL_realloc_func = function(mem: Pointer; size: NativeUInt): Pointer; cdecl;
  PSDL_realloc_func = ^SDL_realloc_func;

  SDL_free_func = procedure(mem: Pointer); cdecl;
  PSDL_free_func = ^SDL_free_func;
  PSDL_Environment = Pointer;
  PPSDL_Environment = ^PSDL_Environment;

  SDL_CompareCallback = function(const a: Pointer; const b: Pointer): Integer; cdecl;

  SDL_CompareCallback_r = function(userdata: Pointer; const a: Pointer; const b: Pointer): Integer; cdecl;
  SDL_iconv_t = Pointer;
  PSDL_iconv_t = ^SDL_iconv_t;

  SDL_FunctionPointer = procedure(); cdecl;

  SDL_AssertData = record
    always_ignore: Boolean;
    trigger_count: Cardinal;
    condition: PUTF8Char;
    filename: PUTF8Char;
    linenum: Integer;
    &function: PUTF8Char;
    next: PSDL_AssertData;
  end;

  SDL_AssertionHandler = function(const data: PSDL_AssertData; userdata: Pointer): SDL_AssertState; cdecl;
  PSDL_AsyncIO = Pointer;
  PPSDL_AsyncIO = ^PSDL_AsyncIO;

  SDL_AsyncIOOutcome = record
    asyncio: PSDL_AsyncIO;
    &type: SDL_AsyncIOTaskType;
    result: SDL_AsyncIOResult;
    buffer: Pointer;
    offset: Uint64;
    bytes_requested: Uint64;
    bytes_transferred: Uint64;
    userdata: Pointer;
  end;

  PSDL_AsyncIOQueue = Pointer;
  PPSDL_AsyncIOQueue = ^PSDL_AsyncIOQueue;
  SDL_SpinLock = Integer;
  PSDL_SpinLock = ^SDL_SpinLock;

  SDL_AtomicInt = record
    value: Integer;
  end;

  SDL_AtomicU32 = record
    value: Uint32;
  end;

  SDL_PropertiesID = Uint32;

  SDL_CleanupPropertyCallback = procedure(userdata: Pointer; value: Pointer); cdecl;

  SDL_EnumeratePropertiesCallback = procedure(userdata: Pointer; props: SDL_PropertiesID; const name: PUTF8Char); cdecl;
  PSDL_Thread = Pointer;
  PPSDL_Thread = ^PSDL_Thread;
  SDL_ThreadID = Uint64;
  SDL_TLSID = SDL_AtomicInt;
  PSDL_TLSID = ^SDL_TLSID;

  SDL_ThreadFunction = function(data: Pointer): Integer; cdecl;

  SDL_TLSDestructorCallback = procedure(value: Pointer); cdecl;
  PSDL_Mutex = Pointer;
  PPSDL_Mutex = ^PSDL_Mutex;
  PSDL_RWLock = Pointer;
  PPSDL_RWLock = ^PSDL_RWLock;
  PSDL_Semaphore = Pointer;
  PPSDL_Semaphore = ^PSDL_Semaphore;
  PSDL_Condition = Pointer;
  PPSDL_Condition = ^PSDL_Condition;

  SDL_InitState = record
    status: SDL_AtomicInt;
    thread: SDL_ThreadID;
    reserved: Pointer;
  end;

  SDL_IOStreamInterface = record
    version: Uint32;
    size: function(userdata: Pointer): Sint64; cdecl;
    seek: function(userdata: Pointer; offset: Sint64; whence: SDL_IOWhence): Sint64; cdecl;
    read: function(userdata: Pointer; ptr: Pointer; size: NativeUInt; status: PSDL_IOStatus): NativeUInt; cdecl;
    write: function(userdata: Pointer; const ptr: Pointer; size: NativeUInt; status: PSDL_IOStatus): NativeUInt; cdecl;
    flush: function(userdata: Pointer; status: PSDL_IOStatus): Boolean; cdecl;
    close: function(userdata: Pointer): Boolean; cdecl;
  end;

  PSDL_IOStream = Pointer;
  PPSDL_IOStream = ^PSDL_IOStream;
  SDL_AudioDeviceID = Uint32;
  PSDL_AudioDeviceID = ^SDL_AudioDeviceID;

  SDL_AudioSpec = record
    format: SDL_AudioFormat;
    channels: Integer;
    freq: Integer;
  end;

  PSDL_AudioStream = Pointer;
  PPSDL_AudioStream = ^PSDL_AudioStream;

  SDL_AudioStreamCallback = procedure(userdata: Pointer; stream: PSDL_AudioStream; additional_amount: Integer; total_amount: Integer); cdecl;

  SDL_AudioPostmixCallback = procedure(userdata: Pointer; const spec: PSDL_AudioSpec; buffer: PSingle; buflen: Integer); cdecl;
  SDL_BlendMode = Uint32;
  PSDL_BlendMode = ^SDL_BlendMode;

  SDL_Color = record
    r: Uint8;
    g: Uint8;
    b: Uint8;
    a: Uint8;
  end;

  SDL_FColor = record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;

  SDL_Palette = record
    ncolors: Integer;
    colors: PSDL_Color;
    version: Uint32;
    refcount: Integer;
  end;

  SDL_PixelFormatDetails = record
    format: SDL_PixelFormat;
    bits_per_pixel: Uint8;
    bytes_per_pixel: Uint8;
    padding: array [0..1] of Uint8;
    Rmask: Uint32;
    Gmask: Uint32;
    Bmask: Uint32;
    Amask: Uint32;
    Rbits: Uint8;
    Gbits: Uint8;
    Bbits: Uint8;
    Abits: Uint8;
    Rshift: Uint8;
    Gshift: Uint8;
    Bshift: Uint8;
    Ashift: Uint8;
  end;

  SDL_Point = record
    x: Integer;
    y: Integer;
  end;

  SDL_FPoint = record
    x: Single;
    y: Single;
  end;

  SDL_Rect = record
    x: Integer;
    y: Integer;
    w: Integer;
    h: Integer;
  end;

  SDL_FRect = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
  end;

  SDL_SurfaceFlags = Uint32;

  SDL_Surface = record
    flags: SDL_SurfaceFlags;
    format: SDL_PixelFormat;
    w: Integer;
    h: Integer;
    pitch: Integer;
    pixels: Pointer;
    refcount: Integer;
    reserved: Pointer;
  end;

  SDL_CameraID = Uint32;
  PSDL_CameraID = ^SDL_CameraID;
  PSDL_Camera = Pointer;
  PPSDL_Camera = ^PSDL_Camera;

  SDL_CameraSpec = record
    format: SDL_PixelFormat;
    colorspace: SDL_Colorspace;
    width: Integer;
    height: Integer;
    framerate_numerator: Integer;
    framerate_denominator: Integer;
  end;

  SDL_ClipboardDataCallback = function(userdata: Pointer; const mime_type: PUTF8Char; size: PNativeUInt): Pointer; cdecl;

  SDL_ClipboardCleanupCallback = procedure(userdata: Pointer); cdecl;
  SDL_DisplayID = Uint32;
  PSDL_DisplayID = ^SDL_DisplayID;
  SDL_WindowID = Uint32;
  PSDL_DisplayModeData = Pointer;
  PPSDL_DisplayModeData = ^PSDL_DisplayModeData;

  SDL_DisplayMode = record
    displayID: SDL_DisplayID;
    format: SDL_PixelFormat;
    w: Integer;
    h: Integer;
    pixel_density: Single;
    refresh_rate: Single;
    refresh_rate_numerator: Integer;
    refresh_rate_denominator: Integer;
    internal: PSDL_DisplayModeData;
  end;

  PSDL_Window = Pointer;
  PPSDL_Window = ^PSDL_Window;
  SDL_WindowFlags = Uint64;
  SDL_GLContext = Pointer;
  PSDL_GLContext = ^SDL_GLContext;
  SDL_EGLDisplay = Pointer;
  SDL_EGLConfig = Pointer;
  SDL_EGLSurface = Pointer;
  SDL_EGLAttrib = IntPtr;
  PSDL_EGLAttrib = ^SDL_EGLAttrib;
  SDL_EGLint = Integer;
  PSDL_EGLint = ^SDL_EGLint;

  SDL_EGLAttribArrayCallback = function(userdata: Pointer): PSDL_EGLAttrib; cdecl;

  SDL_EGLIntArrayCallback = function(userdata: Pointer; display: SDL_EGLDisplay; config: SDL_EGLConfig): PSDL_EGLint; cdecl;
  SDL_GLProfile = Uint32;
  SDL_GLContextFlag = Uint32;
  SDL_GLContextReleaseFlag = Uint32;
  SDL_GLContextResetNotification = Uint32;

  SDL_HitTest = function(win: PSDL_Window; const area: PSDL_Point; data: Pointer): SDL_HitTestResult; cdecl;

  SDL_DialogFileFilter = record
    name: PUTF8Char;
    pattern: PUTF8Char;
  end;

  SDL_DialogFileCallback = procedure(userdata: Pointer; const filelist: PPUTF8Char; filter: Integer); cdecl;

  SDL_GUID = record
    data: array [0..15] of Uint8;
  end;

  PSDL_Sensor = Pointer;
  PPSDL_Sensor = ^PSDL_Sensor;
  SDL_SensorID = Uint32;
  PSDL_SensorID = ^SDL_SensorID;
  PSDL_Joystick = Pointer;
  PPSDL_Joystick = ^PSDL_Joystick;
  SDL_JoystickID = Uint32;
  PSDL_JoystickID = ^SDL_JoystickID;

  SDL_VirtualJoystickTouchpadDesc = record
    nfingers: Uint16;
    padding: array [0..2] of Uint16;
  end;

  SDL_VirtualJoystickSensorDesc = record
    &type: SDL_SensorType;
    rate: Single;
  end;

  SDL_VirtualJoystickDesc = record
    version: Uint32;
    &type: Uint16;
    padding: Uint16;
    vendor_id: Uint16;
    product_id: Uint16;
    naxes: Uint16;
    nbuttons: Uint16;
    nballs: Uint16;
    nhats: Uint16;
    ntouchpads: Uint16;
    nsensors: Uint16;
    padding2: array [0..1] of Uint16;
    button_mask: Uint32;
    axis_mask: Uint32;
    name: PUTF8Char;
    touchpads: PSDL_VirtualJoystickTouchpadDesc;
    sensors: PSDL_VirtualJoystickSensorDesc;
    userdata: Pointer;
    Update: procedure(userdata: Pointer); cdecl;
    SetPlayerIndex: procedure(userdata: Pointer; player_index: Integer); cdecl;
    Rumble: function(userdata: Pointer; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16): Boolean; cdecl;
    RumbleTriggers: function(userdata: Pointer; left_rumble: Uint16; right_rumble: Uint16): Boolean; cdecl;
    SetLED: function(userdata: Pointer; red: Uint8; green: Uint8; blue: Uint8): Boolean; cdecl;
    SendEffect: function(userdata: Pointer; const data: Pointer; size: Integer): Boolean; cdecl;
    SetSensorsEnabled: function(userdata: Pointer; enabled: Boolean): Boolean; cdecl;
    Cleanup: procedure(userdata: Pointer); cdecl;
  end;

  PSDL_Gamepad = Pointer;
  PPSDL_Gamepad = ^PSDL_Gamepad;

  P_anonymous_type_1 = ^_anonymous_type_1;
  _anonymous_type_1 = record
    axis: Integer;
    axis_min: Integer;
    axis_max: Integer;
  end;

  P_anonymous_type_2 = ^_anonymous_type_2;
  _anonymous_type_2 = record
    hat: Integer;
    hat_mask: Integer;
  end;

  P_anonymous_type_3 = ^_anonymous_type_3;
  _anonymous_type_3 = record
    case Integer of
      0: (button: Integer);
      1: (axis: _anonymous_type_1);
      2: (hat: _anonymous_type_2);
  end;

  P_anonymous_type_4 = ^_anonymous_type_4;
  _anonymous_type_4 = record
    axis: SDL_GamepadAxis;
    axis_min: Integer;
    axis_max: Integer;
  end;

  P_anonymous_type_5 = ^_anonymous_type_5;
  _anonymous_type_5 = record
    case Integer of
      0: (button: SDL_GamepadButton);
      1: (axis: _anonymous_type_4);
  end;

  SDL_GamepadBinding = record
    input_type: SDL_GamepadBindingType;
    input: _anonymous_type_3;
    output_type: SDL_GamepadBindingType;
    output: _anonymous_type_5;
  end;

  SDL_Keycode = Uint32;
  SDL_Keymod = Uint16;
  PSDL_Keymod = ^SDL_Keymod;
  SDL_KeyboardID = Uint32;
  PSDL_KeyboardID = ^SDL_KeyboardID;
  SDL_MouseID = Uint32;
  PSDL_MouseID = ^SDL_MouseID;
  PSDL_Cursor = Pointer;
  PPSDL_Cursor = ^PSDL_Cursor;
  SDL_MouseButtonFlags = Uint32;
  SDL_PenID = Uint32;
  SDL_PenInputFlags = Uint32;
  SDL_TouchID = Uint64;
  PSDL_TouchID = ^SDL_TouchID;
  SDL_FingerID = Uint64;

  SDL_Finger = record
    id: SDL_FingerID;
    x: Single;
    y: Single;
    pressure: Single;
  end;

  SDL_CommonEvent = record
    &type: Uint32;
    reserved: Uint32;
    timestamp: Uint64;
  end;

  SDL_DisplayEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    displayID: SDL_DisplayID;
    data1: Sint32;
    data2: Sint32;
  end;

  SDL_WindowEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    data1: Sint32;
    data2: Sint32;
  end;

  SDL_KeyboardDeviceEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_KeyboardID;
  end;

  SDL_KeyboardEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    which: SDL_KeyboardID;
    scancode: SDL_Scancode;
    key: SDL_Keycode;
    &mod: SDL_Keymod;
    raw: Uint16;
    down: Boolean;
    &repeat: Boolean;
  end;

  SDL_TextEditingEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    text: PUTF8Char;
    start: Sint32;
    length: Sint32;
  end;

  SDL_TextEditingCandidatesEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    candidates: PPUTF8Char;
    num_candidates: Sint32;
    selected_candidate: Sint32;
    horizontal: Boolean;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  SDL_TextInputEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    text: PUTF8Char;
  end;

  SDL_MouseDeviceEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_MouseID;
  end;

  SDL_MouseMotionEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    which: SDL_MouseID;
    state: SDL_MouseButtonFlags;
    x: Single;
    y: Single;
    xrel: Single;
    yrel: Single;
  end;

  SDL_MouseButtonEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    which: SDL_MouseID;
    button: Uint8;
    down: Boolean;
    clicks: Uint8;
    padding: Uint8;
    x: Single;
    y: Single;
  end;

  SDL_MouseWheelEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    which: SDL_MouseID;
    x: Single;
    y: Single;
    direction: SDL_MouseWheelDirection;
    mouse_x: Single;
    mouse_y: Single;
  end;

  SDL_JoyAxisEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
    axis: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    value: Sint16;
    padding4: Uint16;
  end;

  SDL_JoyBallEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
    ball: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    xrel: Sint16;
    yrel: Sint16;
  end;

  SDL_JoyHatEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
    hat: Uint8;
    value: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_JoyButtonEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
    button: Uint8;
    down: Boolean;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_JoyDeviceEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
  end;

  SDL_JoyBatteryEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
    state: SDL_PowerState;
    percent: Integer;
  end;

  SDL_GamepadAxisEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
    axis: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    value: Sint16;
    padding4: Uint16;
  end;

  SDL_GamepadButtonEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
    button: Uint8;
    down: Boolean;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_GamepadDeviceEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
  end;

  SDL_GamepadTouchpadEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
    touchpad: Sint32;
    finger: Sint32;
    x: Single;
    y: Single;
    pressure: Single;
  end;

  SDL_GamepadSensorEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_JoystickID;
    sensor: Sint32;
    data: array [0..2] of Single;
    sensor_timestamp: Uint64;
  end;

  SDL_AudioDeviceEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_AudioDeviceID;
    recording: Boolean;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  SDL_CameraDeviceEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_CameraID;
  end;

  SDL_RenderEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
  end;

  SDL_TouchFingerEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    touchID: SDL_TouchID;
    fingerID: SDL_FingerID;
    x: Single;
    y: Single;
    dx: Single;
    dy: Single;
    pressure: Single;
    windowID: SDL_WindowID;
  end;

  SDL_PenProximityEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    which: SDL_PenID;
  end;

  SDL_PenMotionEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    which: SDL_PenID;
    pen_state: SDL_PenInputFlags;
    x: Single;
    y: Single;
  end;

  SDL_PenTouchEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    which: SDL_PenID;
    pen_state: SDL_PenInputFlags;
    x: Single;
    y: Single;
    eraser: Boolean;
    down: Boolean;
  end;

  SDL_PenButtonEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    which: SDL_PenID;
    pen_state: SDL_PenInputFlags;
    x: Single;
    y: Single;
    button: Uint8;
    down: Boolean;
  end;

  SDL_PenAxisEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    which: SDL_PenID;
    pen_state: SDL_PenInputFlags;
    x: Single;
    y: Single;
    axis: SDL_PenAxis;
    value: Single;
  end;

  SDL_DropEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    x: Single;
    y: Single;
    source: PUTF8Char;
    data: PUTF8Char;
  end;

  SDL_ClipboardEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    owner: Boolean;
    n_mime_types: Sint32;
    mime_types: PPUTF8Char;
  end;

  SDL_SensorEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
    which: SDL_SensorID;
    data: array [0..5] of Single;
    sensor_timestamp: Uint64;
  end;

  SDL_QuitEvent = record
    &type: SDL_EventType;
    reserved: Uint32;
    timestamp: Uint64;
  end;

  SDL_UserEvent = record
    &type: Uint32;
    reserved: Uint32;
    timestamp: Uint64;
    windowID: SDL_WindowID;
    code: Sint32;
    data1: Pointer;
    data2: Pointer;
  end;

  PSDL_Event = ^SDL_Event;
  SDL_Event = record
    case Integer of
      0: (&type: Uint32);
      1: (common: SDL_CommonEvent);
      2: (display: SDL_DisplayEvent);
      3: (window: SDL_WindowEvent);
      4: (kdevice: SDL_KeyboardDeviceEvent);
      5: (key: SDL_KeyboardEvent);
      6: (edit: SDL_TextEditingEvent);
      7: (edit_candidates: SDL_TextEditingCandidatesEvent);
      8: (text: SDL_TextInputEvent);
      9: (mdevice: SDL_MouseDeviceEvent);
      10: (motion: SDL_MouseMotionEvent);
      11: (button: SDL_MouseButtonEvent);
      12: (wheel: SDL_MouseWheelEvent);
      13: (jdevice: SDL_JoyDeviceEvent);
      14: (jaxis: SDL_JoyAxisEvent);
      15: (jball: SDL_JoyBallEvent);
      16: (jhat: SDL_JoyHatEvent);
      17: (jbutton: SDL_JoyButtonEvent);
      18: (jbattery: SDL_JoyBatteryEvent);
      19: (gdevice: SDL_GamepadDeviceEvent);
      20: (gaxis: SDL_GamepadAxisEvent);
      21: (gbutton: SDL_GamepadButtonEvent);
      22: (gtouchpad: SDL_GamepadTouchpadEvent);
      23: (gsensor: SDL_GamepadSensorEvent);
      24: (adevice: SDL_AudioDeviceEvent);
      25: (cdevice: SDL_CameraDeviceEvent);
      26: (sensor: SDL_SensorEvent);
      27: (quit: SDL_QuitEvent);
      28: (user: SDL_UserEvent);
      29: (tfinger: SDL_TouchFingerEvent);
      30: (pproximity: SDL_PenProximityEvent);
      31: (ptouch: SDL_PenTouchEvent);
      32: (pmotion: SDL_PenMotionEvent);
      33: (pbutton: SDL_PenButtonEvent);
      34: (paxis: SDL_PenAxisEvent);
      35: (render: SDL_RenderEvent);
      36: (drop: SDL_DropEvent);
      37: (clipboard: SDL_ClipboardEvent);
      38: (padding: array [0..127] of Uint8);
  end;

  SDL_EventFilter = function(userdata: Pointer; event: PSDL_Event): Boolean; cdecl;
  PSDL_EventFilter = ^SDL_EventFilter;

  SDL_PathInfo = record
    &type: SDL_PathType;
    size: Uint64;
    create_time: SDL_Time;
    modify_time: SDL_Time;
    access_time: SDL_Time;
  end;

  SDL_GlobFlags = Uint32;

  SDL_EnumerateDirectoryCallback = function(userdata: Pointer; const dirname: PUTF8Char; const fname: PUTF8Char): SDL_EnumerationResult; cdecl;
  PSDL_GPUDevice = Pointer;
  PPSDL_GPUDevice = ^PSDL_GPUDevice;
  PSDL_GPUBuffer = Pointer;
  PPSDL_GPUBuffer = ^PSDL_GPUBuffer;
  PSDL_GPUTransferBuffer = Pointer;
  PPSDL_GPUTransferBuffer = ^PSDL_GPUTransferBuffer;
  PSDL_GPUTexture = Pointer;
  PPSDL_GPUTexture = ^PSDL_GPUTexture;
  PSDL_GPUSampler = Pointer;
  PPSDL_GPUSampler = ^PSDL_GPUSampler;
  PSDL_GPUShader = Pointer;
  PPSDL_GPUShader = ^PSDL_GPUShader;
  PSDL_GPUComputePipeline = Pointer;
  PPSDL_GPUComputePipeline = ^PSDL_GPUComputePipeline;
  PSDL_GPUGraphicsPipeline = Pointer;
  PPSDL_GPUGraphicsPipeline = ^PSDL_GPUGraphicsPipeline;
  PSDL_GPUCommandBuffer = Pointer;
  PPSDL_GPUCommandBuffer = ^PSDL_GPUCommandBuffer;
  PSDL_GPURenderPass = Pointer;
  PPSDL_GPURenderPass = ^PSDL_GPURenderPass;
  PSDL_GPUComputePass = Pointer;
  PPSDL_GPUComputePass = ^PSDL_GPUComputePass;
  PSDL_GPUCopyPass = Pointer;
  PPSDL_GPUCopyPass = ^PSDL_GPUCopyPass;
  PSDL_GPUFence = Pointer;
  PPSDL_GPUFence = ^PSDL_GPUFence;
  SDL_GPUTextureUsageFlags = Uint32;
  SDL_GPUBufferUsageFlags = Uint32;
  SDL_GPUShaderFormat = Uint32;
  SDL_GPUColorComponentFlags = Uint8;

  SDL_GPUViewport = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
    min_depth: Single;
    max_depth: Single;
  end;

  SDL_GPUTextureTransferInfo = record
    transfer_buffer: PSDL_GPUTransferBuffer;
    offset: Uint32;
    pixels_per_row: Uint32;
    rows_per_layer: Uint32;
  end;

  SDL_GPUTransferBufferLocation = record
    transfer_buffer: PSDL_GPUTransferBuffer;
    offset: Uint32;
  end;

  SDL_GPUTextureLocation = record
    texture: PSDL_GPUTexture;
    mip_level: Uint32;
    layer: Uint32;
    x: Uint32;
    y: Uint32;
    z: Uint32;
  end;

  SDL_GPUTextureRegion = record
    texture: PSDL_GPUTexture;
    mip_level: Uint32;
    layer: Uint32;
    x: Uint32;
    y: Uint32;
    z: Uint32;
    w: Uint32;
    h: Uint32;
    d: Uint32;
  end;

  SDL_GPUBlitRegion = record
    texture: PSDL_GPUTexture;
    mip_level: Uint32;
    layer_or_depth_plane: Uint32;
    x: Uint32;
    y: Uint32;
    w: Uint32;
    h: Uint32;
  end;

  SDL_GPUBufferLocation = record
    buffer: PSDL_GPUBuffer;
    offset: Uint32;
  end;

  SDL_GPUBufferRegion = record
    buffer: PSDL_GPUBuffer;
    offset: Uint32;
    size: Uint32;
  end;

  SDL_GPUIndirectDrawCommand = record
    num_vertices: Uint32;
    num_instances: Uint32;
    first_vertex: Uint32;
    first_instance: Uint32;
  end;

  SDL_GPUIndexedIndirectDrawCommand = record
    num_indices: Uint32;
    num_instances: Uint32;
    first_index: Uint32;
    vertex_offset: Sint32;
    first_instance: Uint32;
  end;

  SDL_GPUIndirectDispatchCommand = record
    groupcount_x: Uint32;
    groupcount_y: Uint32;
    groupcount_z: Uint32;
  end;

  SDL_GPUSamplerCreateInfo = record
    min_filter: SDL_GPUFilter;
    mag_filter: SDL_GPUFilter;
    mipmap_mode: SDL_GPUSamplerMipmapMode;
    address_mode_u: SDL_GPUSamplerAddressMode;
    address_mode_v: SDL_GPUSamplerAddressMode;
    address_mode_w: SDL_GPUSamplerAddressMode;
    mip_lod_bias: Single;
    max_anisotropy: Single;
    compare_op: SDL_GPUCompareOp;
    min_lod: Single;
    max_lod: Single;
    enable_anisotropy: Boolean;
    enable_compare: Boolean;
    padding1: Uint8;
    padding2: Uint8;
    props: SDL_PropertiesID;
  end;

  SDL_GPUVertexBufferDescription = record
    slot: Uint32;
    pitch: Uint32;
    input_rate: SDL_GPUVertexInputRate;
    instance_step_rate: Uint32;
  end;

  SDL_GPUVertexAttribute = record
    location: Uint32;
    buffer_slot: Uint32;
    format: SDL_GPUVertexElementFormat;
    offset: Uint32;
  end;

  SDL_GPUVertexInputState = record
    vertex_buffer_descriptions: PSDL_GPUVertexBufferDescription;
    num_vertex_buffers: Uint32;
    vertex_attributes: PSDL_GPUVertexAttribute;
    num_vertex_attributes: Uint32;
  end;

  SDL_GPUStencilOpState = record
    fail_op: SDL_GPUStencilOp;
    pass_op: SDL_GPUStencilOp;
    depth_fail_op: SDL_GPUStencilOp;
    compare_op: SDL_GPUCompareOp;
  end;

  SDL_GPUColorTargetBlendState = record
    src_color_blendfactor: SDL_GPUBlendFactor;
    dst_color_blendfactor: SDL_GPUBlendFactor;
    color_blend_op: SDL_GPUBlendOp;
    src_alpha_blendfactor: SDL_GPUBlendFactor;
    dst_alpha_blendfactor: SDL_GPUBlendFactor;
    alpha_blend_op: SDL_GPUBlendOp;
    color_write_mask: SDL_GPUColorComponentFlags;
    enable_blend: Boolean;
    enable_color_write_mask: Boolean;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_GPUShaderCreateInfo = record
    code_size: NativeUInt;
    code: PUint8;
    entrypoint: PUTF8Char;
    format: SDL_GPUShaderFormat;
    stage: SDL_GPUShaderStage;
    num_samplers: Uint32;
    num_storage_textures: Uint32;
    num_storage_buffers: Uint32;
    num_uniform_buffers: Uint32;
    props: SDL_PropertiesID;
  end;

  SDL_GPUTextureCreateInfo = record
    &type: SDL_GPUTextureType;
    format: SDL_GPUTextureFormat;
    usage: SDL_GPUTextureUsageFlags;
    width: Uint32;
    height: Uint32;
    layer_count_or_depth: Uint32;
    num_levels: Uint32;
    sample_count: SDL_GPUSampleCount;
    props: SDL_PropertiesID;
  end;

  SDL_GPUBufferCreateInfo = record
    usage: SDL_GPUBufferUsageFlags;
    size: Uint32;
    props: SDL_PropertiesID;
  end;

  SDL_GPUTransferBufferCreateInfo = record
    usage: SDL_GPUTransferBufferUsage;
    size: Uint32;
    props: SDL_PropertiesID;
  end;

  SDL_GPURasterizerState = record
    fill_mode: SDL_GPUFillMode;
    cull_mode: SDL_GPUCullMode;
    front_face: SDL_GPUFrontFace;
    depth_bias_constant_factor: Single;
    depth_bias_clamp: Single;
    depth_bias_slope_factor: Single;
    enable_depth_bias: Boolean;
    enable_depth_clip: Boolean;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_GPUMultisampleState = record
    sample_count: SDL_GPUSampleCount;
    sample_mask: Uint32;
    enable_mask: Boolean;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  SDL_GPUDepthStencilState = record
    compare_op: SDL_GPUCompareOp;
    back_stencil_state: SDL_GPUStencilOpState;
    front_stencil_state: SDL_GPUStencilOpState;
    compare_mask: Uint8;
    write_mask: Uint8;
    enable_depth_test: Boolean;
    enable_depth_write: Boolean;
    enable_stencil_test: Boolean;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  SDL_GPUColorTargetDescription = record
    format: SDL_GPUTextureFormat;
    blend_state: SDL_GPUColorTargetBlendState;
  end;

  SDL_GPUGraphicsPipelineTargetInfo = record
    color_target_descriptions: PSDL_GPUColorTargetDescription;
    num_color_targets: Uint32;
    depth_stencil_format: SDL_GPUTextureFormat;
    has_depth_stencil_target: Boolean;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  SDL_GPUGraphicsPipelineCreateInfo = record
    vertex_shader: PSDL_GPUShader;
    fragment_shader: PSDL_GPUShader;
    vertex_input_state: SDL_GPUVertexInputState;
    primitive_type: SDL_GPUPrimitiveType;
    rasterizer_state: SDL_GPURasterizerState;
    multisample_state: SDL_GPUMultisampleState;
    depth_stencil_state: SDL_GPUDepthStencilState;
    target_info: SDL_GPUGraphicsPipelineTargetInfo;
    props: SDL_PropertiesID;
  end;

  SDL_GPUComputePipelineCreateInfo = record
    code_size: NativeUInt;
    code: PUint8;
    entrypoint: PUTF8Char;
    format: SDL_GPUShaderFormat;
    num_samplers: Uint32;
    num_readonly_storage_textures: Uint32;
    num_readonly_storage_buffers: Uint32;
    num_readwrite_storage_textures: Uint32;
    num_readwrite_storage_buffers: Uint32;
    num_uniform_buffers: Uint32;
    threadcount_x: Uint32;
    threadcount_y: Uint32;
    threadcount_z: Uint32;
    props: SDL_PropertiesID;
  end;

  SDL_GPUColorTargetInfo = record
    texture: PSDL_GPUTexture;
    mip_level: Uint32;
    layer_or_depth_plane: Uint32;
    clear_color: SDL_FColor;
    load_op: SDL_GPULoadOp;
    store_op: SDL_GPUStoreOp;
    resolve_texture: PSDL_GPUTexture;
    resolve_mip_level: Uint32;
    resolve_layer: Uint32;
    cycle: Boolean;
    cycle_resolve_texture: Boolean;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_GPUDepthStencilTargetInfo = record
    texture: PSDL_GPUTexture;
    clear_depth: Single;
    load_op: SDL_GPULoadOp;
    store_op: SDL_GPUStoreOp;
    stencil_load_op: SDL_GPULoadOp;
    stencil_store_op: SDL_GPUStoreOp;
    cycle: Boolean;
    clear_stencil: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  SDL_GPUBlitInfo = record
    source: SDL_GPUBlitRegion;
    destination: SDL_GPUBlitRegion;
    load_op: SDL_GPULoadOp;
    clear_color: SDL_FColor;
    flip_mode: SDL_FlipMode;
    filter: SDL_GPUFilter;
    cycle: Boolean;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  SDL_GPUBufferBinding = record
    buffer: PSDL_GPUBuffer;
    offset: Uint32;
  end;

  SDL_GPUTextureSamplerBinding = record
    texture: PSDL_GPUTexture;
    sampler: PSDL_GPUSampler;
  end;

  SDL_GPUStorageBufferReadWriteBinding = record
    buffer: PSDL_GPUBuffer;
    cycle: Boolean;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  SDL_GPUStorageTextureReadWriteBinding = record
    texture: PSDL_GPUTexture;
    mip_level: Uint32;
    layer: Uint32;
    cycle: Boolean;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  PSDL_Haptic = Pointer;
  PPSDL_Haptic = ^PSDL_Haptic;

  SDL_HapticDirection = record
    &type: Uint8;
    dir: array [0..2] of Sint32;
  end;

  SDL_HapticConstant = record
    &type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    level: Sint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  SDL_HapticPeriodic = record
    &type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    period: Uint16;
    magnitude: Sint16;
    offset: Sint16;
    phase: Uint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  SDL_HapticCondition = record
    &type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    right_sat: array [0..2] of Uint16;
    left_sat: array [0..2] of Uint16;
    right_coeff: array [0..2] of Sint16;
    left_coeff: array [0..2] of Sint16;
    deadband: array [0..2] of Uint16;
    center: array [0..2] of Sint16;
  end;

  SDL_HapticRamp = record
    &type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    start: Sint16;
    &end: Sint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  SDL_HapticLeftRight = record
    &type: Uint16;
    length: Uint32;
    large_magnitude: Uint16;
    small_magnitude: Uint16;
  end;

  SDL_HapticCustom = record
    &type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    channels: Uint8;
    period: Uint16;
    samples: Uint16;
    data: PUint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  PSDL_HapticEffect = ^SDL_HapticEffect;
  SDL_HapticEffect = record
    case Integer of
      0: (&type: Uint16);
      1: (constant: SDL_HapticConstant);
      2: (periodic: SDL_HapticPeriodic);
      3: (condition: SDL_HapticCondition);
      4: (ramp: SDL_HapticRamp);
      5: (leftright: SDL_HapticLeftRight);
      6: (custom: SDL_HapticCustom);
  end;

  SDL_HapticID = Uint32;
  PSDL_HapticID = ^SDL_HapticID;
  PSDL_hid_device = Pointer;
  PPSDL_hid_device = ^PSDL_hid_device;

  SDL_hid_device_info = record
    path: PUTF8Char;
    vendor_id: Word;
    product_id: Word;
    serial_number: PWideChar;
    release_number: Word;
    manufacturer_string: PWideChar;
    product_string: PWideChar;
    usage_page: Word;
    usage: Word;
    interface_number: Integer;
    interface_class: Integer;
    interface_subclass: Integer;
    interface_protocol: Integer;
    bus_type: SDL_hid_bus_type;
    next: PSDL_hid_device_info;
  end;

  SDL_HintCallback = procedure(userdata: Pointer; const name: PUTF8Char; const oldValue: PUTF8Char; const newValue: PUTF8Char); cdecl;
  SDL_InitFlags = Uint32;

  SDL_AppInit_func = function(appstate: PPointer; argc: Integer; argv: PPUTF8Char): SDL_AppResult; cdecl;

  SDL_AppIterate_func = function(appstate: Pointer): SDL_AppResult; cdecl;

  SDL_AppEvent_func = function(appstate: Pointer; event: PSDL_Event): SDL_AppResult; cdecl;

  SDL_AppQuit_func = procedure(appstate: Pointer; result: SDL_AppResult); cdecl;

  SDL_MainThreadCallback = procedure(userdata: Pointer); cdecl;
  PSDL_SharedObject = Pointer;
  PPSDL_SharedObject = ^PSDL_SharedObject;

  SDL_Locale = record
    language: PUTF8Char;
    country: PUTF8Char;
  end;

  SDL_LogOutputFunction = procedure(userdata: Pointer; category: Integer; priority: SDL_LogPriority; const &message: PUTF8Char); cdecl;
  PSDL_LogOutputFunction = ^SDL_LogOutputFunction;
  SDL_MessageBoxFlags = Uint32;
  SDL_MessageBoxButtonFlags = Uint32;

  SDL_MessageBoxButtonData = record
    flags: SDL_MessageBoxButtonFlags;
    buttonID: Integer;
    text: PUTF8Char;
  end;

  SDL_MessageBoxColor = record
    r: Uint8;
    g: Uint8;
    b: Uint8;
  end;

  SDL_MessageBoxColorScheme = record
    colors: array [0..4] of SDL_MessageBoxColor;
  end;

  SDL_MessageBoxData = record
    flags: SDL_MessageBoxFlags;
    window: PSDL_Window;
    title: PUTF8Char;
    &message: PUTF8Char;
    numbuttons: Integer;
    buttons: PSDL_MessageBoxButtonData;
    colorScheme: PSDL_MessageBoxColorScheme;
  end;

  SDL_MetalView = Pointer;
  PSDL_Process = Pointer;
  PPSDL_Process = ^PSDL_Process;

  SDL_Vertex = record
    position: SDL_FPoint;
    color: SDL_FColor;
    tex_coord: SDL_FPoint;
  end;

  PSDL_Renderer = Pointer;
  PPSDL_Renderer = ^PSDL_Renderer;

  SDL_Texture = record
    format: SDL_PixelFormat;
    w: Integer;
    h: Integer;
    refcount: Integer;
  end;

  SDL_StorageInterface = record
    version: Uint32;
    close: function(userdata: Pointer): Boolean; cdecl;
    ready: function(userdata: Pointer): Boolean; cdecl;
    enumerate: function(userdata: Pointer; const path: PUTF8Char; callback: SDL_EnumerateDirectoryCallback; callback_userdata: Pointer): Boolean; cdecl;
    info: function(userdata: Pointer; const path: PUTF8Char; info: PSDL_PathInfo): Boolean; cdecl;
    read_file: function(userdata: Pointer; const path: PUTF8Char; destination: Pointer; length: Uint64): Boolean; cdecl;
    write_file: function(userdata: Pointer; const path: PUTF8Char; const source: Pointer; length: Uint64): Boolean; cdecl;
    mkdir: function(userdata: Pointer; const path: PUTF8Char): Boolean; cdecl;
    remove: function(userdata: Pointer; const path: PUTF8Char): Boolean; cdecl;
    rename: function(userdata: Pointer; const oldpath: PUTF8Char; const newpath: PUTF8Char): Boolean; cdecl;
    copy: function(userdata: Pointer; const oldpath: PUTF8Char; const newpath: PUTF8Char): Boolean; cdecl;
    space_remaining: function(userdata: Pointer): Uint64; cdecl;
  end;

  PSDL_Storage = Pointer;
  PPSDL_Storage = ^PSDL_Storage;
  PMSG = Pointer;
  PPMSG = ^PMSG;

  SDL_WindowsMessageHook = function(userdata: Pointer; msg: PMSG): Boolean; cdecl;
  PXEvent = Pointer;
  PPXEvent = ^PXEvent;

  SDL_X11EventHook = function(userdata: Pointer; xevent: PXEvent): Boolean; cdecl;

  SDL_DateTime = record
    year: Integer;
    month: Integer;
    day: Integer;
    hour: Integer;
    minute: Integer;
    second: Integer;
    nanosecond: Integer;
    day_of_week: Integer;
    utc_offset: Integer;
  end;

  SDL_TimerID = Uint32;

  SDL_TimerCallback = function(userdata: Pointer; timerID: SDL_TimerID; interval: Uint32): Uint32; cdecl;

  SDL_NSTimerCallback = function(userdata: Pointer; timerID: SDL_TimerID; interval: Uint64): Uint64; cdecl;

  IMG_Animation = record
    w: Integer;
    h: Integer;
    count: Integer;
    frames: PPSDL_Surface;
    delays: PInteger;
  end;

  MIX_InitFlags = Uint32;

  Mix_Chunk = record
    allocated: Integer;
    abuf: PUint8;
    alen: Uint32;
    volume: Uint8;
  end;

  PMix_Music = Pointer;
  PPMix_Music = ^PMix_Music;

  Mix_MixCallback = procedure(udata: Pointer; stream: PUint8; len: Integer); cdecl;

  Mix_MusicFinishedCallback = procedure(); cdecl;

  Mix_ChannelFinishedCallback = procedure(channel: Integer); cdecl;

  Mix_EffectFunc_t = procedure(chan: Integer; stream: Pointer; len: Integer; udata: Pointer); cdecl;

  Mix_EffectDone_t = procedure(chan: Integer; udata: Pointer); cdecl;

  Mix_EachSoundFontCallback = function(const p1: PUTF8Char; p2: Pointer): Boolean; cdecl;
  PSDLNet_Address = Pointer;
  PPSDLNet_Address = ^PSDLNet_Address;
  PSDLNet_StreamSocket = Pointer;
  PPSDLNet_StreamSocket = ^PSDLNet_StreamSocket;
  PSDLNet_Server = Pointer;
  PPSDLNet_Server = ^PSDLNet_Server;
  PSDLNet_DatagramSocket = Pointer;
  PPSDLNet_DatagramSocket = ^PSDLNet_DatagramSocket;

  SDLNet_Datagram = record
    addr: PSDLNet_Address;
    port: Uint16;
    buf: PUint8;
    buflen: Integer;
  end;

  PTTF_Font = Pointer;
  PPTTF_Font = ^PTTF_Font;
  PTTF_TextEngine = Pointer;
  PPTTF_TextEngine = ^PTTF_TextEngine;
  PTTF_TextData = Pointer;
  PPTTF_TextData = ^PTTF_TextData;

  TTF_Text = record
    text: PUTF8Char;
    num_lines: Integer;
    refcount: Integer;
    internal: PTTF_TextData;
  end;

  TTF_GPUAtlasDrawSequence = record
    atlas_texture: PSDL_GPUTexture;
    xy: PSingle;
    xy_stride: Integer;
    uv: PSingle;
    uv_stride: Integer;
    num_vertices: Integer;
    indices: PInteger;
    num_indices: Integer;
    next: PTTF_GPUAtlasDrawSequence;
  end;

  TTF_SubStringFlags = Uint32;

  TTF_SubString = record
    flags: TTF_SubStringFlags;
    offset: Integer;
    length: Integer;
    line_index: Integer;
    cluster_index: Integer;
    rect: SDL_Rect;
  end;

  voidp = Pointer;
  unzFile = voidp;
  zipFile = voidp;
  uInt = Cardinal;
  uLong = Longword;
  Bytef = &Byte;
  PBytef = ^Bytef;

  tm_zip_s = record
    tm_sec: Integer;
    tm_min: Integer;
    tm_hour: Integer;
    tm_mday: Integer;
    tm_mon: Integer;
    tm_year: Integer;
  end;

  tm_zip = tm_zip_s;

  zip_fileinfo = record
    tmz_date: tm_zip;
    dosDate: uLong;
    internal_fa: uLong;
    external_fa: uLong;
  end;

  tm_unz_s = record
    tm_sec: Integer;
    tm_min: Integer;
    tm_hour: Integer;
    tm_mday: Integer;
    tm_mon: Integer;
    tm_year: Integer;
  end;

  tm_unz = tm_unz_s;

  unz_file_info64_s = record
    version: uLong;
    version_needed: uLong;
    flag: uLong;
    compression_method: uLong;
    dosDate: uLong;
    crc: uLong;
    compressed_size: UInt64;
    uncompressed_size: UInt64;
    size_filename: uLong;
    size_file_extra: uLong;
    size_file_comment: uLong;
    disk_num_start: uLong;
    internal_fa: uLong;
    external_fa: uLong;
    tmu_date: tm_unz;
  end;

  unz_file_info64 = unz_file_info64_s;
  Punz_file_info64 = ^unz_file_info64;
  Pplm_t = Pointer;
  PPplm_t = ^Pplm_t;
  Pplm_buffer_t = Pointer;
  PPplm_buffer_t = ^Pplm_buffer_t;
  Pplm_demux_t = Pointer;
  PPplm_demux_t = ^Pplm_demux_t;
  Pplm_video_t = Pointer;
  PPplm_video_t = ^Pplm_video_t;
  Pplm_audio_t = Pointer;
  PPplm_audio_t = ^Pplm_audio_t;

  plm_packet_t = record
    &type: Integer;
    pts: Double;
    length: NativeUInt;
    data: PUInt8;
  end;

  plm_plane_t = record
    width: Cardinal;
    height: Cardinal;
    data: PUInt8;
  end;

  plm_frame_t = record
    time: Double;
    width: Cardinal;
    height: Cardinal;
    y: plm_plane_t;
    cr: plm_plane_t;
    cb: plm_plane_t;
  end;

  plm_video_decode_callback = procedure(self: Pplm_t; frame: Pplm_frame_t; user: Pointer); cdecl;

  plm_samples_t = record
    time: Double;
    count: Cardinal;
    interleaved: array [0..2303] of Single;
  end;

  plm_audio_decode_callback = procedure(self: Pplm_t; samples: Pplm_samples_t; user: Pointer); cdecl;

  plm_buffer_load_callback = procedure(self: Pplm_buffer_t; user: Pointer); cdecl;

  spFloatArray = record
    size: Integer;
    capacity: Integer;
    items: PSingle;
  end;

  spIntArray = record
    size: Integer;
    capacity: Integer;
    items: PInteger;
  end;

  spShortArray = record
    size: Integer;
    capacity: Integer;
    items: PSmallint;
  end;

  spUnsignedShortArray = record
    size: Integer;
    capacity: Integer;
    items: PWord;
  end;

  spArrayFloatArray = record
    size: Integer;
    capacity: Integer;
    items: PPspFloatArray;
  end;

  spArrayShortArray = record
    size: Integer;
    capacity: Integer;
    items: PPspShortArray;
  end;

  spEventData = record
    name: PUTF8Char;
    intValue: Integer;
    floatValue: Single;
    stringValue: PUTF8Char;
    audioPath: PUTF8Char;
    volume: Single;
    balance: Single;
  end;

  spEvent = record
    data: PspEventData;
    time: Single;
    intValue: Integer;
    floatValue: Single;
    stringValue: PUTF8Char;
    volume: Single;
    balance: Single;
  end;

  spAttachment = record
    name: PUTF8Char;
    &type: spAttachmentType;
    vtable: Pointer;
    refCount: Integer;
    attachmentLoader: PspAttachmentLoader;
  end;

  spColor = record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;

  spBoneData = record
    index: Integer;
    name: PUTF8Char;
    parent: PspBoneData;
    length: Single;
    x: Single;
    y: Single;
    rotation: Single;
    scaleX: Single;
    scaleY: Single;
    shearX: Single;
    shearY: Single;
    inherit: spInherit;
    skinRequired: Integer;
    color: spColor;
    icon: PUTF8Char;
    visible: Integer;
  end;

  spBone = record
    data: PspBoneData;
    skeleton: PspSkeleton;
    parent: PspBone;
    childrenCount: Integer;
    children: PPspBone;
    x: Single;
    y: Single;
    rotation: Single;
    scaleX: Single;
    scaleY: Single;
    shearX: Single;
    shearY: Single;
    ax: Single;
    ay: Single;
    arotation: Single;
    ascaleX: Single;
    ascaleY: Single;
    ashearX: Single;
    ashearY: Single;
    a: Single;
    b: Single;
    worldX: Single;
    c: Single;
    d: Single;
    worldY: Single;
    sorted: Integer;
    active: Integer;
    inherit: spInherit;
  end;

  spSlotData = record
    index: Integer;
    name: PUTF8Char;
    boneData: PspBoneData;
    attachmentName: PUTF8Char;
    color: spColor;
    darkColor: PspColor;
    blendMode: spBlendMode;
    visible: Integer;
  end;

  spSlot = record
    data: PspSlotData;
    bone: PspBone;
    color: spColor;
    darkColor: PspColor;
    attachment: PspAttachment;
    attachmentState: Integer;
    deformCapacity: Integer;
    deformCount: Integer;
    deform: PSingle;
    sequenceIndex: Integer;
  end;

  spVertexAttachment = record
    super: spAttachment;
    bonesCount: Integer;
    bones: PInteger;
    verticesCount: Integer;
    vertices: PSingle;
    worldVerticesLength: Integer;
    timelineAttachment: PspAttachment;
    id: Integer;
  end;

  spTextureRegion = record
    rendererObject: Pointer;
    u: Single;
    v: Single;
    u2: Single;
    v2: Single;
    degrees: Integer;
    offsetX: Single;
    offsetY: Single;
    width: Integer;
    height: Integer;
    originalWidth: Integer;
    originalHeight: Integer;
  end;

  spAtlasPage = record
    atlas: PspAtlas;
    name: PUTF8Char;
    format: spAtlasFormat;
    minFilter: spAtlasFilter;
    magFilter: spAtlasFilter;
    uWrap: spAtlasWrap;
    vWrap: spAtlasWrap;
    rendererObject: Pointer;
    width: Integer;
    height: Integer;
    pma: Integer;
    next: PspAtlasPage;
  end;

  spKeyValue = record
    name: PUTF8Char;
    values: array [0..4] of Single;
  end;

  spKeyValueArray = record
    size: Integer;
    capacity: Integer;
    items: PspKeyValue;
  end;

  spAtlasRegion = record
    super: spTextureRegion;
    name: PUTF8Char;
    x: Integer;
    y: Integer;
    index: Integer;
    splits: PInteger;
    pads: PInteger;
    keyValues: PspKeyValueArray;
    page: PspAtlasPage;
    next: PspAtlasRegion;
  end;

  spAtlas = record
    pages: PspAtlasPage;
    regions: PspAtlasRegion;
    rendererObject: Pointer;
  end;

  spTextureRegionArray = record
    size: Integer;
    capacity: Integer;
    items: PPspTextureRegion;
  end;

  spSequence = record
    id: Integer;
    start: Integer;
    digits: Integer;
    setupIndex: Integer;
    regions: PspTextureRegionArray;
  end;

  spPropertyId = UInt64;
  PspPropertyId = ^spPropertyId;

  spPropertyIdArray = record
    size: Integer;
    capacity: Integer;
    items: PspPropertyId;
  end;

  spTimelineArray = record
    size: Integer;
    capacity: Integer;
    items: PPspTimeline;
  end;

  spAnimation = record
    name: PUTF8Char;
    duration: Single;
    timelines: PspTimelineArray;
    timelineIds: PspPropertyIdArray;
  end;

  _spTimelineVtable = record
    apply: procedure(self: PspTimeline; skeleton: PspSkeleton; lastTime: Single; time: Single; firedEvents: PPspEvent; eventsCount: PInteger; alpha: Single; blend: spMixBlend; direction: spMixDirection); cdecl;
    dispose: procedure(self: PspTimeline); cdecl;
    setBezier: procedure(self: PspTimeline; bezier: Integer; frame: Integer; value: Single; time1: Single; value1: Single; cx1: Single; cy1: Single; cx2: Single; cy2: Single; time2: Single; value2: Single); cdecl;
  end;

  spTimeline = record
    vtable: _spTimelineVtable;
    propertyIds: array [0..2] of spPropertyId;
    propertyIdsCount: Integer;
    frames: PspFloatArray;
    frameCount: Integer;
    frameEntries: Integer;
    &type: spTimelineType;
  end;

  spCurveTimeline = record
    super: spTimeline;
    curves: PspFloatArray;
  end;

  spCurveTimeline1 = spCurveTimeline;
  PspCurveTimeline1 = ^spCurveTimeline1;
  spCurveTimeline2 = spCurveTimeline;

  spRotateTimeline = record
    super: spCurveTimeline1;
    boneIndex: Integer;
  end;

  spTranslateTimeline = record
    super: spCurveTimeline2;
    boneIndex: Integer;
  end;

  spTranslateXTimeline = record
    super: spCurveTimeline1;
    boneIndex: Integer;
  end;

  spTranslateYTimeline = record
    super: spCurveTimeline1;
    boneIndex: Integer;
  end;

  spScaleTimeline = record
    super: spCurveTimeline2;
    boneIndex: Integer;
  end;

  spScaleXTimeline = record
    super: spCurveTimeline1;
    boneIndex: Integer;
  end;

  spScaleYTimeline = record
    super: spCurveTimeline1;
    boneIndex: Integer;
  end;

  spShearTimeline = record
    super: spCurveTimeline2;
    boneIndex: Integer;
  end;

  spShearXTimeline = record
    super: spCurveTimeline1;
    boneIndex: Integer;
  end;

  spShearYTimeline = record
    super: spCurveTimeline1;
    boneIndex: Integer;
  end;

  spRGBATimeline = record
    super: spCurveTimeline2;
    slotIndex: Integer;
  end;

  spRGBTimeline = record
    super: spCurveTimeline2;
    slotIndex: Integer;
  end;

  spAlphaTimeline = record
    super: spCurveTimeline1;
    slotIndex: Integer;
  end;

  spRGBA2Timeline = record
    super: spCurveTimeline;
    slotIndex: Integer;
  end;

  spRGB2Timeline = record
    super: spCurveTimeline;
    slotIndex: Integer;
  end;

  spAttachmentTimeline = record
    super: spTimeline;
    slotIndex: Integer;
    attachmentNames: PPUTF8Char;
  end;

  spDeformTimeline = record
    super: spCurveTimeline;
    frameVerticesCount: Integer;
    frameVertices: PPSingle;
    slotIndex: Integer;
    attachment: PspAttachment;
  end;

  spSequenceTimeline = record
    super: spTimeline;
    slotIndex: Integer;
    attachment: PspAttachment;
  end;

  spEventTimeline = record
    super: spTimeline;
    events: PPspEvent;
  end;

  spDrawOrderTimeline = record
    super: spTimeline;
    drawOrders: PPInteger;
    slotsCount: Integer;
  end;

  spInheritTimeline = record
    super: spTimeline;
    boneIndex: Integer;
  end;

  spIkConstraintTimeline = record
    super: spCurveTimeline;
    ikConstraintIndex: Integer;
  end;

  spTransformConstraintTimeline = record
    super: spCurveTimeline;
    transformConstraintIndex: Integer;
  end;

  spPathConstraintPositionTimeline = record
    super: spCurveTimeline;
    pathConstraintIndex: Integer;
  end;

  spPathConstraintSpacingTimeline = record
    super: spCurveTimeline;
    pathConstraintIndex: Integer;
  end;

  spPathConstraintMixTimeline = record
    super: spCurveTimeline;
    pathConstraintIndex: Integer;
  end;

  spPhysicsConstraintTimeline = record
    super: spCurveTimeline;
    physicsConstraintIndex: Integer;
  end;

  spPhysicsConstraintResetTimeline = record
    super: spTimeline;
    physicsConstraintIndex: Integer;
  end;

  spIkConstraintData = record
    name: PUTF8Char;
    order: Integer;
    skinRequired: Integer;
    bonesCount: Integer;
    bones: PPspBoneData;
    target: PspBoneData;
    bendDirection: Integer;
    compress: Integer;
    stretch: Integer;
    uniform: Integer;
    mix: Single;
    softness: Single;
  end;

  spTransformConstraintData = record
    name: PUTF8Char;
    order: Integer;
    skinRequired: Integer;
    bonesCount: Integer;
    bones: PPspBoneData;
    target: PspBoneData;
    mixRotate: Single;
    mixX: Single;
    mixY: Single;
    mixScaleX: Single;
    mixScaleY: Single;
    mixShearY: Single;
    offsetRotation: Single;
    offsetX: Single;
    offsetY: Single;
    offsetScaleX: Single;
    offsetScaleY: Single;
    offsetShearY: Single;
    relative: Integer;
    local: Integer;
  end;

  spPathConstraintData = record
    name: PUTF8Char;
    order: Integer;
    skinRequired: Integer;
    bonesCount: Integer;
    bones: PPspBoneData;
    target: PspSlotData;
    positionMode: spPositionMode;
    spacingMode: spSpacingMode;
    rotateMode: spRotateMode;
    offsetRotation: Single;
    position: Single;
    spacing: Single;
    mixRotate: Single;
    mixX: Single;
    mixY: Single;
  end;

  spPhysicsConstraintData = record
    name: PUTF8Char;
    order: Integer;
    skinRequired: Integer;
    bone: PspBoneData;
    x: Single;
    y: Single;
    rotate: Single;
    scaleX: Single;
    shearX: Single;
    limit: Single;
    step: Single;
    inertia: Single;
    strength: Single;
    damping: Single;
    massInverse: Single;
    wind: Single;
    gravity: Single;
    mix: Single;
    inertiaGlobal: Integer;
    strengthGlobal: Integer;
    dampingGlobal: Integer;
    massGlobal: Integer;
    windGlobal: Integer;
    gravityGlobal: Integer;
    mixGlobal: Integer;
  end;

  spBoneDataArray = record
    size: Integer;
    capacity: Integer;
    items: PPspBoneData;
  end;

  spIkConstraintDataArray = record
    size: Integer;
    capacity: Integer;
    items: PPspIkConstraintData;
  end;

  spTransformConstraintDataArray = record
    size: Integer;
    capacity: Integer;
    items: PPspTransformConstraintData;
  end;

  spPathConstraintDataArray = record
    size: Integer;
    capacity: Integer;
    items: PPspPathConstraintData;
  end;

  spPhysicsConstraintDataArray = record
    size: Integer;
    capacity: Integer;
    items: PPspPhysicsConstraintData;
  end;

  spSkin = record
    name: PUTF8Char;
    bones: PspBoneDataArray;
    ikConstraints: PspIkConstraintDataArray;
    transformConstraints: PspTransformConstraintDataArray;
    pathConstraints: PspPathConstraintDataArray;
    physicsConstraints: PspPhysicsConstraintDataArray;
    color: spColor;
  end;


  _Entry = record
    slotIndex: Integer;
    name: PUTF8Char;
    attachment: PspAttachment;
    next: P_Entry;
  end;

  spSkinEntry = _Entry;
  PspSkinEntry = ^spSkinEntry;


  _SkinHashTableEntry = record
    entry: P_Entry;
    next: P_SkinHashTableEntry;
  end;

  _spSkin = record
    super: spSkin;
    entries: P_Entry;
    entriesHashTable: array [0..99] of P_SkinHashTableEntry;
  end;

  spSkeletonData = record
    version: PUTF8Char;
    hash: PUTF8Char;
    x: Single;
    y: Single;
    width: Single;
    height: Single;
    referenceScale: Single;
    fps: Single;
    imagesPath: PUTF8Char;
    audioPath: PUTF8Char;
    stringsCount: Integer;
    strings: PPUTF8Char;
    bonesCount: Integer;
    bones: PPspBoneData;
    slotsCount: Integer;
    slots: PPspSlotData;
    skinsCount: Integer;
    skins: PPspSkin;
    defaultSkin: PspSkin;
    eventsCount: Integer;
    events: PPspEventData;
    animationsCount: Integer;
    animations: PPspAnimation;
    ikConstraintsCount: Integer;
    ikConstraints: PPspIkConstraintData;
    transformConstraintsCount: Integer;
    transformConstraints: PPspTransformConstraintData;
    pathConstraintsCount: Integer;
    pathConstraints: PPspPathConstraintData;
    physicsConstraintsCount: Integer;
    physicsConstraints: PPspPhysicsConstraintData;
  end;

  spAnimationStateData = record
    skeletonData: PspSkeletonData;
    defaultMix: Single;
    entries: Pointer;
  end;

  spAnimationStateListener = procedure(state: PspAnimationState; &type: spEventType; entry: PspTrackEntry; event: PspEvent); cdecl;

  spTrackEntryArray = record
    size: Integer;
    capacity: Integer;
    items: PPspTrackEntry;
  end;

  spTrackEntry = record
    animation: PspAnimation;
    previous: PspTrackEntry;
    next: PspTrackEntry;
    mixingFrom: PspTrackEntry;
    mixingTo: PspTrackEntry;
    listener: spAnimationStateListener;
    trackIndex: Integer;
    loop: Integer;
    holdPrevious: Integer;
    reverse: Integer;
    shortestRotation: Integer;
    eventThreshold: Single;
    mixAttachmentThreshold: Single;
    alphaAttachmentThreshold: Single;
    mixDrawOrderThreshold: Single;
    animationStart: Single;
    animationEnd: Single;
    animationLast: Single;
    nextAnimationLast: Single;
    delay: Single;
    trackTime: Single;
    trackLast: Single;
    nextTrackLast: Single;
    trackEnd: Single;
    timeScale: Single;
    alpha: Single;
    mixTime: Single;
    mixDuration: Single;
    interruptAlpha: Single;
    totalAlpha: Single;
    mixBlend: spMixBlend;
    timelineMode: PspIntArray;
    timelineHoldMix: PspTrackEntryArray;
    timelinesRotation: PSingle;
    timelinesRotationCount: Integer;
    rendererObject: Pointer;
    userData: Pointer;
  end;

  spAnimationState = record
    data: PspAnimationStateData;
    tracksCount: Integer;
    tracks: PPspTrackEntry;
    listener: spAnimationStateListener;
    timeScale: Single;
    rendererObject: Pointer;
    userData: Pointer;
    unkeyedState: Integer;
  end;

  spAttachmentLoader = record
    error1: PUTF8Char;
    error2: PUTF8Char;
    vtable: Pointer;
  end;

  spAtlasAttachmentLoader = record
    super: spAttachmentLoader;
    atlas: PspAtlas;
  end;

  spRegionAttachment = record
    super: spAttachment;
    path: PUTF8Char;
    x: Single;
    y: Single;
    scaleX: Single;
    scaleY: Single;
    rotation: Single;
    width: Single;
    height: Single;
    color: spColor;
    rendererObject: Pointer;
    region: PspTextureRegion;
    sequence: PspSequence;
    offset: array [0..7] of Single;
    uvs: array [0..7] of Single;
  end;

  spMeshAttachment = record
    super: spVertexAttachment;
    rendererObject: Pointer;
    region: PspTextureRegion;
    sequence: PspSequence;
    path: PUTF8Char;
    regionUVs: PSingle;
    uvs: PSingle;
    trianglesCount: Integer;
    triangles: PWord;
    color: spColor;
    hullLength: Integer;
    parentMesh: PspMeshAttachment;
    edgesCount: Integer;
    edges: PWord;
    width: Single;
    height: Single;
  end;

  spBoundingBoxAttachment = record
    super: spVertexAttachment;
    color: spColor;
  end;

  spClippingAttachment = record
    super: spVertexAttachment;
    endSlot: PspSlotData;
    color: spColor;
  end;

  spPointAttachment = record
    super: spAttachment;
    x: Single;
    y: Single;
    rotation: Single;
    color: spColor;
  end;

  spIkConstraint = record
    data: PspIkConstraintData;
    bonesCount: Integer;
    bones: PPspBone;
    target: PspBone;
    bendDirection: Integer;
    compress: Integer;
    stretch: Integer;
    mix: Single;
    softness: Single;
    active: Integer;
  end;

  spTransformConstraint = record
    data: PspTransformConstraintData;
    bonesCount: Integer;
    bones: PPspBone;
    target: PspBone;
    mixRotate: Single;
    mixX: Single;
    mixY: Single;
    mixScaleX: Single;
    mixScaleY: Single;
    mixShearY: Single;
    active: Integer;
  end;

  spPathAttachment = record
    super: spVertexAttachment;
    lengthsLength: Integer;
    lengths: PSingle;
    closed: Integer;
    constantSpeed: Integer;
    color: spColor;
  end;

  spPathConstraint = record
    data: PspPathConstraintData;
    bonesCount: Integer;
    bones: PPspBone;
    target: PspSlot;
    position: Single;
    spacing: Single;
    mixRotate: Single;
    mixX: Single;
    mixY: Single;
    spacesCount: Integer;
    spaces: PSingle;
    positionsCount: Integer;
    positions: PSingle;
    worldCount: Integer;
    world: PSingle;
    curvesCount: Integer;
    curves: PSingle;
    lengthsCount: Integer;
    lengths: PSingle;
    segments: array [0..9] of Single;
    active: Integer;
  end;

  spPhysicsConstraint = record
    data: PspPhysicsConstraintData;
    bone: PspBone;
    inertia: Single;
    strength: Single;
    damping: Single;
    massInverse: Single;
    wind: Single;
    gravity: Single;
    mix: Single;
    reset: Integer;
    ux: Single;
    uy: Single;
    cx: Single;
    cy: Single;
    tx: Single;
    ty: Single;
    xOffset: Single;
    xVelocity: Single;
    yOffset: Single;
    yVelocity: Single;
    rotateOffset: Single;
    rotateVelocity: Single;
    scaleOffset: Single;
    scaleVelocity: Single;
    active: Integer;
    skeleton: PspSkeleton;
    remaining: Single;
    lastTime: Single;
  end;

  spSkeleton = record
    data: PspSkeletonData;
    bonesCount: Integer;
    bones: PPspBone;
    root: PspBone;
    slotsCount: Integer;
    slots: PPspSlot;
    drawOrder: PPspSlot;
    ikConstraintsCount: Integer;
    ikConstraints: PPspIkConstraint;
    transformConstraintsCount: Integer;
    transformConstraints: PPspTransformConstraint;
    pathConstraintsCount: Integer;
    pathConstraints: PPspPathConstraint;
    physicsConstraintsCount: Integer;
    physicsConstraints: PPspPhysicsConstraint;
    skin: PspSkin;
    color: spColor;
    scaleX: Single;
    scaleY: Single;
    x: Single;
    y: Single;
    time: Single;
  end;

  spPolygon = record
    vertices: PSingle;
    count: Integer;
    capacity: Integer;
  end;

  spSkeletonBounds = record
    count: Integer;
    boundingBoxes: PPspBoundingBoxAttachment;
    polygons: PPspPolygon;
    minX: Single;
    minY: Single;
    maxX: Single;
    maxY: Single;
  end;

  spSkeletonBinary = record
    scale: Single;
    attachmentLoader: PspAttachmentLoader;
    error: PUTF8Char;
  end;

  spSkeletonJson = record
    scale: Single;
    attachmentLoader: PspAttachmentLoader;
    error: PUTF8Char;
  end;

  spTriangulator = record
    convexPolygons: PspArrayFloatArray;
    convexPolygonsIndices: PspArrayShortArray;
    indicesArray: PspShortArray;
    isConcaveArray: PspIntArray;
    triangles: PspShortArray;
    polygonPool: PspArrayFloatArray;
    polygonIndicesPool: PspArrayShortArray;
  end;

  spSkeletonClipping = record
    triangulator: PspTriangulator;
    clippingPolygon: PspFloatArray;
    clipOutput: PspFloatArray;
    clippedVertices: PspFloatArray;
    clippedUVs: PspFloatArray;
    clippedTriangles: PspUnsignedShortArray;
    scratch: PspFloatArray;
    clipAttachment: PspClippingAttachment;
    clippingPolygons: PspArrayFloatArray;
  end;

  spSdlVertexArray = record
    size: Integer;
    capacity: Integer;
    items: PSDL_Vertex;
  end;

  spSkeletonDrawable = record
    skeleton: PspSkeleton;
    animationState: PspAnimationState;
    usePremultipliedAlpha: Integer;
    clipper: PspSkeletonClipping;
    worldVertices: PspFloatArray;
    sdlVertices: PspSdlVertexArray;
    sdlIndices: PspIntArray;
  end;

const
  PLM_DEMUX_PACKET_PRIVATE: Integer = $BD;
  PLM_DEMUX_PACKET_AUDIO_1: Integer = $C0;
  PLM_DEMUX_PACKET_AUDIO_2: Integer = $C1;
  PLM_DEMUX_PACKET_AUDIO_3: Integer = $C2;
  PLM_DEMUX_PACKET_AUDIO_4: Integer = $C3;
  PLM_DEMUX_PACKET_VIDEO_1: Integer = $E0;

var
  SDL_malloc: function(size: NativeUInt): Pointer; cdecl;
  SDL_calloc: function(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl;
  SDL_realloc: function(mem: Pointer; size: NativeUInt): Pointer; cdecl;
  SDL_free: procedure(mem: Pointer); cdecl;
  SDL_GetOriginalMemoryFunctions: procedure(malloc_func: PSDL_malloc_func; calloc_func: PSDL_calloc_func; realloc_func: PSDL_realloc_func; free_func: PSDL_free_func); cdecl;
  SDL_GetMemoryFunctions: procedure(malloc_func: PSDL_malloc_func; calloc_func: PSDL_calloc_func; realloc_func: PSDL_realloc_func; free_func: PSDL_free_func); cdecl;
  SDL_SetMemoryFunctions: function(malloc_func: SDL_malloc_func; calloc_func: SDL_calloc_func; realloc_func: SDL_realloc_func; free_func: SDL_free_func): Boolean; cdecl;
  SDL_aligned_alloc: function(alignment: NativeUInt; size: NativeUInt): Pointer; cdecl;
  SDL_aligned_free: procedure(mem: Pointer); cdecl;
  SDL_GetNumAllocations: function(): Integer; cdecl;
  SDL_GetEnvironment: function(): PSDL_Environment; cdecl;
  SDL_CreateEnvironment: function(populated: Boolean): PSDL_Environment; cdecl;
  SDL_GetEnvironmentVariable: function(env: PSDL_Environment; const name: PUTF8Char): PUTF8Char; cdecl;
  SDL_GetEnvironmentVariables: function(env: PSDL_Environment): PPUTF8Char; cdecl;
  SDL_SetEnvironmentVariable: function(env: PSDL_Environment; const name: PUTF8Char; const value: PUTF8Char; overwrite: Boolean): Boolean; cdecl;
  SDL_UnsetEnvironmentVariable: function(env: PSDL_Environment; const name: PUTF8Char): Boolean; cdecl;
  SDL_DestroyEnvironment: procedure(env: PSDL_Environment); cdecl;
  SDL_getenv: function(const name: PUTF8Char): PUTF8Char; cdecl;
  SDL_getenv_unsafe: function(const name: PUTF8Char): PUTF8Char; cdecl;
  SDL_setenv_unsafe: function(const name: PUTF8Char; const value: PUTF8Char; overwrite: Integer): Integer; cdecl;
  SDL_unsetenv_unsafe: function(const name: PUTF8Char): Integer; cdecl;
  SDL_qsort: procedure(base: Pointer; nmemb: NativeUInt; size: NativeUInt; compare: SDL_CompareCallback); cdecl;
  SDL_bsearch: function(const key: Pointer; const base: Pointer; nmemb: NativeUInt; size: NativeUInt; compare: SDL_CompareCallback): Pointer; cdecl;
  SDL_qsort_r: procedure(base: Pointer; nmemb: NativeUInt; size: NativeUInt; compare: SDL_CompareCallback_r; userdata: Pointer); cdecl;
  SDL_bsearch_r: function(const key: Pointer; const base: Pointer; nmemb: NativeUInt; size: NativeUInt; compare: SDL_CompareCallback_r; userdata: Pointer): Pointer; cdecl;
  SDL_abs: function(x: Integer): Integer; cdecl;
  SDL_isalpha: function(x: Integer): Integer; cdecl;
  SDL_isalnum: function(x: Integer): Integer; cdecl;
  SDL_isblank: function(x: Integer): Integer; cdecl;
  SDL_iscntrl: function(x: Integer): Integer; cdecl;
  SDL_isdigit: function(x: Integer): Integer; cdecl;
  SDL_isxdigit: function(x: Integer): Integer; cdecl;
  SDL_ispunct: function(x: Integer): Integer; cdecl;
  SDL_isspace: function(x: Integer): Integer; cdecl;
  SDL_isupper: function(x: Integer): Integer; cdecl;
  SDL_islower: function(x: Integer): Integer; cdecl;
  SDL_isprint: function(x: Integer): Integer; cdecl;
  SDL_isgraph: function(x: Integer): Integer; cdecl;
  SDL_toupper: function(x: Integer): Integer; cdecl;
  SDL_tolower: function(x: Integer): Integer; cdecl;
  SDL_crc16: function(crc: Uint16; const data: Pointer; len: NativeUInt): Uint16; cdecl;
  SDL_crc32: function(crc: Uint32; const data: Pointer; len: NativeUInt): Uint32; cdecl;
  SDL_murmur3_32: function(const data: Pointer; len: NativeUInt; seed: Uint32): Uint32; cdecl;
  SDL_memcpy: function(dst: Pointer; const src: Pointer; len: NativeUInt): Pointer; cdecl;
  SDL_memmove: function(dst: Pointer; const src: Pointer; len: NativeUInt): Pointer; cdecl;
  SDL_memset: function(dst: Pointer; c: Integer; len: NativeUInt): Pointer; cdecl;
  SDL_memset4: function(dst: Pointer; val: Uint32; dwords: NativeUInt): Pointer; cdecl;
  SDL_memcmp: function(const s1: Pointer; const s2: Pointer; len: NativeUInt): Integer; cdecl;
  SDL_wcslen: function(const wstr: PWideChar): NativeUInt; cdecl;
  SDL_wcsnlen: function(const wstr: PWideChar; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_wcslcpy: function(dst: PWideChar; const src: PWideChar; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_wcslcat: function(dst: PWideChar; const src: PWideChar; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_wcsdup: function(const wstr: PWideChar): PWideChar; cdecl;
  SDL_wcsstr: function(const haystack: PWideChar; const needle: PWideChar): PWideChar; cdecl;
  SDL_wcsnstr: function(const haystack: PWideChar; const needle: PWideChar; maxlen: NativeUInt): PWideChar; cdecl;
  SDL_wcscmp: function(const str1: PWideChar; const str2: PWideChar): Integer; cdecl;
  SDL_wcsncmp: function(const str1: PWideChar; const str2: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_wcscasecmp: function(const str1: PWideChar; const str2: PWideChar): Integer; cdecl;
  SDL_wcsncasecmp: function(const str1: PWideChar; const str2: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_wcstol: function(const str: PWideChar; endp: PPWideChar; base: Integer): Longint; cdecl;
  SDL_strlen: function(const str: PUTF8Char): NativeUInt; cdecl;
  SDL_strnlen: function(const str: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_strlcpy: function(dst: PUTF8Char; const src: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_utf8strlcpy: function(dst: PUTF8Char; const src: PUTF8Char; dst_bytes: NativeUInt): NativeUInt; cdecl;
  SDL_strlcat: function(dst: PUTF8Char; const src: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_strdup: function(const str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strndup: function(const str: PUTF8Char; maxlen: NativeUInt): PUTF8Char; cdecl;
  SDL_strrev: function(str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strupr: function(str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strlwr: function(str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strchr: function(const str: PUTF8Char; c: Integer): PUTF8Char; cdecl;
  SDL_strrchr: function(const str: PUTF8Char; c: Integer): PUTF8Char; cdecl;
  SDL_strstr: function(const haystack: PUTF8Char; const needle: PUTF8Char): PUTF8Char; cdecl;
  SDL_strnstr: function(const haystack: PUTF8Char; const needle: PUTF8Char; maxlen: NativeUInt): PUTF8Char; cdecl;
  SDL_strcasestr: function(const haystack: PUTF8Char; const needle: PUTF8Char): PUTF8Char; cdecl;
  SDL_strtok_r: function(s1: PUTF8Char; const s2: PUTF8Char; saveptr: PPUTF8Char): PUTF8Char; cdecl;
  SDL_utf8strlen: function(const str: PUTF8Char): NativeUInt; cdecl;
  SDL_utf8strnlen: function(const str: PUTF8Char; bytes: NativeUInt): NativeUInt; cdecl;
  SDL_itoa: function(value: Integer; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_uitoa: function(value: Cardinal; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_ltoa: function(value: Longint; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_ultoa: function(value: Longword; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_lltoa: function(value: Int64; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_ulltoa: function(value: UInt64; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_atoi: function(const str: PUTF8Char): Integer; cdecl;
  SDL_atof: function(const str: PUTF8Char): Double; cdecl;
  SDL_strtol: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Longint; cdecl;
  SDL_strtoul: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Longword; cdecl;
  SDL_strtoll: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Int64; cdecl;
  SDL_strtoull: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): UInt64; cdecl;
  SDL_strtod: function(const str: PUTF8Char; endp: PPUTF8Char): Double; cdecl;
  SDL_strcmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  SDL_strncmp: function(const str1: PUTF8Char; const str2: PUTF8Char; maxlen: NativeUInt): Integer; cdecl;
  SDL_strcasecmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  SDL_strncasecmp: function(const str1: PUTF8Char; const str2: PUTF8Char; maxlen: NativeUInt): Integer; cdecl;
  SDL_strpbrk: function(const str: PUTF8Char; const breakset: PUTF8Char): PUTF8Char; cdecl;
  SDL_StepUTF8: function(pstr: PPUTF8Char; pslen: PNativeUInt): Uint32; cdecl;
  SDL_StepBackUTF8: function(const start: PUTF8Char; pstr: PPUTF8Char): Uint32; cdecl;
  SDL_UCS4ToUTF8: function(codepoint: Uint32; dst: PUTF8Char): PUTF8Char; cdecl;
  SDL_sscanf: function(const text: PUTF8Char; const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_vsscanf: function(const text: PUTF8Char; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;
  SDL_snprintf: function(text: PUTF8Char; maxlen: NativeUInt; const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_swprintf: function(text: PWideChar; maxlen: NativeUInt; const fmt: PWideChar): Integer varargs; cdecl;
  SDL_vsnprintf: function(text: PUTF8Char; maxlen: NativeUInt; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;
  SDL_vswprintf: function(text: PWideChar; maxlen: NativeUInt; const fmt: PWideChar; ap: Pointer): Integer; cdecl;
  SDL_asprintf: function(strp: PPUTF8Char; const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_vasprintf: function(strp: PPUTF8Char; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;
  SDL_srand: procedure(seed: Uint64); cdecl;
  SDL_rand: function(n: Sint32): Sint32; cdecl;
  SDL_randf: function(): Single; cdecl;
  SDL_rand_bits: function(): Uint32; cdecl;
  SDL_rand_r: function(state: PUint64; n: Sint32): Sint32; cdecl;
  SDL_randf_r: function(state: PUint64): Single; cdecl;
  SDL_rand_bits_r: function(state: PUint64): Uint32; cdecl;
  SDL_acos: function(x: Double): Double; cdecl;
  SDL_acosf: function(x: Single): Single; cdecl;
  SDL_asin: function(x: Double): Double; cdecl;
  SDL_asinf: function(x: Single): Single; cdecl;
  SDL_atan: function(x: Double): Double; cdecl;
  SDL_atanf: function(x: Single): Single; cdecl;
  SDL_atan2: function(y: Double; x: Double): Double; cdecl;
  SDL_atan2f: function(y: Single; x: Single): Single; cdecl;
  SDL_ceil: function(x: Double): Double; cdecl;
  SDL_ceilf: function(x: Single): Single; cdecl;
  SDL_copysign: function(x: Double; y: Double): Double; cdecl;
  SDL_copysignf: function(x: Single; y: Single): Single; cdecl;
  SDL_cos: function(x: Double): Double; cdecl;
  SDL_cosf: function(x: Single): Single; cdecl;
  SDL_exp: function(x: Double): Double; cdecl;
  SDL_expf: function(x: Single): Single; cdecl;
  SDL_fabs: function(x: Double): Double; cdecl;
  SDL_fabsf: function(x: Single): Single; cdecl;
  SDL_floor: function(x: Double): Double; cdecl;
  SDL_floorf: function(x: Single): Single; cdecl;
  SDL_trunc: function(x: Double): Double; cdecl;
  SDL_truncf: function(x: Single): Single; cdecl;
  SDL_fmod: function(x: Double; y: Double): Double; cdecl;
  SDL_fmodf: function(x: Single; y: Single): Single; cdecl;
  SDL_isinf: function(x: Double): Integer; cdecl;
  SDL_isinff: function(x: Single): Integer; cdecl;
  SDL_isnan: function(x: Double): Integer; cdecl;
  SDL_isnanf: function(x: Single): Integer; cdecl;
  SDL_log: function(x: Double): Double; cdecl;
  SDL_logf: function(x: Single): Single; cdecl;
  SDL_log10: function(x: Double): Double; cdecl;
  SDL_log10f: function(x: Single): Single; cdecl;
  SDL_modf: function(x: Double; y: PDouble): Double; cdecl;
  SDL_modff: function(x: Single; y: PSingle): Single; cdecl;
  SDL_pow: function(x: Double; y: Double): Double; cdecl;
  SDL_powf: function(x: Single; y: Single): Single; cdecl;
  SDL_round: function(x: Double): Double; cdecl;
  SDL_roundf: function(x: Single): Single; cdecl;
  SDL_lround: function(x: Double): Longint; cdecl;
  SDL_lroundf: function(x: Single): Longint; cdecl;
  SDL_scalbn: function(x: Double; n: Integer): Double; cdecl;
  SDL_scalbnf: function(x: Single; n: Integer): Single; cdecl;
  SDL_sin: function(x: Double): Double; cdecl;
  SDL_sinf: function(x: Single): Single; cdecl;
  SDL_sqrt: function(x: Double): Double; cdecl;
  SDL_sqrtf: function(x: Single): Single; cdecl;
  SDL_tan: function(x: Double): Double; cdecl;
  SDL_tanf: function(x: Single): Single; cdecl;
  SDL_iconv_open: function(const tocode: PUTF8Char; const fromcode: PUTF8Char): SDL_iconv_t; cdecl;
  SDL_iconv_close: function(cd: SDL_iconv_t): Integer; cdecl;
  SDL_iconv: function(cd: SDL_iconv_t; inbuf: PPUTF8Char; inbytesleft: PNativeUInt; outbuf: PPUTF8Char; outbytesleft: PNativeUInt): NativeUInt; cdecl;
  SDL_iconv_string: function(const tocode: PUTF8Char; const fromcode: PUTF8Char; const inbuf: PUTF8Char; inbytesleft: NativeUInt): PUTF8Char; cdecl;
  SDL_ReportAssertion: function(data: PSDL_AssertData; const func: PUTF8Char; const &file: PUTF8Char; line: Integer): SDL_AssertState; cdecl;
  SDL_SetAssertionHandler: procedure(handler: SDL_AssertionHandler; userdata: Pointer); cdecl;
  SDL_GetDefaultAssertionHandler: function(): SDL_AssertionHandler; cdecl;
  SDL_GetAssertionHandler: function(puserdata: PPointer): SDL_AssertionHandler; cdecl;
  SDL_GetAssertionReport: function(): PSDL_AssertData; cdecl;
  SDL_ResetAssertionReport: procedure(); cdecl;
  SDL_AsyncIOFromFile: function(const &file: PUTF8Char; const mode: PUTF8Char): PSDL_AsyncIO; cdecl;
  SDL_GetAsyncIOSize: function(asyncio: PSDL_AsyncIO): Sint64; cdecl;
  SDL_ReadAsyncIO: function(asyncio: PSDL_AsyncIO; ptr: Pointer; offset: Uint64; size: Uint64; queue: PSDL_AsyncIOQueue; userdata: Pointer): Boolean; cdecl;
  SDL_WriteAsyncIO: function(asyncio: PSDL_AsyncIO; ptr: Pointer; offset: Uint64; size: Uint64; queue: PSDL_AsyncIOQueue; userdata: Pointer): Boolean; cdecl;
  SDL_CloseAsyncIO: function(asyncio: PSDL_AsyncIO; flush: Boolean; queue: PSDL_AsyncIOQueue; userdata: Pointer): Boolean; cdecl;
  SDL_CreateAsyncIOQueue: function(): PSDL_AsyncIOQueue; cdecl;
  SDL_DestroyAsyncIOQueue: procedure(queue: PSDL_AsyncIOQueue); cdecl;
  SDL_GetAsyncIOResult: function(queue: PSDL_AsyncIOQueue; outcome: PSDL_AsyncIOOutcome): Boolean; cdecl;
  SDL_WaitAsyncIOResult: function(queue: PSDL_AsyncIOQueue; outcome: PSDL_AsyncIOOutcome; timeoutMS: Sint32): Boolean; cdecl;
  SDL_SignalAsyncIOQueue: procedure(queue: PSDL_AsyncIOQueue); cdecl;
  SDL_LoadFileAsync: function(const &file: PUTF8Char; queue: PSDL_AsyncIOQueue; userdata: Pointer): Boolean; cdecl;
  SDL_TryLockSpinlock: function(lock: PSDL_SpinLock): Boolean; cdecl;
  SDL_LockSpinlock: procedure(lock: PSDL_SpinLock); cdecl;
  SDL_UnlockSpinlock: procedure(lock: PSDL_SpinLock); cdecl;
  SDL_MemoryBarrierReleaseFunction: procedure(); cdecl;
  SDL_MemoryBarrierAcquireFunction: procedure(); cdecl;
  SDL_CompareAndSwapAtomicInt: function(a: PSDL_AtomicInt; oldval: Integer; newval: Integer): Boolean; cdecl;
  SDL_SetAtomicInt: function(a: PSDL_AtomicInt; v: Integer): Integer; cdecl;
  SDL_GetAtomicInt: function(a: PSDL_AtomicInt): Integer; cdecl;
  SDL_AddAtomicInt: function(a: PSDL_AtomicInt; v: Integer): Integer; cdecl;
  SDL_CompareAndSwapAtomicU32: function(a: PSDL_AtomicU32; oldval: Uint32; newval: Uint32): Boolean; cdecl;
  SDL_SetAtomicU32: function(a: PSDL_AtomicU32; v: Uint32): Uint32; cdecl;
  SDL_GetAtomicU32: function(a: PSDL_AtomicU32): Uint32; cdecl;
  SDL_CompareAndSwapAtomicPointer: function(a: PPointer; oldval: Pointer; newval: Pointer): Boolean; cdecl;
  SDL_SetAtomicPointer: function(a: PPointer; v: Pointer): Pointer; cdecl;
  SDL_GetAtomicPointer: function(a: PPointer): Pointer; cdecl;
  SDL_SetError: function(const fmt: PUTF8Char): Boolean varargs; cdecl;
  SDL_SetErrorV: function(const fmt: PUTF8Char; ap: Pointer): Boolean; cdecl;
  SDL_OutOfMemory: function(): Boolean; cdecl;
  SDL_GetError: function(): PUTF8Char; cdecl;
  SDL_ClearError: function(): Boolean; cdecl;
  SDL_GetGlobalProperties: function(): SDL_PropertiesID; cdecl;
  SDL_CreateProperties: function(): SDL_PropertiesID; cdecl;
  SDL_CopyProperties: function(src: SDL_PropertiesID; dst: SDL_PropertiesID): Boolean; cdecl;
  SDL_LockProperties: function(props: SDL_PropertiesID): Boolean; cdecl;
  SDL_UnlockProperties: procedure(props: SDL_PropertiesID); cdecl;
  SDL_SetPointerPropertyWithCleanup: function(props: SDL_PropertiesID; const name: PUTF8Char; value: Pointer; cleanup: SDL_CleanupPropertyCallback; userdata: Pointer): Boolean; cdecl;
  SDL_SetPointerProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; value: Pointer): Boolean; cdecl;
  SDL_SetStringProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; const value: PUTF8Char): Boolean; cdecl;
  SDL_SetNumberProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; value: Sint64): Boolean; cdecl;
  SDL_SetFloatProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; value: Single): Boolean; cdecl;
  SDL_SetBooleanProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; value: Boolean): Boolean; cdecl;
  SDL_HasProperty: function(props: SDL_PropertiesID; const name: PUTF8Char): Boolean; cdecl;
  SDL_GetPropertyType: function(props: SDL_PropertiesID; const name: PUTF8Char): SDL_PropertyType; cdecl;
  SDL_GetPointerProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; default_value: Pointer): Pointer; cdecl;
  SDL_GetStringProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; const default_value: PUTF8Char): PUTF8Char; cdecl;
  SDL_GetNumberProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; default_value: Sint64): Sint64; cdecl;
  SDL_GetFloatProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; default_value: Single): Single; cdecl;
  SDL_GetBooleanProperty: function(props: SDL_PropertiesID; const name: PUTF8Char; default_value: Boolean): Boolean; cdecl;
  SDL_ClearProperty: function(props: SDL_PropertiesID; const name: PUTF8Char): Boolean; cdecl;
  SDL_EnumerateProperties: function(props: SDL_PropertiesID; callback: SDL_EnumeratePropertiesCallback; userdata: Pointer): Boolean; cdecl;
  SDL_DestroyProperties: procedure(props: SDL_PropertiesID); cdecl;
  SDL_CreateThreadRuntime: function(fn: SDL_ThreadFunction; const name: PUTF8Char; data: Pointer; pfnBeginThread: SDL_FunctionPointer; pfnEndThread: SDL_FunctionPointer): PSDL_Thread; cdecl;
  SDL_CreateThreadWithPropertiesRuntime: function(props: SDL_PropertiesID; pfnBeginThread: SDL_FunctionPointer; pfnEndThread: SDL_FunctionPointer): PSDL_Thread; cdecl;
  SDL_GetThreadName: function(thread: PSDL_Thread): PUTF8Char; cdecl;
  SDL_GetCurrentThreadID: function(): SDL_ThreadID; cdecl;
  SDL_GetThreadID: function(thread: PSDL_Thread): SDL_ThreadID; cdecl;
  SDL_SetCurrentThreadPriority: function(priority: SDL_ThreadPriority): Boolean; cdecl;
  SDL_WaitThread: procedure(thread: PSDL_Thread; status: PInteger); cdecl;
  SDL_DetachThread: procedure(thread: PSDL_Thread); cdecl;
  SDL_GetTLS: function(id: PSDL_TLSID): Pointer; cdecl;
  SDL_SetTLS: function(id: PSDL_TLSID; const value: Pointer; &destructor: SDL_TLSDestructorCallback): Boolean; cdecl;
  SDL_CleanupTLS: procedure(); cdecl;
  SDL_CreateMutex: function(): PSDL_Mutex; cdecl;
  SDL_LockMutex: procedure(mutex: PSDL_Mutex); cdecl;
  SDL_TryLockMutex: function(mutex: PSDL_Mutex): Boolean; cdecl;
  SDL_UnlockMutex: procedure(mutex: PSDL_Mutex); cdecl;
  SDL_DestroyMutex: procedure(mutex: PSDL_Mutex); cdecl;
  SDL_CreateRWLock: function(): PSDL_RWLock; cdecl;
  SDL_LockRWLockForReading: procedure(rwlock: PSDL_RWLock); cdecl;
  SDL_LockRWLockForWriting: procedure(rwlock: PSDL_RWLock); cdecl;
  SDL_TryLockRWLockForReading: function(rwlock: PSDL_RWLock): Boolean; cdecl;
  SDL_TryLockRWLockForWriting: function(rwlock: PSDL_RWLock): Boolean; cdecl;
  SDL_UnlockRWLock: procedure(rwlock: PSDL_RWLock); cdecl;
  SDL_DestroyRWLock: procedure(rwlock: PSDL_RWLock); cdecl;
  SDL_CreateSemaphore: function(initial_value: Uint32): PSDL_Semaphore; cdecl;
  SDL_DestroySemaphore: procedure(sem: PSDL_Semaphore); cdecl;
  SDL_WaitSemaphore: procedure(sem: PSDL_Semaphore); cdecl;
  SDL_TryWaitSemaphore: function(sem: PSDL_Semaphore): Boolean; cdecl;
  SDL_WaitSemaphoreTimeout: function(sem: PSDL_Semaphore; timeoutMS: Sint32): Boolean; cdecl;
  SDL_SignalSemaphore: procedure(sem: PSDL_Semaphore); cdecl;
  SDL_GetSemaphoreValue: function(sem: PSDL_Semaphore): Uint32; cdecl;
  SDL_CreateCondition: function(): PSDL_Condition; cdecl;
  SDL_DestroyCondition: procedure(cond: PSDL_Condition); cdecl;
  SDL_SignalCondition: procedure(cond: PSDL_Condition); cdecl;
  SDL_BroadcastCondition: procedure(cond: PSDL_Condition); cdecl;
  SDL_WaitCondition: procedure(cond: PSDL_Condition; mutex: PSDL_Mutex); cdecl;
  SDL_WaitConditionTimeout: function(cond: PSDL_Condition; mutex: PSDL_Mutex; timeoutMS: Sint32): Boolean; cdecl;
  SDL_ShouldInit: function(state: PSDL_InitState): Boolean; cdecl;
  SDL_ShouldQuit: function(state: PSDL_InitState): Boolean; cdecl;
  SDL_SetInitialized: procedure(state: PSDL_InitState; initialized: Boolean); cdecl;
  SDL_IOFromFile: function(const &file: PUTF8Char; const mode: PUTF8Char): PSDL_IOStream; cdecl;
  SDL_IOFromMem: function(mem: Pointer; size: NativeUInt): PSDL_IOStream; cdecl;
  SDL_IOFromConstMem: function(const mem: Pointer; size: NativeUInt): PSDL_IOStream; cdecl;
  SDL_IOFromDynamicMem: function(): PSDL_IOStream; cdecl;
  SDL_OpenIO: function(const iface: PSDL_IOStreamInterface; userdata: Pointer): PSDL_IOStream; cdecl;
  SDL_CloseIO: function(context: PSDL_IOStream): Boolean; cdecl;
  SDL_GetIOProperties: function(context: PSDL_IOStream): SDL_PropertiesID; cdecl;
  SDL_GetIOStatus: function(context: PSDL_IOStream): SDL_IOStatus; cdecl;
  SDL_GetIOSize: function(context: PSDL_IOStream): Sint64; cdecl;
  SDL_SeekIO: function(context: PSDL_IOStream; offset: Sint64; whence: SDL_IOWhence): Sint64; cdecl;
  SDL_TellIO: function(context: PSDL_IOStream): Sint64; cdecl;
  SDL_ReadIO: function(context: PSDL_IOStream; ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
  SDL_WriteIO: function(context: PSDL_IOStream; const ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
  SDL_IOprintf: function(context: PSDL_IOStream; const fmt: PUTF8Char): NativeUInt varargs; cdecl;
  SDL_IOvprintf: function(context: PSDL_IOStream; const fmt: PUTF8Char; ap: Pointer): NativeUInt; cdecl;
  SDL_FlushIO: function(context: PSDL_IOStream): Boolean; cdecl;
  SDL_LoadFile_IO: function(src: PSDL_IOStream; datasize: PNativeUInt; closeio: Boolean): Pointer; cdecl;
  SDL_LoadFile: function(const &file: PUTF8Char; datasize: PNativeUInt): Pointer; cdecl;
  SDL_SaveFile_IO: function(src: PSDL_IOStream; const data: Pointer; datasize: NativeUInt; closeio: Boolean): Boolean; cdecl;
  SDL_SaveFile: function(const &file: PUTF8Char; const data: Pointer; datasize: NativeUInt): Boolean; cdecl;
  SDL_ReadU8: function(src: PSDL_IOStream; value: PUint8): Boolean; cdecl;
  SDL_ReadS8: function(src: PSDL_IOStream; value: PSint8): Boolean; cdecl;
  SDL_ReadU16LE: function(src: PSDL_IOStream; value: PUint16): Boolean; cdecl;
  SDL_ReadS16LE: function(src: PSDL_IOStream; value: PSint16): Boolean; cdecl;
  SDL_ReadU16BE: function(src: PSDL_IOStream; value: PUint16): Boolean; cdecl;
  SDL_ReadS16BE: function(src: PSDL_IOStream; value: PSint16): Boolean; cdecl;
  SDL_ReadU32LE: function(src: PSDL_IOStream; value: PUint32): Boolean; cdecl;
  SDL_ReadS32LE: function(src: PSDL_IOStream; value: PSint32): Boolean; cdecl;
  SDL_ReadU32BE: function(src: PSDL_IOStream; value: PUint32): Boolean; cdecl;
  SDL_ReadS32BE: function(src: PSDL_IOStream; value: PSint32): Boolean; cdecl;
  SDL_ReadU64LE: function(src: PSDL_IOStream; value: PUint64): Boolean; cdecl;
  SDL_ReadS64LE: function(src: PSDL_IOStream; value: PSint64): Boolean; cdecl;
  SDL_ReadU64BE: function(src: PSDL_IOStream; value: PUint64): Boolean; cdecl;
  SDL_ReadS64BE: function(src: PSDL_IOStream; value: PSint64): Boolean; cdecl;
  SDL_WriteU8: function(dst: PSDL_IOStream; value: Uint8): Boolean; cdecl;
  SDL_WriteS8: function(dst: PSDL_IOStream; value: Sint8): Boolean; cdecl;
  SDL_WriteU16LE: function(dst: PSDL_IOStream; value: Uint16): Boolean; cdecl;
  SDL_WriteS16LE: function(dst: PSDL_IOStream; value: Sint16): Boolean; cdecl;
  SDL_WriteU16BE: function(dst: PSDL_IOStream; value: Uint16): Boolean; cdecl;
  SDL_WriteS16BE: function(dst: PSDL_IOStream; value: Sint16): Boolean; cdecl;
  SDL_WriteU32LE: function(dst: PSDL_IOStream; value: Uint32): Boolean; cdecl;
  SDL_WriteS32LE: function(dst: PSDL_IOStream; value: Sint32): Boolean; cdecl;
  SDL_WriteU32BE: function(dst: PSDL_IOStream; value: Uint32): Boolean; cdecl;
  SDL_WriteS32BE: function(dst: PSDL_IOStream; value: Sint32): Boolean; cdecl;
  SDL_WriteU64LE: function(dst: PSDL_IOStream; value: Uint64): Boolean; cdecl;
  SDL_WriteS64LE: function(dst: PSDL_IOStream; value: Sint64): Boolean; cdecl;
  SDL_WriteU64BE: function(dst: PSDL_IOStream; value: Uint64): Boolean; cdecl;
  SDL_WriteS64BE: function(dst: PSDL_IOStream; value: Sint64): Boolean; cdecl;
  SDL_GetNumAudioDrivers: function(): Integer; cdecl;
  SDL_GetAudioDriver: function(index: Integer): PUTF8Char; cdecl;
  SDL_GetCurrentAudioDriver: function(): PUTF8Char; cdecl;
  SDL_GetAudioPlaybackDevices: function(count: PInteger): PSDL_AudioDeviceID; cdecl;
  SDL_GetAudioRecordingDevices: function(count: PInteger): PSDL_AudioDeviceID; cdecl;
  SDL_GetAudioDeviceName: function(devid: SDL_AudioDeviceID): PUTF8Char; cdecl;
  SDL_GetAudioDeviceFormat: function(devid: SDL_AudioDeviceID; spec: PSDL_AudioSpec; sample_frames: PInteger): Boolean; cdecl;
  SDL_GetAudioDeviceChannelMap: function(devid: SDL_AudioDeviceID; count: PInteger): PInteger; cdecl;
  SDL_OpenAudioDevice: function(devid: SDL_AudioDeviceID; const spec: PSDL_AudioSpec): SDL_AudioDeviceID; cdecl;
  SDL_IsAudioDevicePhysical: function(devid: SDL_AudioDeviceID): Boolean; cdecl;
  SDL_IsAudioDevicePlayback: function(devid: SDL_AudioDeviceID): Boolean; cdecl;
  SDL_PauseAudioDevice: function(dev: SDL_AudioDeviceID): Boolean; cdecl;
  SDL_ResumeAudioDevice: function(dev: SDL_AudioDeviceID): Boolean; cdecl;
  SDL_AudioDevicePaused: function(dev: SDL_AudioDeviceID): Boolean; cdecl;
  SDL_GetAudioDeviceGain: function(devid: SDL_AudioDeviceID): Single; cdecl;
  SDL_SetAudioDeviceGain: function(devid: SDL_AudioDeviceID; gain: Single): Boolean; cdecl;
  SDL_CloseAudioDevice: procedure(devid: SDL_AudioDeviceID); cdecl;
  SDL_BindAudioStreams: function(devid: SDL_AudioDeviceID; streams: PPSDL_AudioStream; num_streams: Integer): Boolean; cdecl;
  SDL_BindAudioStream: function(devid: SDL_AudioDeviceID; stream: PSDL_AudioStream): Boolean; cdecl;
  SDL_UnbindAudioStreams: procedure(streams: PPSDL_AudioStream; num_streams: Integer); cdecl;
  SDL_UnbindAudioStream: procedure(stream: PSDL_AudioStream); cdecl;
  SDL_GetAudioStreamDevice: function(stream: PSDL_AudioStream): SDL_AudioDeviceID; cdecl;
  SDL_CreateAudioStream: function(const src_spec: PSDL_AudioSpec; const dst_spec: PSDL_AudioSpec): PSDL_AudioStream; cdecl;
  SDL_GetAudioStreamProperties: function(stream: PSDL_AudioStream): SDL_PropertiesID; cdecl;
  SDL_GetAudioStreamFormat: function(stream: PSDL_AudioStream; src_spec: PSDL_AudioSpec; dst_spec: PSDL_AudioSpec): Boolean; cdecl;
  SDL_SetAudioStreamFormat: function(stream: PSDL_AudioStream; const src_spec: PSDL_AudioSpec; const dst_spec: PSDL_AudioSpec): Boolean; cdecl;
  SDL_GetAudioStreamFrequencyRatio: function(stream: PSDL_AudioStream): Single; cdecl;
  SDL_SetAudioStreamFrequencyRatio: function(stream: PSDL_AudioStream; ratio: Single): Boolean; cdecl;
  SDL_GetAudioStreamGain: function(stream: PSDL_AudioStream): Single; cdecl;
  SDL_SetAudioStreamGain: function(stream: PSDL_AudioStream; gain: Single): Boolean; cdecl;
  SDL_GetAudioStreamInputChannelMap: function(stream: PSDL_AudioStream; count: PInteger): PInteger; cdecl;
  SDL_GetAudioStreamOutputChannelMap: function(stream: PSDL_AudioStream; count: PInteger): PInteger; cdecl;
  SDL_SetAudioStreamInputChannelMap: function(stream: PSDL_AudioStream; const chmap: PInteger; count: Integer): Boolean; cdecl;
  SDL_SetAudioStreamOutputChannelMap: function(stream: PSDL_AudioStream; const chmap: PInteger; count: Integer): Boolean; cdecl;
  SDL_PutAudioStreamData: function(stream: PSDL_AudioStream; const buf: Pointer; len: Integer): Boolean; cdecl;
  SDL_GetAudioStreamData: function(stream: PSDL_AudioStream; buf: Pointer; len: Integer): Integer; cdecl;
  SDL_GetAudioStreamAvailable: function(stream: PSDL_AudioStream): Integer; cdecl;
  SDL_GetAudioStreamQueued: function(stream: PSDL_AudioStream): Integer; cdecl;
  SDL_FlushAudioStream: function(stream: PSDL_AudioStream): Boolean; cdecl;
  SDL_ClearAudioStream: function(stream: PSDL_AudioStream): Boolean; cdecl;
  SDL_PauseAudioStreamDevice: function(stream: PSDL_AudioStream): Boolean; cdecl;
  SDL_ResumeAudioStreamDevice: function(stream: PSDL_AudioStream): Boolean; cdecl;
  SDL_LockAudioStream: function(stream: PSDL_AudioStream): Boolean; cdecl;
  SDL_UnlockAudioStream: function(stream: PSDL_AudioStream): Boolean; cdecl;
  SDL_SetAudioStreamGetCallback: function(stream: PSDL_AudioStream; callback: SDL_AudioStreamCallback; userdata: Pointer): Boolean; cdecl;
  SDL_SetAudioStreamPutCallback: function(stream: PSDL_AudioStream; callback: SDL_AudioStreamCallback; userdata: Pointer): Boolean; cdecl;
  SDL_DestroyAudioStream: procedure(stream: PSDL_AudioStream); cdecl;
  SDL_OpenAudioDeviceStream: function(devid: SDL_AudioDeviceID; const spec: PSDL_AudioSpec; callback: SDL_AudioStreamCallback; userdata: Pointer): PSDL_AudioStream; cdecl;
  SDL_SetAudioPostmixCallback: function(devid: SDL_AudioDeviceID; callback: SDL_AudioPostmixCallback; userdata: Pointer): Boolean; cdecl;
  SDL_LoadWAV_IO: function(src: PSDL_IOStream; closeio: Boolean; spec: PSDL_AudioSpec; audio_buf: PPUint8; audio_len: PUint32): Boolean; cdecl;
  SDL_LoadWAV: function(const path: PUTF8Char; spec: PSDL_AudioSpec; audio_buf: PPUint8; audio_len: PUint32): Boolean; cdecl;
  SDL_MixAudio: function(dst: PUint8; const src: PUint8; format: SDL_AudioFormat; len: Uint32; volume: Single): Boolean; cdecl;
  SDL_ConvertAudioSamples: function(const src_spec: PSDL_AudioSpec; const src_data: PUint8; src_len: Integer; const dst_spec: PSDL_AudioSpec; dst_data: PPUint8; dst_len: PInteger): Boolean; cdecl;
  SDL_GetAudioFormatName: function(format: SDL_AudioFormat): PUTF8Char; cdecl;
  SDL_GetSilenceValueForFormat: function(format: SDL_AudioFormat): Integer; cdecl;
  SDL_ComposeCustomBlendMode: function(srcColorFactor: SDL_BlendFactor; dstColorFactor: SDL_BlendFactor; colorOperation: SDL_BlendOperation; srcAlphaFactor: SDL_BlendFactor; dstAlphaFactor: SDL_BlendFactor; alphaOperation: SDL_BlendOperation): SDL_BlendMode; cdecl;
  SDL_GetPixelFormatName: function(format: SDL_PixelFormat): PUTF8Char; cdecl;
  SDL_GetMasksForPixelFormat: function(format: SDL_PixelFormat; bpp: PInteger; Rmask: PUint32; Gmask: PUint32; Bmask: PUint32; Amask: PUint32): Boolean; cdecl;
  SDL_GetPixelFormatForMasks: function(bpp: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): SDL_PixelFormat; cdecl;
  SDL_GetPixelFormatDetails: function(format: SDL_PixelFormat): PSDL_PixelFormatDetails; cdecl;
  SDL_CreatePalette: function(ncolors: Integer): PSDL_Palette; cdecl;
  SDL_SetPaletteColors: function(palette: PSDL_Palette; const colors: PSDL_Color; firstcolor: Integer; ncolors: Integer): Boolean; cdecl;
  SDL_DestroyPalette: procedure(palette: PSDL_Palette); cdecl;
  SDL_MapRGB: function(const format: PSDL_PixelFormatDetails; const palette: PSDL_Palette; r: Uint8; g: Uint8; b: Uint8): Uint32; cdecl;
  SDL_MapRGBA: function(const format: PSDL_PixelFormatDetails; const palette: PSDL_Palette; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Uint32; cdecl;
  SDL_GetRGB: procedure(pixel: Uint32; const format: PSDL_PixelFormatDetails; const palette: PSDL_Palette; r: PUint8; g: PUint8; b: PUint8); cdecl;
  SDL_GetRGBA: procedure(pixel: Uint32; const format: PSDL_PixelFormatDetails; const palette: PSDL_Palette; r: PUint8; g: PUint8; b: PUint8; a: PUint8); cdecl;
  SDL_HasRectIntersection: function(const A: PSDL_Rect; const B: PSDL_Rect): Boolean; cdecl;
  SDL_GetRectIntersection: function(const A: PSDL_Rect; const B: PSDL_Rect; result: PSDL_Rect): Boolean; cdecl;
  SDL_GetRectUnion: function(const A: PSDL_Rect; const B: PSDL_Rect; result: PSDL_Rect): Boolean; cdecl;
  SDL_GetRectEnclosingPoints: function(const points: PSDL_Point; count: Integer; const clip: PSDL_Rect; result: PSDL_Rect): Boolean; cdecl;
  SDL_GetRectAndLineIntersection: function(const rect: PSDL_Rect; X1: PInteger; Y1: PInteger; X2: PInteger; Y2: PInteger): Boolean; cdecl;
  SDL_HasRectIntersectionFloat: function(const A: PSDL_FRect; const B: PSDL_FRect): Boolean; cdecl;
  SDL_GetRectIntersectionFloat: function(const A: PSDL_FRect; const B: PSDL_FRect; result: PSDL_FRect): Boolean; cdecl;
  SDL_GetRectUnionFloat: function(const A: PSDL_FRect; const B: PSDL_FRect; result: PSDL_FRect): Boolean; cdecl;
  SDL_GetRectEnclosingPointsFloat: function(const points: PSDL_FPoint; count: Integer; const clip: PSDL_FRect; result: PSDL_FRect): Boolean; cdecl;
  SDL_GetRectAndLineIntersectionFloat: function(const rect: PSDL_FRect; X1: PSingle; Y1: PSingle; X2: PSingle; Y2: PSingle): Boolean; cdecl;
  SDL_CreateSurface: function(width: Integer; height: Integer; format: SDL_PixelFormat): PSDL_Surface; cdecl;
  SDL_CreateSurfaceFrom: function(width: Integer; height: Integer; format: SDL_PixelFormat; pixels: Pointer; pitch: Integer): PSDL_Surface; cdecl;
  SDL_DestroySurface: procedure(surface: PSDL_Surface); cdecl;
  SDL_GetSurfaceProperties: function(surface: PSDL_Surface): SDL_PropertiesID; cdecl;
  SDL_SetSurfaceColorspace: function(surface: PSDL_Surface; colorspace: SDL_Colorspace): Boolean; cdecl;
  SDL_GetSurfaceColorspace: function(surface: PSDL_Surface): SDL_Colorspace; cdecl;
  SDL_CreateSurfacePalette: function(surface: PSDL_Surface): PSDL_Palette; cdecl;
  SDL_SetSurfacePalette: function(surface: PSDL_Surface; palette: PSDL_Palette): Boolean; cdecl;
  SDL_GetSurfacePalette: function(surface: PSDL_Surface): PSDL_Palette; cdecl;
  SDL_AddSurfaceAlternateImage: function(surface: PSDL_Surface; image: PSDL_Surface): Boolean; cdecl;
  SDL_SurfaceHasAlternateImages: function(surface: PSDL_Surface): Boolean; cdecl;
  SDL_GetSurfaceImages: function(surface: PSDL_Surface; count: PInteger): PPSDL_Surface; cdecl;
  SDL_RemoveSurfaceAlternateImages: procedure(surface: PSDL_Surface); cdecl;
  SDL_LockSurface: function(surface: PSDL_Surface): Boolean; cdecl;
  SDL_UnlockSurface: procedure(surface: PSDL_Surface); cdecl;
  SDL_LoadBMP_IO: function(src: PSDL_IOStream; closeio: Boolean): PSDL_Surface; cdecl;
  SDL_LoadBMP: function(const &file: PUTF8Char): PSDL_Surface; cdecl;
  SDL_SaveBMP_IO: function(surface: PSDL_Surface; dst: PSDL_IOStream; closeio: Boolean): Boolean; cdecl;
  SDL_SaveBMP: function(surface: PSDL_Surface; const &file: PUTF8Char): Boolean; cdecl;
  SDL_SetSurfaceRLE: function(surface: PSDL_Surface; enabled: Boolean): Boolean; cdecl;
  SDL_SurfaceHasRLE: function(surface: PSDL_Surface): Boolean; cdecl;
  SDL_SetSurfaceColorKey: function(surface: PSDL_Surface; enabled: Boolean; key: Uint32): Boolean; cdecl;
  SDL_SurfaceHasColorKey: function(surface: PSDL_Surface): Boolean; cdecl;
  SDL_GetSurfaceColorKey: function(surface: PSDL_Surface; key: PUint32): Boolean; cdecl;
  SDL_SetSurfaceColorMod: function(surface: PSDL_Surface; r: Uint8; g: Uint8; b: Uint8): Boolean; cdecl;
  SDL_GetSurfaceColorMod: function(surface: PSDL_Surface; r: PUint8; g: PUint8; b: PUint8): Boolean; cdecl;
  SDL_SetSurfaceAlphaMod: function(surface: PSDL_Surface; alpha: Uint8): Boolean; cdecl;
  SDL_GetSurfaceAlphaMod: function(surface: PSDL_Surface; alpha: PUint8): Boolean; cdecl;
  SDL_SetSurfaceBlendMode: function(surface: PSDL_Surface; blendMode: SDL_BlendMode): Boolean; cdecl;
  SDL_GetSurfaceBlendMode: function(surface: PSDL_Surface; blendMode: PSDL_BlendMode): Boolean; cdecl;
  SDL_SetSurfaceClipRect: function(surface: PSDL_Surface; const rect: PSDL_Rect): Boolean; cdecl;
  SDL_GetSurfaceClipRect: function(surface: PSDL_Surface; rect: PSDL_Rect): Boolean; cdecl;
  SDL_FlipSurface: function(surface: PSDL_Surface; flip: SDL_FlipMode): Boolean; cdecl;
  SDL_DuplicateSurface: function(surface: PSDL_Surface): PSDL_Surface; cdecl;
  SDL_ScaleSurface: function(surface: PSDL_Surface; width: Integer; height: Integer; scaleMode: SDL_ScaleMode): PSDL_Surface; cdecl;
  SDL_ConvertSurface: function(surface: PSDL_Surface; format: SDL_PixelFormat): PSDL_Surface; cdecl;
  SDL_ConvertSurfaceAndColorspace: function(surface: PSDL_Surface; format: SDL_PixelFormat; palette: PSDL_Palette; colorspace: SDL_Colorspace; props: SDL_PropertiesID): PSDL_Surface; cdecl;
  SDL_ConvertPixels: function(width: Integer; height: Integer; src_format: SDL_PixelFormat; const src: Pointer; src_pitch: Integer; dst_format: SDL_PixelFormat; dst: Pointer; dst_pitch: Integer): Boolean; cdecl;
  SDL_ConvertPixelsAndColorspace: function(width: Integer; height: Integer; src_format: SDL_PixelFormat; src_colorspace: SDL_Colorspace; src_properties: SDL_PropertiesID; const src: Pointer; src_pitch: Integer; dst_format: SDL_PixelFormat; dst_colorspace: SDL_Colorspace; dst_properties: SDL_PropertiesID; dst: Pointer; dst_pitch: Integer): Boolean; cdecl;
  SDL_PremultiplyAlpha: function(width: Integer; height: Integer; src_format: SDL_PixelFormat; const src: Pointer; src_pitch: Integer; dst_format: SDL_PixelFormat; dst: Pointer; dst_pitch: Integer; linear: Boolean): Boolean; cdecl;
  SDL_PremultiplySurfaceAlpha: function(surface: PSDL_Surface; linear: Boolean): Boolean; cdecl;
  SDL_ClearSurface: function(surface: PSDL_Surface; r: Single; g: Single; b: Single; a: Single): Boolean; cdecl;
  SDL_FillSurfaceRect: function(dst: PSDL_Surface; const rect: PSDL_Rect; color: Uint32): Boolean; cdecl;
  SDL_FillSurfaceRects: function(dst: PSDL_Surface; const rects: PSDL_Rect; count: Integer; color: Uint32): Boolean; cdecl;
  SDL_BlitSurface: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect): Boolean; cdecl;
  SDL_BlitSurfaceUnchecked: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect): Boolean; cdecl;
  SDL_BlitSurfaceScaled: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect; scaleMode: SDL_ScaleMode): Boolean; cdecl;
  SDL_BlitSurfaceUncheckedScaled: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect; scaleMode: SDL_ScaleMode): Boolean; cdecl;
  SDL_BlitSurfaceTiled: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect): Boolean; cdecl;
  SDL_BlitSurfaceTiledWithScale: function(src: PSDL_Surface; const srcrect: PSDL_Rect; scale: Single; scaleMode: SDL_ScaleMode; dst: PSDL_Surface; const dstrect: PSDL_Rect): Boolean; cdecl;
  SDL_BlitSurface9Grid: function(src: PSDL_Surface; const srcrect: PSDL_Rect; left_width: Integer; right_width: Integer; top_height: Integer; bottom_height: Integer; scale: Single; scaleMode: SDL_ScaleMode; dst: PSDL_Surface; const dstrect: PSDL_Rect): Boolean; cdecl;
  SDL_MapSurfaceRGB: function(surface: PSDL_Surface; r: Uint8; g: Uint8; b: Uint8): Uint32; cdecl;
  SDL_MapSurfaceRGBA: function(surface: PSDL_Surface; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Uint32; cdecl;
  SDL_ReadSurfacePixel: function(surface: PSDL_Surface; x: Integer; y: Integer; r: PUint8; g: PUint8; b: PUint8; a: PUint8): Boolean; cdecl;
  SDL_ReadSurfacePixelFloat: function(surface: PSDL_Surface; x: Integer; y: Integer; r: PSingle; g: PSingle; b: PSingle; a: PSingle): Boolean; cdecl;
  SDL_WriteSurfacePixel: function(surface: PSDL_Surface; x: Integer; y: Integer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Boolean; cdecl;
  SDL_WriteSurfacePixelFloat: function(surface: PSDL_Surface; x: Integer; y: Integer; r: Single; g: Single; b: Single; a: Single): Boolean; cdecl;
  SDL_GetNumCameraDrivers: function(): Integer; cdecl;
  SDL_GetCameraDriver: function(index: Integer): PUTF8Char; cdecl;
  SDL_GetCurrentCameraDriver: function(): PUTF8Char; cdecl;
  SDL_GetCameras: function(count: PInteger): PSDL_CameraID; cdecl;
  SDL_GetCameraSupportedFormats: function(devid: SDL_CameraID; count: PInteger): PPSDL_CameraSpec; cdecl;
  SDL_GetCameraName: function(instance_id: SDL_CameraID): PUTF8Char; cdecl;
  SDL_GetCameraPosition: function(instance_id: SDL_CameraID): SDL_CameraPosition; cdecl;
  SDL_OpenCamera: function(instance_id: SDL_CameraID; const spec: PSDL_CameraSpec): PSDL_Camera; cdecl;
  SDL_GetCameraPermissionState: function(camera: PSDL_Camera): Integer; cdecl;
  SDL_GetCameraID: function(camera: PSDL_Camera): SDL_CameraID; cdecl;
  SDL_GetCameraProperties: function(camera: PSDL_Camera): SDL_PropertiesID; cdecl;
  SDL_GetCameraFormat: function(camera: PSDL_Camera; spec: PSDL_CameraSpec): Boolean; cdecl;
  SDL_AcquireCameraFrame: function(camera: PSDL_Camera; timestampNS: PUint64): PSDL_Surface; cdecl;
  SDL_ReleaseCameraFrame: procedure(camera: PSDL_Camera; frame: PSDL_Surface); cdecl;
  SDL_CloseCamera: procedure(camera: PSDL_Camera); cdecl;
  SDL_SetClipboardText: function(const text: PUTF8Char): Boolean; cdecl;
  SDL_GetClipboardText: function(): PUTF8Char; cdecl;
  SDL_HasClipboardText: function(): Boolean; cdecl;
  SDL_SetPrimarySelectionText: function(const text: PUTF8Char): Boolean; cdecl;
  SDL_GetPrimarySelectionText: function(): PUTF8Char; cdecl;
  SDL_HasPrimarySelectionText: function(): Boolean; cdecl;
  SDL_SetClipboardData: function(callback: SDL_ClipboardDataCallback; cleanup: SDL_ClipboardCleanupCallback; userdata: Pointer; mime_types: PPUTF8Char; num_mime_types: NativeUInt): Boolean; cdecl;
  SDL_ClearClipboardData: function(): Boolean; cdecl;
  SDL_GetClipboardData: function(const mime_type: PUTF8Char; size: PNativeUInt): Pointer; cdecl;
  SDL_HasClipboardData: function(const mime_type: PUTF8Char): Boolean; cdecl;
  SDL_GetClipboardMimeTypes: function(num_mime_types: PNativeUInt): PPUTF8Char; cdecl;
  SDL_GetNumLogicalCPUCores: function(): Integer; cdecl;
  SDL_GetCPUCacheLineSize: function(): Integer; cdecl;
  SDL_HasAltiVec: function(): Boolean; cdecl;
  SDL_HasMMX: function(): Boolean; cdecl;
  SDL_HasSSE: function(): Boolean; cdecl;
  SDL_HasSSE2: function(): Boolean; cdecl;
  SDL_HasSSE3: function(): Boolean; cdecl;
  SDL_HasSSE41: function(): Boolean; cdecl;
  SDL_HasSSE42: function(): Boolean; cdecl;
  SDL_HasAVX: function(): Boolean; cdecl;
  SDL_HasAVX2: function(): Boolean; cdecl;
  SDL_HasAVX512F: function(): Boolean; cdecl;
  SDL_HasARMSIMD: function(): Boolean; cdecl;
  SDL_HasNEON: function(): Boolean; cdecl;
  SDL_HasLSX: function(): Boolean; cdecl;
  SDL_HasLASX: function(): Boolean; cdecl;
  SDL_GetSystemRAM: function(): Integer; cdecl;
  SDL_GetSIMDAlignment: function(): NativeUInt; cdecl;
  SDL_GetNumVideoDrivers: function(): Integer; cdecl;
  SDL_GetVideoDriver: function(index: Integer): PUTF8Char; cdecl;
  SDL_GetCurrentVideoDriver: function(): PUTF8Char; cdecl;
  SDL_GetSystemTheme: function(): SDL_SystemTheme; cdecl;
  SDL_GetDisplays: function(count: PInteger): PSDL_DisplayID; cdecl;
  SDL_GetPrimaryDisplay: function(): SDL_DisplayID; cdecl;
  SDL_GetDisplayProperties: function(displayID: SDL_DisplayID): SDL_PropertiesID; cdecl;
  SDL_GetDisplayName: function(displayID: SDL_DisplayID): PUTF8Char; cdecl;
  SDL_GetDisplayBounds: function(displayID: SDL_DisplayID; rect: PSDL_Rect): Boolean; cdecl;
  SDL_GetDisplayUsableBounds: function(displayID: SDL_DisplayID; rect: PSDL_Rect): Boolean; cdecl;
  SDL_GetNaturalDisplayOrientation: function(displayID: SDL_DisplayID): SDL_DisplayOrientation; cdecl;
  SDL_GetCurrentDisplayOrientation: function(displayID: SDL_DisplayID): SDL_DisplayOrientation; cdecl;
  SDL_GetDisplayContentScale: function(displayID: SDL_DisplayID): Single; cdecl;
  SDL_GetFullscreenDisplayModes: function(displayID: SDL_DisplayID; count: PInteger): PPSDL_DisplayMode; cdecl;
  SDL_GetClosestFullscreenDisplayMode: function(displayID: SDL_DisplayID; w: Integer; h: Integer; refresh_rate: Single; include_high_density_modes: Boolean; closest: PSDL_DisplayMode): Boolean; cdecl;
  SDL_GetDesktopDisplayMode: function(displayID: SDL_DisplayID): PSDL_DisplayMode; cdecl;
  SDL_GetCurrentDisplayMode: function(displayID: SDL_DisplayID): PSDL_DisplayMode; cdecl;
  SDL_GetDisplayForPoint: function(const point: PSDL_Point): SDL_DisplayID; cdecl;
  SDL_GetDisplayForRect: function(const rect: PSDL_Rect): SDL_DisplayID; cdecl;
  SDL_GetDisplayForWindow: function(window: PSDL_Window): SDL_DisplayID; cdecl;
  SDL_GetWindowPixelDensity: function(window: PSDL_Window): Single; cdecl;
  SDL_GetWindowDisplayScale: function(window: PSDL_Window): Single; cdecl;
  SDL_SetWindowFullscreenMode: function(window: PSDL_Window; const mode: PSDL_DisplayMode): Boolean; cdecl;
  SDL_GetWindowFullscreenMode: function(window: PSDL_Window): PSDL_DisplayMode; cdecl;
  SDL_GetWindowICCProfile: function(window: PSDL_Window; size: PNativeUInt): Pointer; cdecl;
  SDL_GetWindowPixelFormat: function(window: PSDL_Window): SDL_PixelFormat; cdecl;
  SDL_GetWindows: function(count: PInteger): PPSDL_Window; cdecl;
  SDL_CreateWindow: function(const title: PUTF8Char; w: Integer; h: Integer; flags: SDL_WindowFlags): PSDL_Window; cdecl;
  SDL_CreatePopupWindow: function(parent: PSDL_Window; offset_x: Integer; offset_y: Integer; w: Integer; h: Integer; flags: SDL_WindowFlags): PSDL_Window; cdecl;
  SDL_CreateWindowWithProperties: function(props: SDL_PropertiesID): PSDL_Window; cdecl;
  SDL_GetWindowID: function(window: PSDL_Window): SDL_WindowID; cdecl;
  SDL_GetWindowFromID: function(id: SDL_WindowID): PSDL_Window; cdecl;
  SDL_GetWindowParent: function(window: PSDL_Window): PSDL_Window; cdecl;
  SDL_GetWindowProperties: function(window: PSDL_Window): SDL_PropertiesID; cdecl;
  SDL_GetWindowFlags: function(window: PSDL_Window): SDL_WindowFlags; cdecl;
  SDL_SetWindowTitle: function(window: PSDL_Window; const title: PUTF8Char): Boolean; cdecl;
  SDL_GetWindowTitle: function(window: PSDL_Window): PUTF8Char; cdecl;
  SDL_SetWindowIcon: function(window: PSDL_Window; icon: PSDL_Surface): Boolean; cdecl;
  SDL_SetWindowPosition: function(window: PSDL_Window; x: Integer; y: Integer): Boolean; cdecl;
  SDL_GetWindowPosition: function(window: PSDL_Window; x: PInteger; y: PInteger): Boolean; cdecl;
  SDL_SetWindowSize: function(window: PSDL_Window; w: Integer; h: Integer): Boolean; cdecl;
  SDL_GetWindowSize: function(window: PSDL_Window; w: PInteger; h: PInteger): Boolean; cdecl;
  SDL_GetWindowSafeArea: function(window: PSDL_Window; rect: PSDL_Rect): Boolean; cdecl;
  SDL_SetWindowAspectRatio: function(window: PSDL_Window; min_aspect: Single; max_aspect: Single): Boolean; cdecl;
  SDL_GetWindowAspectRatio: function(window: PSDL_Window; min_aspect: PSingle; max_aspect: PSingle): Boolean; cdecl;
  SDL_GetWindowBordersSize: function(window: PSDL_Window; top: PInteger; left: PInteger; bottom: PInteger; right: PInteger): Boolean; cdecl;
  SDL_GetWindowSizeInPixels: function(window: PSDL_Window; w: PInteger; h: PInteger): Boolean; cdecl;
  SDL_SetWindowMinimumSize: function(window: PSDL_Window; min_w: Integer; min_h: Integer): Boolean; cdecl;
  SDL_GetWindowMinimumSize: function(window: PSDL_Window; w: PInteger; h: PInteger): Boolean; cdecl;
  SDL_SetWindowMaximumSize: function(window: PSDL_Window; max_w: Integer; max_h: Integer): Boolean; cdecl;
  SDL_GetWindowMaximumSize: function(window: PSDL_Window; w: PInteger; h: PInteger): Boolean; cdecl;
  SDL_SetWindowBordered: function(window: PSDL_Window; bordered: Boolean): Boolean; cdecl;
  SDL_SetWindowResizable: function(window: PSDL_Window; resizable: Boolean): Boolean; cdecl;
  SDL_SetWindowAlwaysOnTop: function(window: PSDL_Window; on_top: Boolean): Boolean; cdecl;
  SDL_ShowWindow: function(window: PSDL_Window): Boolean; cdecl;
  SDL_HideWindow: function(window: PSDL_Window): Boolean; cdecl;
  SDL_RaiseWindow: function(window: PSDL_Window): Boolean; cdecl;
  SDL_MaximizeWindow: function(window: PSDL_Window): Boolean; cdecl;
  SDL_MinimizeWindow: function(window: PSDL_Window): Boolean; cdecl;
  SDL_RestoreWindow: function(window: PSDL_Window): Boolean; cdecl;
  SDL_SetWindowFullscreen: function(window: PSDL_Window; fullscreen: Boolean): Boolean; cdecl;
  SDL_SyncWindow: function(window: PSDL_Window): Boolean; cdecl;
  SDL_WindowHasSurface: function(window: PSDL_Window): Boolean; cdecl;
  SDL_GetWindowSurface: function(window: PSDL_Window): PSDL_Surface; cdecl;
  SDL_SetWindowSurfaceVSync: function(window: PSDL_Window; vsync: Integer): Boolean; cdecl;
  SDL_GetWindowSurfaceVSync: function(window: PSDL_Window; vsync: PInteger): Boolean; cdecl;
  SDL_UpdateWindowSurface: function(window: PSDL_Window): Boolean; cdecl;
  SDL_UpdateWindowSurfaceRects: function(window: PSDL_Window; const rects: PSDL_Rect; numrects: Integer): Boolean; cdecl;
  SDL_DestroyWindowSurface: function(window: PSDL_Window): Boolean; cdecl;
  SDL_SetWindowKeyboardGrab: function(window: PSDL_Window; grabbed: Boolean): Boolean; cdecl;
  SDL_SetWindowMouseGrab: function(window: PSDL_Window; grabbed: Boolean): Boolean; cdecl;
  SDL_GetWindowKeyboardGrab: function(window: PSDL_Window): Boolean; cdecl;
  SDL_GetWindowMouseGrab: function(window: PSDL_Window): Boolean; cdecl;
  SDL_GetGrabbedWindow: function(): PSDL_Window; cdecl;
  SDL_SetWindowMouseRect: function(window: PSDL_Window; const rect: PSDL_Rect): Boolean; cdecl;
  SDL_GetWindowMouseRect: function(window: PSDL_Window): PSDL_Rect; cdecl;
  SDL_SetWindowOpacity: function(window: PSDL_Window; opacity: Single): Boolean; cdecl;
  SDL_GetWindowOpacity: function(window: PSDL_Window): Single; cdecl;
  SDL_SetWindowParent: function(window: PSDL_Window; parent: PSDL_Window): Boolean; cdecl;
  SDL_SetWindowModal: function(window: PSDL_Window; modal: Boolean): Boolean; cdecl;
  SDL_SetWindowFocusable: function(window: PSDL_Window; focusable: Boolean): Boolean; cdecl;
  SDL_ShowWindowSystemMenu: function(window: PSDL_Window; x: Integer; y: Integer): Boolean; cdecl;
  SDL_SetWindowHitTest: function(window: PSDL_Window; callback: SDL_HitTest; callback_data: Pointer): Boolean; cdecl;
  SDL_SetWindowShape: function(window: PSDL_Window; shape: PSDL_Surface): Boolean; cdecl;
  SDL_FlashWindow: function(window: PSDL_Window; operation: SDL_FlashOperation): Boolean; cdecl;
  SDL_DestroyWindow: procedure(window: PSDL_Window); cdecl;
  SDL_ScreenSaverEnabled: function(): Boolean; cdecl;
  SDL_EnableScreenSaver: function(): Boolean; cdecl;
  SDL_DisableScreenSaver: function(): Boolean; cdecl;
  SDL_GL_LoadLibrary: function(const path: PUTF8Char): Boolean; cdecl;
  SDL_GL_GetProcAddress: function(const proc: PUTF8Char): SDL_FunctionPointer; cdecl;
  SDL_EGL_GetProcAddress: function(const proc: PUTF8Char): SDL_FunctionPointer; cdecl;
  SDL_GL_UnloadLibrary: procedure(); cdecl;
  SDL_GL_ExtensionSupported: function(const extension: PUTF8Char): Boolean; cdecl;
  SDL_GL_ResetAttributes: procedure(); cdecl;
  SDL_GL_SetAttribute: function(attr: SDL_GLAttr; value: Integer): Boolean; cdecl;
  SDL_GL_GetAttribute: function(attr: SDL_GLAttr; value: PInteger): Boolean; cdecl;
  SDL_GL_CreateContext: function(window: PSDL_Window): SDL_GLContext; cdecl;
  SDL_GL_MakeCurrent: function(window: PSDL_Window; context: SDL_GLContext): Boolean; cdecl;
  SDL_GL_GetCurrentWindow: function(): PSDL_Window; cdecl;
  SDL_GL_GetCurrentContext: function(): SDL_GLContext; cdecl;
  SDL_EGL_GetCurrentDisplay: function(): SDL_EGLDisplay; cdecl;
  SDL_EGL_GetCurrentConfig: function(): SDL_EGLConfig; cdecl;
  SDL_EGL_GetWindowSurface: function(window: PSDL_Window): SDL_EGLSurface; cdecl;
  SDL_EGL_SetAttributeCallbacks: procedure(platformAttribCallback: SDL_EGLAttribArrayCallback; surfaceAttribCallback: SDL_EGLIntArrayCallback; contextAttribCallback: SDL_EGLIntArrayCallback; userdata: Pointer); cdecl;
  SDL_GL_SetSwapInterval: function(interval: Integer): Boolean; cdecl;
  SDL_GL_GetSwapInterval: function(interval: PInteger): Boolean; cdecl;
  SDL_GL_SwapWindow: function(window: PSDL_Window): Boolean; cdecl;
  SDL_GL_DestroyContext: function(context: SDL_GLContext): Boolean; cdecl;
  SDL_ShowOpenFileDialog: procedure(callback: SDL_DialogFileCallback; userdata: Pointer; window: PSDL_Window; const filters: PSDL_DialogFileFilter; nfilters: Integer; const default_location: PUTF8Char; allow_many: Boolean); cdecl;
  SDL_ShowSaveFileDialog: procedure(callback: SDL_DialogFileCallback; userdata: Pointer; window: PSDL_Window; const filters: PSDL_DialogFileFilter; nfilters: Integer; const default_location: PUTF8Char); cdecl;
  SDL_ShowOpenFolderDialog: procedure(callback: SDL_DialogFileCallback; userdata: Pointer; window: PSDL_Window; const default_location: PUTF8Char; allow_many: Boolean); cdecl;
  SDL_ShowFileDialogWithProperties: procedure(&type: SDL_FileDialogType; callback: SDL_DialogFileCallback; userdata: Pointer; props: SDL_PropertiesID); cdecl;
  SDL_GUIDToString: procedure(guid: SDL_GUID; pszGUID: PUTF8Char; cbGUID: Integer); cdecl;
  SDL_StringToGUID: function(const pchGUID: PUTF8Char): SDL_GUID; cdecl;
  SDL_GetPowerInfo: function(seconds: PInteger; percent: PInteger): SDL_PowerState; cdecl;
  SDL_GetSensors: function(count: PInteger): PSDL_SensorID; cdecl;
  SDL_GetSensorNameForID: function(instance_id: SDL_SensorID): PUTF8Char; cdecl;
  SDL_GetSensorTypeForID: function(instance_id: SDL_SensorID): SDL_SensorType; cdecl;
  SDL_GetSensorNonPortableTypeForID: function(instance_id: SDL_SensorID): Integer; cdecl;
  SDL_OpenSensor: function(instance_id: SDL_SensorID): PSDL_Sensor; cdecl;
  SDL_GetSensorFromID: function(instance_id: SDL_SensorID): PSDL_Sensor; cdecl;
  SDL_GetSensorProperties: function(sensor: PSDL_Sensor): SDL_PropertiesID; cdecl;
  SDL_GetSensorName: function(sensor: PSDL_Sensor): PUTF8Char; cdecl;
  SDL_GetSensorType: function(sensor: PSDL_Sensor): SDL_SensorType; cdecl;
  SDL_GetSensorNonPortableType: function(sensor: PSDL_Sensor): Integer; cdecl;
  SDL_GetSensorID: function(sensor: PSDL_Sensor): SDL_SensorID; cdecl;
  SDL_GetSensorData: function(sensor: PSDL_Sensor; data: PSingle; num_values: Integer): Boolean; cdecl;
  SDL_CloseSensor: procedure(sensor: PSDL_Sensor); cdecl;
  SDL_UpdateSensors: procedure(); cdecl;
  SDL_LockJoysticks: procedure(); cdecl;
  SDL_UnlockJoysticks: procedure(); cdecl;
  SDL_HasJoystick: function(): Boolean; cdecl;
  SDL_GetJoysticks: function(count: PInteger): PSDL_JoystickID; cdecl;
  SDL_GetJoystickNameForID: function(instance_id: SDL_JoystickID): PUTF8Char; cdecl;
  SDL_GetJoystickPathForID: function(instance_id: SDL_JoystickID): PUTF8Char; cdecl;
  SDL_GetJoystickPlayerIndexForID: function(instance_id: SDL_JoystickID): Integer; cdecl;
  SDL_GetJoystickGUIDForID: function(instance_id: SDL_JoystickID): SDL_GUID; cdecl;
  SDL_GetJoystickVendorForID: function(instance_id: SDL_JoystickID): Uint16; cdecl;
  SDL_GetJoystickProductForID: function(instance_id: SDL_JoystickID): Uint16; cdecl;
  SDL_GetJoystickProductVersionForID: function(instance_id: SDL_JoystickID): Uint16; cdecl;
  SDL_GetJoystickTypeForID: function(instance_id: SDL_JoystickID): SDL_JoystickType; cdecl;
  SDL_OpenJoystick: function(instance_id: SDL_JoystickID): PSDL_Joystick; cdecl;
  SDL_GetJoystickFromID: function(instance_id: SDL_JoystickID): PSDL_Joystick; cdecl;
  SDL_GetJoystickFromPlayerIndex: function(player_index: Integer): PSDL_Joystick; cdecl;
  SDL_AttachVirtualJoystick: function(const desc: PSDL_VirtualJoystickDesc): SDL_JoystickID; cdecl;
  SDL_DetachVirtualJoystick: function(instance_id: SDL_JoystickID): Boolean; cdecl;
  SDL_IsJoystickVirtual: function(instance_id: SDL_JoystickID): Boolean; cdecl;
  SDL_SetJoystickVirtualAxis: function(joystick: PSDL_Joystick; axis: Integer; value: Sint16): Boolean; cdecl;
  SDL_SetJoystickVirtualBall: function(joystick: PSDL_Joystick; ball: Integer; xrel: Sint16; yrel: Sint16): Boolean; cdecl;
  SDL_SetJoystickVirtualButton: function(joystick: PSDL_Joystick; button: Integer; down: Boolean): Boolean; cdecl;
  SDL_SetJoystickVirtualHat: function(joystick: PSDL_Joystick; hat: Integer; value: Uint8): Boolean; cdecl;
  SDL_SetJoystickVirtualTouchpad: function(joystick: PSDL_Joystick; touchpad: Integer; finger: Integer; down: Boolean; x: Single; y: Single; pressure: Single): Boolean; cdecl;
  SDL_SendJoystickVirtualSensorData: function(joystick: PSDL_Joystick; &type: SDL_SensorType; sensor_timestamp: Uint64; const data: PSingle; num_values: Integer): Boolean; cdecl;
  SDL_GetJoystickProperties: function(joystick: PSDL_Joystick): SDL_PropertiesID; cdecl;
  SDL_GetJoystickName: function(joystick: PSDL_Joystick): PUTF8Char; cdecl;
  SDL_GetJoystickPath: function(joystick: PSDL_Joystick): PUTF8Char; cdecl;
  SDL_GetJoystickPlayerIndex: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_SetJoystickPlayerIndex: function(joystick: PSDL_Joystick; player_index: Integer): Boolean; cdecl;
  SDL_GetJoystickGUID: function(joystick: PSDL_Joystick): SDL_GUID; cdecl;
  SDL_GetJoystickVendor: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_GetJoystickProduct: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_GetJoystickProductVersion: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_GetJoystickFirmwareVersion: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_GetJoystickSerial: function(joystick: PSDL_Joystick): PUTF8Char; cdecl;
  SDL_GetJoystickType: function(joystick: PSDL_Joystick): SDL_JoystickType; cdecl;
  SDL_GetJoystickGUIDInfo: procedure(guid: SDL_GUID; vendor: PUint16; product: PUint16; version: PUint16; crc16: PUint16); cdecl;
  SDL_JoystickConnected: function(joystick: PSDL_Joystick): Boolean; cdecl;
  SDL_GetJoystickID: function(joystick: PSDL_Joystick): SDL_JoystickID; cdecl;
  SDL_GetNumJoystickAxes: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_GetNumJoystickBalls: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_GetNumJoystickHats: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_GetNumJoystickButtons: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_SetJoystickEventsEnabled: procedure(enabled: Boolean); cdecl;
  SDL_JoystickEventsEnabled: function(): Boolean; cdecl;
  SDL_UpdateJoysticks: procedure(); cdecl;
  SDL_GetJoystickAxis: function(joystick: PSDL_Joystick; axis: Integer): Sint16; cdecl;
  SDL_GetJoystickAxisInitialState: function(joystick: PSDL_Joystick; axis: Integer; state: PSint16): Boolean; cdecl;
  SDL_GetJoystickBall: function(joystick: PSDL_Joystick; ball: Integer; dx: PInteger; dy: PInteger): Boolean; cdecl;
  SDL_GetJoystickHat: function(joystick: PSDL_Joystick; hat: Integer): Uint8; cdecl;
  SDL_GetJoystickButton: function(joystick: PSDL_Joystick; button: Integer): Boolean; cdecl;
  SDL_RumbleJoystick: function(joystick: PSDL_Joystick; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): Boolean; cdecl;
  SDL_RumbleJoystickTriggers: function(joystick: PSDL_Joystick; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): Boolean; cdecl;
  SDL_SetJoystickLED: function(joystick: PSDL_Joystick; red: Uint8; green: Uint8; blue: Uint8): Boolean; cdecl;
  SDL_SendJoystickEffect: function(joystick: PSDL_Joystick; const data: Pointer; size: Integer): Boolean; cdecl;
  SDL_CloseJoystick: procedure(joystick: PSDL_Joystick); cdecl;
  SDL_GetJoystickConnectionState: function(joystick: PSDL_Joystick): SDL_JoystickConnectionState; cdecl;
  SDL_GetJoystickPowerInfo: function(joystick: PSDL_Joystick; percent: PInteger): SDL_PowerState; cdecl;
  SDL_AddGamepadMapping: function(const mapping: PUTF8Char): Integer; cdecl;
  SDL_AddGamepadMappingsFromIO: function(src: PSDL_IOStream; closeio: Boolean): Integer; cdecl;
  SDL_AddGamepadMappingsFromFile: function(const &file: PUTF8Char): Integer; cdecl;
  SDL_ReloadGamepadMappings: function(): Boolean; cdecl;
  SDL_GetGamepadMappings: function(count: PInteger): PPUTF8Char; cdecl;
  SDL_GetGamepadMappingForGUID: function(guid: SDL_GUID): PUTF8Char; cdecl;
  SDL_GetGamepadMapping: function(gamepad: PSDL_Gamepad): PUTF8Char; cdecl;
  SDL_SetGamepadMapping: function(instance_id: SDL_JoystickID; const mapping: PUTF8Char): Boolean; cdecl;
  SDL_HasGamepad: function(): Boolean; cdecl;
  SDL_GetGamepads: function(count: PInteger): PSDL_JoystickID; cdecl;
  SDL_IsGamepad: function(instance_id: SDL_JoystickID): Boolean; cdecl;
  SDL_GetGamepadNameForID: function(instance_id: SDL_JoystickID): PUTF8Char; cdecl;
  SDL_GetGamepadPathForID: function(instance_id: SDL_JoystickID): PUTF8Char; cdecl;
  SDL_GetGamepadPlayerIndexForID: function(instance_id: SDL_JoystickID): Integer; cdecl;
  SDL_GetGamepadGUIDForID: function(instance_id: SDL_JoystickID): SDL_GUID; cdecl;
  SDL_GetGamepadVendorForID: function(instance_id: SDL_JoystickID): Uint16; cdecl;
  SDL_GetGamepadProductForID: function(instance_id: SDL_JoystickID): Uint16; cdecl;
  SDL_GetGamepadProductVersionForID: function(instance_id: SDL_JoystickID): Uint16; cdecl;
  SDL_GetGamepadTypeForID: function(instance_id: SDL_JoystickID): SDL_GamepadType; cdecl;
  SDL_GetRealGamepadTypeForID: function(instance_id: SDL_JoystickID): SDL_GamepadType; cdecl;
  SDL_GetGamepadMappingForID: function(instance_id: SDL_JoystickID): PUTF8Char; cdecl;
  SDL_OpenGamepad: function(instance_id: SDL_JoystickID): PSDL_Gamepad; cdecl;
  SDL_GetGamepadFromID: function(instance_id: SDL_JoystickID): PSDL_Gamepad; cdecl;
  SDL_GetGamepadFromPlayerIndex: function(player_index: Integer): PSDL_Gamepad; cdecl;
  SDL_GetGamepadProperties: function(gamepad: PSDL_Gamepad): SDL_PropertiesID; cdecl;
  SDL_GetGamepadID: function(gamepad: PSDL_Gamepad): SDL_JoystickID; cdecl;
  SDL_GetGamepadName: function(gamepad: PSDL_Gamepad): PUTF8Char; cdecl;
  SDL_GetGamepadPath: function(gamepad: PSDL_Gamepad): PUTF8Char; cdecl;
  SDL_GetGamepadType: function(gamepad: PSDL_Gamepad): SDL_GamepadType; cdecl;
  SDL_GetRealGamepadType: function(gamepad: PSDL_Gamepad): SDL_GamepadType; cdecl;
  SDL_GetGamepadPlayerIndex: function(gamepad: PSDL_Gamepad): Integer; cdecl;
  SDL_SetGamepadPlayerIndex: function(gamepad: PSDL_Gamepad; player_index: Integer): Boolean; cdecl;
  SDL_GetGamepadVendor: function(gamepad: PSDL_Gamepad): Uint16; cdecl;
  SDL_GetGamepadProduct: function(gamepad: PSDL_Gamepad): Uint16; cdecl;
  SDL_GetGamepadProductVersion: function(gamepad: PSDL_Gamepad): Uint16; cdecl;
  SDL_GetGamepadFirmwareVersion: function(gamepad: PSDL_Gamepad): Uint16; cdecl;
  SDL_GetGamepadSerial: function(gamepad: PSDL_Gamepad): PUTF8Char; cdecl;
  SDL_GetGamepadSteamHandle: function(gamepad: PSDL_Gamepad): Uint64; cdecl;
  SDL_GetGamepadConnectionState: function(gamepad: PSDL_Gamepad): SDL_JoystickConnectionState; cdecl;
  SDL_GetGamepadPowerInfo: function(gamepad: PSDL_Gamepad; percent: PInteger): SDL_PowerState; cdecl;
  SDL_GamepadConnected: function(gamepad: PSDL_Gamepad): Boolean; cdecl;
  SDL_GetGamepadJoystick: function(gamepad: PSDL_Gamepad): PSDL_Joystick; cdecl;
  SDL_SetGamepadEventsEnabled: procedure(enabled: Boolean); cdecl;
  SDL_GamepadEventsEnabled: function(): Boolean; cdecl;
  SDL_GetGamepadBindings: function(gamepad: PSDL_Gamepad; count: PInteger): PPSDL_GamepadBinding; cdecl;
  SDL_UpdateGamepads: procedure(); cdecl;
  SDL_GetGamepadTypeFromString: function(const str: PUTF8Char): SDL_GamepadType; cdecl;
  SDL_GetGamepadStringForType: function(&type: SDL_GamepadType): PUTF8Char; cdecl;
  SDL_GetGamepadAxisFromString: function(const str: PUTF8Char): SDL_GamepadAxis; cdecl;
  SDL_GetGamepadStringForAxis: function(axis: SDL_GamepadAxis): PUTF8Char; cdecl;
  SDL_GamepadHasAxis: function(gamepad: PSDL_Gamepad; axis: SDL_GamepadAxis): Boolean; cdecl;
  SDL_GetGamepadAxis: function(gamepad: PSDL_Gamepad; axis: SDL_GamepadAxis): Sint16; cdecl;
  SDL_GetGamepadButtonFromString: function(const str: PUTF8Char): SDL_GamepadButton; cdecl;
  SDL_GetGamepadStringForButton: function(button: SDL_GamepadButton): PUTF8Char; cdecl;
  SDL_GamepadHasButton: function(gamepad: PSDL_Gamepad; button: SDL_GamepadButton): Boolean; cdecl;
  SDL_GetGamepadButton: function(gamepad: PSDL_Gamepad; button: SDL_GamepadButton): Boolean; cdecl;
  SDL_GetGamepadButtonLabelForType: function(&type: SDL_GamepadType; button: SDL_GamepadButton): SDL_GamepadButtonLabel; cdecl;
  SDL_GetGamepadButtonLabel: function(gamepad: PSDL_Gamepad; button: SDL_GamepadButton): SDL_GamepadButtonLabel; cdecl;
  SDL_GetNumGamepadTouchpads: function(gamepad: PSDL_Gamepad): Integer; cdecl;
  SDL_GetNumGamepadTouchpadFingers: function(gamepad: PSDL_Gamepad; touchpad: Integer): Integer; cdecl;
  SDL_GetGamepadTouchpadFinger: function(gamepad: PSDL_Gamepad; touchpad: Integer; finger: Integer; down: PBoolean; x: PSingle; y: PSingle; pressure: PSingle): Boolean; cdecl;
  SDL_GamepadHasSensor: function(gamepad: PSDL_Gamepad; &type: SDL_SensorType): Boolean; cdecl;
  SDL_SetGamepadSensorEnabled: function(gamepad: PSDL_Gamepad; &type: SDL_SensorType; enabled: Boolean): Boolean; cdecl;
  SDL_GamepadSensorEnabled: function(gamepad: PSDL_Gamepad; &type: SDL_SensorType): Boolean; cdecl;
  SDL_GetGamepadSensorDataRate: function(gamepad: PSDL_Gamepad; &type: SDL_SensorType): Single; cdecl;
  SDL_GetGamepadSensorData: function(gamepad: PSDL_Gamepad; &type: SDL_SensorType; data: PSingle; num_values: Integer): Boolean; cdecl;
  SDL_RumbleGamepad: function(gamepad: PSDL_Gamepad; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): Boolean; cdecl;
  SDL_RumbleGamepadTriggers: function(gamepad: PSDL_Gamepad; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): Boolean; cdecl;
  SDL_SetGamepadLED: function(gamepad: PSDL_Gamepad; red: Uint8; green: Uint8; blue: Uint8): Boolean; cdecl;
  SDL_SendGamepadEffect: function(gamepad: PSDL_Gamepad; const data: Pointer; size: Integer): Boolean; cdecl;
  SDL_CloseGamepad: procedure(gamepad: PSDL_Gamepad); cdecl;
  SDL_GetGamepadAppleSFSymbolsNameForButton: function(gamepad: PSDL_Gamepad; button: SDL_GamepadButton): PUTF8Char; cdecl;
  SDL_GetGamepadAppleSFSymbolsNameForAxis: function(gamepad: PSDL_Gamepad; axis: SDL_GamepadAxis): PUTF8Char; cdecl;
  SDL_HasKeyboard: function(): Boolean; cdecl;
  SDL_GetKeyboards: function(count: PInteger): PSDL_KeyboardID; cdecl;
  SDL_GetKeyboardNameForID: function(instance_id: SDL_KeyboardID): PUTF8Char; cdecl;
  SDL_GetKeyboardFocus: function(): PSDL_Window; cdecl;
  SDL_GetKeyboardState: function(numkeys: PInteger): PBoolean; cdecl;
  SDL_ResetKeyboard: procedure(); cdecl;
  SDL_GetModState: function(): SDL_Keymod; cdecl;
  SDL_SetModState: procedure(modstate: SDL_Keymod); cdecl;
  SDL_GetKeyFromScancode: function(scancode: SDL_Scancode; modstate: SDL_Keymod; key_event: Boolean): SDL_Keycode; cdecl;
  SDL_GetScancodeFromKey: function(key: SDL_Keycode; modstate: PSDL_Keymod): SDL_Scancode; cdecl;
  SDL_SetScancodeName: function(scancode: SDL_Scancode; const name: PUTF8Char): Boolean; cdecl;
  SDL_GetScancodeName: function(scancode: SDL_Scancode): PUTF8Char; cdecl;
  SDL_GetScancodeFromName: function(const name: PUTF8Char): SDL_Scancode; cdecl;
  SDL_GetKeyName: function(key: SDL_Keycode): PUTF8Char; cdecl;
  SDL_GetKeyFromName: function(const name: PUTF8Char): SDL_Keycode; cdecl;
  SDL_StartTextInput: function(window: PSDL_Window): Boolean; cdecl;
  SDL_StartTextInputWithProperties: function(window: PSDL_Window; props: SDL_PropertiesID): Boolean; cdecl;
  SDL_TextInputActive: function(window: PSDL_Window): Boolean; cdecl;
  SDL_StopTextInput: function(window: PSDL_Window): Boolean; cdecl;
  SDL_ClearComposition: function(window: PSDL_Window): Boolean; cdecl;
  SDL_SetTextInputArea: function(window: PSDL_Window; const rect: PSDL_Rect; cursor: Integer): Boolean; cdecl;
  SDL_GetTextInputArea: function(window: PSDL_Window; rect: PSDL_Rect; cursor: PInteger): Boolean; cdecl;
  SDL_HasScreenKeyboardSupport: function(): Boolean; cdecl;
  SDL_ScreenKeyboardShown: function(window: PSDL_Window): Boolean; cdecl;
  SDL_HasMouse: function(): Boolean; cdecl;
  SDL_GetMice: function(count: PInteger): PSDL_MouseID; cdecl;
  SDL_GetMouseNameForID: function(instance_id: SDL_MouseID): PUTF8Char; cdecl;
  SDL_GetMouseFocus: function(): PSDL_Window; cdecl;
  SDL_GetMouseState: function(x: PSingle; y: PSingle): SDL_MouseButtonFlags; cdecl;
  SDL_GetGlobalMouseState: function(x: PSingle; y: PSingle): SDL_MouseButtonFlags; cdecl;
  SDL_GetRelativeMouseState: function(x: PSingle; y: PSingle): SDL_MouseButtonFlags; cdecl;
  SDL_WarpMouseInWindow: procedure(window: PSDL_Window; x: Single; y: Single); cdecl;
  SDL_WarpMouseGlobal: function(x: Single; y: Single): Boolean; cdecl;
  SDL_SetWindowRelativeMouseMode: function(window: PSDL_Window; enabled: Boolean): Boolean; cdecl;
  SDL_GetWindowRelativeMouseMode: function(window: PSDL_Window): Boolean; cdecl;
  SDL_CaptureMouse: function(enabled: Boolean): Boolean; cdecl;
  SDL_CreateCursor: function(const data: PUint8; const mask: PUint8; w: Integer; h: Integer; hot_x: Integer; hot_y: Integer): PSDL_Cursor; cdecl;
  SDL_CreateColorCursor: function(surface: PSDL_Surface; hot_x: Integer; hot_y: Integer): PSDL_Cursor; cdecl;
  SDL_CreateSystemCursor: function(id: SDL_SystemCursor): PSDL_Cursor; cdecl;
  SDL_SetCursor: function(cursor: PSDL_Cursor): Boolean; cdecl;
  SDL_GetCursor: function(): PSDL_Cursor; cdecl;
  SDL_GetDefaultCursor: function(): PSDL_Cursor; cdecl;
  SDL_DestroyCursor: procedure(cursor: PSDL_Cursor); cdecl;
  SDL_ShowCursor: function(): Boolean; cdecl;
  SDL_HideCursor: function(): Boolean; cdecl;
  SDL_CursorVisible: function(): Boolean; cdecl;
  SDL_GetTouchDevices: function(count: PInteger): PSDL_TouchID; cdecl;
  SDL_GetTouchDeviceName: function(touchID: SDL_TouchID): PUTF8Char; cdecl;
  SDL_GetTouchDeviceType: function(touchID: SDL_TouchID): SDL_TouchDeviceType; cdecl;
  SDL_GetTouchFingers: function(touchID: SDL_TouchID; count: PInteger): PPSDL_Finger; cdecl;
  SDL_PumpEvents: procedure(); cdecl;
  SDL_PeepEvents: function(events: PSDL_Event; numevents: Integer; action: SDL_EventAction; minType: Uint32; maxType: Uint32): Integer; cdecl;
  SDL_HasEvent: function(&type: Uint32): Boolean; cdecl;
  SDL_HasEvents: function(minType: Uint32; maxType: Uint32): Boolean; cdecl;
  SDL_FlushEvent: procedure(&type: Uint32); cdecl;
  SDL_FlushEvents: procedure(minType: Uint32; maxType: Uint32); cdecl;
  SDL_PollEvent: function(event: PSDL_Event): Boolean; cdecl;
  SDL_WaitEvent: function(event: PSDL_Event): Boolean; cdecl;
  SDL_WaitEventTimeout: function(event: PSDL_Event; timeoutMS: Sint32): Boolean; cdecl;
  SDL_PushEvent: function(event: PSDL_Event): Boolean; cdecl;
  SDL_SetEventFilter: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_GetEventFilter: function(filter: PSDL_EventFilter; userdata: PPointer): Boolean; cdecl;
  SDL_AddEventWatch: function(filter: SDL_EventFilter; userdata: Pointer): Boolean; cdecl;
  SDL_RemoveEventWatch: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_FilterEvents: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_SetEventEnabled: procedure(&type: Uint32; enabled: Boolean); cdecl;
  SDL_EventEnabled: function(&type: Uint32): Boolean; cdecl;
  SDL_RegisterEvents: function(numevents: Integer): Uint32; cdecl;
  SDL_GetWindowFromEvent: function(const event: PSDL_Event): PSDL_Window; cdecl;
  SDL_GetBasePath: function(): PUTF8Char; cdecl;
  SDL_GetPrefPath: function(const org: PUTF8Char; const app: PUTF8Char): PUTF8Char; cdecl;
  SDL_GetUserFolder: function(folder: SDL_Folder): PUTF8Char; cdecl;
  SDL_CreateDirectory: function(const path: PUTF8Char): Boolean; cdecl;
  SDL_EnumerateDirectory: function(const path: PUTF8Char; callback: SDL_EnumerateDirectoryCallback; userdata: Pointer): Boolean; cdecl;
  SDL_RemovePath: function(const path: PUTF8Char): Boolean; cdecl;
  SDL_RenamePath: function(const oldpath: PUTF8Char; const newpath: PUTF8Char): Boolean; cdecl;
  SDL_CopyFile: function(const oldpath: PUTF8Char; const newpath: PUTF8Char): Boolean; cdecl;
  SDL_GetPathInfo: function(const path: PUTF8Char; info: PSDL_PathInfo): Boolean; cdecl;
  SDL_GlobDirectory: function(const path: PUTF8Char; const pattern: PUTF8Char; flags: SDL_GlobFlags; count: PInteger): PPUTF8Char; cdecl;
  SDL_GetCurrentDirectory: function(): PUTF8Char; cdecl;
  SDL_GPUSupportsShaderFormats: function(format_flags: SDL_GPUShaderFormat; const name: PUTF8Char): Boolean; cdecl;
  SDL_GPUSupportsProperties: function(props: SDL_PropertiesID): Boolean; cdecl;
  SDL_CreateGPUDevice: function(format_flags: SDL_GPUShaderFormat; debug_mode: Boolean; const name: PUTF8Char): PSDL_GPUDevice; cdecl;
  SDL_CreateGPUDeviceWithProperties: function(props: SDL_PropertiesID): PSDL_GPUDevice; cdecl;
  SDL_DestroyGPUDevice: procedure(device: PSDL_GPUDevice); cdecl;
  SDL_GetNumGPUDrivers: function(): Integer; cdecl;
  SDL_GetGPUDriver: function(index: Integer): PUTF8Char; cdecl;
  SDL_GetGPUDeviceDriver: function(device: PSDL_GPUDevice): PUTF8Char; cdecl;
  SDL_GetGPUShaderFormats: function(device: PSDL_GPUDevice): SDL_GPUShaderFormat; cdecl;
  SDL_CreateGPUComputePipeline: function(device: PSDL_GPUDevice; const createinfo: PSDL_GPUComputePipelineCreateInfo): PSDL_GPUComputePipeline; cdecl;
  SDL_CreateGPUGraphicsPipeline: function(device: PSDL_GPUDevice; const createinfo: PSDL_GPUGraphicsPipelineCreateInfo): PSDL_GPUGraphicsPipeline; cdecl;
  SDL_CreateGPUSampler: function(device: PSDL_GPUDevice; const createinfo: PSDL_GPUSamplerCreateInfo): PSDL_GPUSampler; cdecl;
  SDL_CreateGPUShader: function(device: PSDL_GPUDevice; const createinfo: PSDL_GPUShaderCreateInfo): PSDL_GPUShader; cdecl;
  SDL_CreateGPUTexture: function(device: PSDL_GPUDevice; const createinfo: PSDL_GPUTextureCreateInfo): PSDL_GPUTexture; cdecl;
  SDL_CreateGPUBuffer: function(device: PSDL_GPUDevice; const createinfo: PSDL_GPUBufferCreateInfo): PSDL_GPUBuffer; cdecl;
  SDL_CreateGPUTransferBuffer: function(device: PSDL_GPUDevice; const createinfo: PSDL_GPUTransferBufferCreateInfo): PSDL_GPUTransferBuffer; cdecl;
  SDL_SetGPUBufferName: procedure(device: PSDL_GPUDevice; buffer: PSDL_GPUBuffer; const text: PUTF8Char); cdecl;
  SDL_SetGPUTextureName: procedure(device: PSDL_GPUDevice; texture: PSDL_GPUTexture; const text: PUTF8Char); cdecl;
  SDL_InsertGPUDebugLabel: procedure(command_buffer: PSDL_GPUCommandBuffer; const text: PUTF8Char); cdecl;
  SDL_PushGPUDebugGroup: procedure(command_buffer: PSDL_GPUCommandBuffer; const name: PUTF8Char); cdecl;
  SDL_PopGPUDebugGroup: procedure(command_buffer: PSDL_GPUCommandBuffer); cdecl;
  SDL_ReleaseGPUTexture: procedure(device: PSDL_GPUDevice; texture: PSDL_GPUTexture); cdecl;
  SDL_ReleaseGPUSampler: procedure(device: PSDL_GPUDevice; sampler: PSDL_GPUSampler); cdecl;
  SDL_ReleaseGPUBuffer: procedure(device: PSDL_GPUDevice; buffer: PSDL_GPUBuffer); cdecl;
  SDL_ReleaseGPUTransferBuffer: procedure(device: PSDL_GPUDevice; transfer_buffer: PSDL_GPUTransferBuffer); cdecl;
  SDL_ReleaseGPUComputePipeline: procedure(device: PSDL_GPUDevice; compute_pipeline: PSDL_GPUComputePipeline); cdecl;
  SDL_ReleaseGPUShader: procedure(device: PSDL_GPUDevice; shader: PSDL_GPUShader); cdecl;
  SDL_ReleaseGPUGraphicsPipeline: procedure(device: PSDL_GPUDevice; graphics_pipeline: PSDL_GPUGraphicsPipeline); cdecl;
  SDL_AcquireGPUCommandBuffer: function(device: PSDL_GPUDevice): PSDL_GPUCommandBuffer; cdecl;
  SDL_PushGPUVertexUniformData: procedure(command_buffer: PSDL_GPUCommandBuffer; slot_index: Uint32; const data: Pointer; length: Uint32); cdecl;
  SDL_PushGPUFragmentUniformData: procedure(command_buffer: PSDL_GPUCommandBuffer; slot_index: Uint32; const data: Pointer; length: Uint32); cdecl;
  SDL_PushGPUComputeUniformData: procedure(command_buffer: PSDL_GPUCommandBuffer; slot_index: Uint32; const data: Pointer; length: Uint32); cdecl;
  SDL_BeginGPURenderPass: function(command_buffer: PSDL_GPUCommandBuffer; const color_target_infos: PSDL_GPUColorTargetInfo; num_color_targets: Uint32; const depth_stencil_target_info: PSDL_GPUDepthStencilTargetInfo): PSDL_GPURenderPass; cdecl;
  SDL_BindGPUGraphicsPipeline: procedure(render_pass: PSDL_GPURenderPass; graphics_pipeline: PSDL_GPUGraphicsPipeline); cdecl;
  SDL_SetGPUViewport: procedure(render_pass: PSDL_GPURenderPass; const viewport: PSDL_GPUViewport); cdecl;
  SDL_SetGPUScissor: procedure(render_pass: PSDL_GPURenderPass; const scissor: PSDL_Rect); cdecl;
  SDL_SetGPUBlendConstants: procedure(render_pass: PSDL_GPURenderPass; blend_constants: SDL_FColor); cdecl;
  SDL_SetGPUStencilReference: procedure(render_pass: PSDL_GPURenderPass; reference: Uint8); cdecl;
  SDL_BindGPUVertexBuffers: procedure(render_pass: PSDL_GPURenderPass; first_slot: Uint32; const bindings: PSDL_GPUBufferBinding; num_bindings: Uint32); cdecl;
  SDL_BindGPUIndexBuffer: procedure(render_pass: PSDL_GPURenderPass; const binding: PSDL_GPUBufferBinding; index_element_size: SDL_GPUIndexElementSize); cdecl;
  SDL_BindGPUVertexSamplers: procedure(render_pass: PSDL_GPURenderPass; first_slot: Uint32; const texture_sampler_bindings: PSDL_GPUTextureSamplerBinding; num_bindings: Uint32); cdecl;
  SDL_BindGPUVertexStorageTextures: procedure(render_pass: PSDL_GPURenderPass; first_slot: Uint32; const storage_textures: PPSDL_GPUTexture; num_bindings: Uint32); cdecl;
  SDL_BindGPUVertexStorageBuffers: procedure(render_pass: PSDL_GPURenderPass; first_slot: Uint32; const storage_buffers: PPSDL_GPUBuffer; num_bindings: Uint32); cdecl;
  SDL_BindGPUFragmentSamplers: procedure(render_pass: PSDL_GPURenderPass; first_slot: Uint32; const texture_sampler_bindings: PSDL_GPUTextureSamplerBinding; num_bindings: Uint32); cdecl;
  SDL_BindGPUFragmentStorageTextures: procedure(render_pass: PSDL_GPURenderPass; first_slot: Uint32; const storage_textures: PPSDL_GPUTexture; num_bindings: Uint32); cdecl;
  SDL_BindGPUFragmentStorageBuffers: procedure(render_pass: PSDL_GPURenderPass; first_slot: Uint32; const storage_buffers: PPSDL_GPUBuffer; num_bindings: Uint32); cdecl;
  SDL_DrawGPUIndexedPrimitives: procedure(render_pass: PSDL_GPURenderPass; num_indices: Uint32; num_instances: Uint32; first_index: Uint32; vertex_offset: Sint32; first_instance: Uint32); cdecl;
  SDL_DrawGPUPrimitives: procedure(render_pass: PSDL_GPURenderPass; num_vertices: Uint32; num_instances: Uint32; first_vertex: Uint32; first_instance: Uint32); cdecl;
  SDL_DrawGPUPrimitivesIndirect: procedure(render_pass: PSDL_GPURenderPass; buffer: PSDL_GPUBuffer; offset: Uint32; draw_count: Uint32); cdecl;
  SDL_DrawGPUIndexedPrimitivesIndirect: procedure(render_pass: PSDL_GPURenderPass; buffer: PSDL_GPUBuffer; offset: Uint32; draw_count: Uint32); cdecl;
  SDL_EndGPURenderPass: procedure(render_pass: PSDL_GPURenderPass); cdecl;
  SDL_BeginGPUComputePass: function(command_buffer: PSDL_GPUCommandBuffer; const storage_texture_bindings: PSDL_GPUStorageTextureReadWriteBinding; num_storage_texture_bindings: Uint32; const storage_buffer_bindings: PSDL_GPUStorageBufferReadWriteBinding; num_storage_buffer_bindings: Uint32): PSDL_GPUComputePass; cdecl;
  SDL_BindGPUComputePipeline: procedure(compute_pass: PSDL_GPUComputePass; compute_pipeline: PSDL_GPUComputePipeline); cdecl;
  SDL_BindGPUComputeSamplers: procedure(compute_pass: PSDL_GPUComputePass; first_slot: Uint32; const texture_sampler_bindings: PSDL_GPUTextureSamplerBinding; num_bindings: Uint32); cdecl;
  SDL_BindGPUComputeStorageTextures: procedure(compute_pass: PSDL_GPUComputePass; first_slot: Uint32; const storage_textures: PPSDL_GPUTexture; num_bindings: Uint32); cdecl;
  SDL_BindGPUComputeStorageBuffers: procedure(compute_pass: PSDL_GPUComputePass; first_slot: Uint32; const storage_buffers: PPSDL_GPUBuffer; num_bindings: Uint32); cdecl;
  SDL_DispatchGPUCompute: procedure(compute_pass: PSDL_GPUComputePass; groupcount_x: Uint32; groupcount_y: Uint32; groupcount_z: Uint32); cdecl;
  SDL_DispatchGPUComputeIndirect: procedure(compute_pass: PSDL_GPUComputePass; buffer: PSDL_GPUBuffer; offset: Uint32); cdecl;
  SDL_EndGPUComputePass: procedure(compute_pass: PSDL_GPUComputePass); cdecl;
  SDL_MapGPUTransferBuffer: function(device: PSDL_GPUDevice; transfer_buffer: PSDL_GPUTransferBuffer; cycle: Boolean): Pointer; cdecl;
  SDL_UnmapGPUTransferBuffer: procedure(device: PSDL_GPUDevice; transfer_buffer: PSDL_GPUTransferBuffer); cdecl;
  SDL_BeginGPUCopyPass: function(command_buffer: PSDL_GPUCommandBuffer): PSDL_GPUCopyPass; cdecl;
  SDL_UploadToGPUTexture: procedure(copy_pass: PSDL_GPUCopyPass; const source: PSDL_GPUTextureTransferInfo; const destination: PSDL_GPUTextureRegion; cycle: Boolean); cdecl;
  SDL_UploadToGPUBuffer: procedure(copy_pass: PSDL_GPUCopyPass; const source: PSDL_GPUTransferBufferLocation; const destination: PSDL_GPUBufferRegion; cycle: Boolean); cdecl;
  SDL_CopyGPUTextureToTexture: procedure(copy_pass: PSDL_GPUCopyPass; const source: PSDL_GPUTextureLocation; const destination: PSDL_GPUTextureLocation; w: Uint32; h: Uint32; d: Uint32; cycle: Boolean); cdecl;
  SDL_CopyGPUBufferToBuffer: procedure(copy_pass: PSDL_GPUCopyPass; const source: PSDL_GPUBufferLocation; const destination: PSDL_GPUBufferLocation; size: Uint32; cycle: Boolean); cdecl;
  SDL_DownloadFromGPUTexture: procedure(copy_pass: PSDL_GPUCopyPass; const source: PSDL_GPUTextureRegion; const destination: PSDL_GPUTextureTransferInfo); cdecl;
  SDL_DownloadFromGPUBuffer: procedure(copy_pass: PSDL_GPUCopyPass; const source: PSDL_GPUBufferRegion; const destination: PSDL_GPUTransferBufferLocation); cdecl;
  SDL_EndGPUCopyPass: procedure(copy_pass: PSDL_GPUCopyPass); cdecl;
  SDL_GenerateMipmapsForGPUTexture: procedure(command_buffer: PSDL_GPUCommandBuffer; texture: PSDL_GPUTexture); cdecl;
  SDL_BlitGPUTexture: procedure(command_buffer: PSDL_GPUCommandBuffer; const info: PSDL_GPUBlitInfo); cdecl;
  SDL_WindowSupportsGPUSwapchainComposition: function(device: PSDL_GPUDevice; window: PSDL_Window; swapchain_composition: SDL_GPUSwapchainComposition): Boolean; cdecl;
  SDL_WindowSupportsGPUPresentMode: function(device: PSDL_GPUDevice; window: PSDL_Window; present_mode: SDL_GPUPresentMode): Boolean; cdecl;
  SDL_ClaimWindowForGPUDevice: function(device: PSDL_GPUDevice; window: PSDL_Window): Boolean; cdecl;
  SDL_ReleaseWindowFromGPUDevice: procedure(device: PSDL_GPUDevice; window: PSDL_Window); cdecl;
  SDL_SetGPUSwapchainParameters: function(device: PSDL_GPUDevice; window: PSDL_Window; swapchain_composition: SDL_GPUSwapchainComposition; present_mode: SDL_GPUPresentMode): Boolean; cdecl;
  SDL_SetGPUAllowedFramesInFlight: function(device: PSDL_GPUDevice; allowed_frames_in_flight: Uint32): Boolean; cdecl;
  SDL_GetGPUSwapchainTextureFormat: function(device: PSDL_GPUDevice; window: PSDL_Window): SDL_GPUTextureFormat; cdecl;
  SDL_AcquireGPUSwapchainTexture: function(command_buffer: PSDL_GPUCommandBuffer; window: PSDL_Window; swapchain_texture: PPSDL_GPUTexture; swapchain_texture_width: PUint32; swapchain_texture_height: PUint32): Boolean; cdecl;
  SDL_WaitForGPUSwapchain: function(device: PSDL_GPUDevice; window: PSDL_Window): Boolean; cdecl;
  SDL_WaitAndAcquireGPUSwapchainTexture: function(command_buffer: PSDL_GPUCommandBuffer; window: PSDL_Window; swapchain_texture: PPSDL_GPUTexture; swapchain_texture_width: PUint32; swapchain_texture_height: PUint32): Boolean; cdecl;
  SDL_SubmitGPUCommandBuffer: function(command_buffer: PSDL_GPUCommandBuffer): Boolean; cdecl;
  SDL_SubmitGPUCommandBufferAndAcquireFence: function(command_buffer: PSDL_GPUCommandBuffer): PSDL_GPUFence; cdecl;
  SDL_CancelGPUCommandBuffer: function(command_buffer: PSDL_GPUCommandBuffer): Boolean; cdecl;
  SDL_WaitForGPUIdle: function(device: PSDL_GPUDevice): Boolean; cdecl;
  SDL_WaitForGPUFences: function(device: PSDL_GPUDevice; wait_all: Boolean; const fences: PPSDL_GPUFence; num_fences: Uint32): Boolean; cdecl;
  SDL_QueryGPUFence: function(device: PSDL_GPUDevice; fence: PSDL_GPUFence): Boolean; cdecl;
  SDL_ReleaseGPUFence: procedure(device: PSDL_GPUDevice; fence: PSDL_GPUFence); cdecl;
  SDL_GPUTextureFormatTexelBlockSize: function(format: SDL_GPUTextureFormat): Uint32; cdecl;
  SDL_GPUTextureSupportsFormat: function(device: PSDL_GPUDevice; format: SDL_GPUTextureFormat; &type: SDL_GPUTextureType; usage: SDL_GPUTextureUsageFlags): Boolean; cdecl;
  SDL_GPUTextureSupportsSampleCount: function(device: PSDL_GPUDevice; format: SDL_GPUTextureFormat; sample_count: SDL_GPUSampleCount): Boolean; cdecl;
  SDL_CalculateGPUTextureFormatSize: function(format: SDL_GPUTextureFormat; width: Uint32; height: Uint32; depth_or_layer_count: Uint32): Uint32; cdecl;
  SDL_GetHaptics: function(count: PInteger): PSDL_HapticID; cdecl;
  SDL_GetHapticNameForID: function(instance_id: SDL_HapticID): PUTF8Char; cdecl;
  SDL_OpenHaptic: function(instance_id: SDL_HapticID): PSDL_Haptic; cdecl;
  SDL_GetHapticFromID: function(instance_id: SDL_HapticID): PSDL_Haptic; cdecl;
  SDL_GetHapticID: function(haptic: PSDL_Haptic): SDL_HapticID; cdecl;
  SDL_GetHapticName: function(haptic: PSDL_Haptic): PUTF8Char; cdecl;
  SDL_IsMouseHaptic: function(): Boolean; cdecl;
  SDL_OpenHapticFromMouse: function(): PSDL_Haptic; cdecl;
  SDL_IsJoystickHaptic: function(joystick: PSDL_Joystick): Boolean; cdecl;
  SDL_OpenHapticFromJoystick: function(joystick: PSDL_Joystick): PSDL_Haptic; cdecl;
  SDL_CloseHaptic: procedure(haptic: PSDL_Haptic); cdecl;
  SDL_GetMaxHapticEffects: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_GetMaxHapticEffectsPlaying: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_GetHapticFeatures: function(haptic: PSDL_Haptic): Uint32; cdecl;
  SDL_GetNumHapticAxes: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticEffectSupported: function(haptic: PSDL_Haptic; const effect: PSDL_HapticEffect): Boolean; cdecl;
  SDL_CreateHapticEffect: function(haptic: PSDL_Haptic; const effect: PSDL_HapticEffect): Integer; cdecl;
  SDL_UpdateHapticEffect: function(haptic: PSDL_Haptic; effect: Integer; const data: PSDL_HapticEffect): Boolean; cdecl;
  SDL_RunHapticEffect: function(haptic: PSDL_Haptic; effect: Integer; iterations: Uint32): Boolean; cdecl;
  SDL_StopHapticEffect: function(haptic: PSDL_Haptic; effect: Integer): Boolean; cdecl;
  SDL_DestroyHapticEffect: procedure(haptic: PSDL_Haptic; effect: Integer); cdecl;
  SDL_GetHapticEffectStatus: function(haptic: PSDL_Haptic; effect: Integer): Boolean; cdecl;
  SDL_SetHapticGain: function(haptic: PSDL_Haptic; gain: Integer): Boolean; cdecl;
  SDL_SetHapticAutocenter: function(haptic: PSDL_Haptic; autocenter: Integer): Boolean; cdecl;
  SDL_PauseHaptic: function(haptic: PSDL_Haptic): Boolean; cdecl;
  SDL_ResumeHaptic: function(haptic: PSDL_Haptic): Boolean; cdecl;
  SDL_StopHapticEffects: function(haptic: PSDL_Haptic): Boolean; cdecl;
  SDL_HapticRumbleSupported: function(haptic: PSDL_Haptic): Boolean; cdecl;
  SDL_InitHapticRumble: function(haptic: PSDL_Haptic): Boolean; cdecl;
  SDL_PlayHapticRumble: function(haptic: PSDL_Haptic; strength: Single; length: Uint32): Boolean; cdecl;
  SDL_StopHapticRumble: function(haptic: PSDL_Haptic): Boolean; cdecl;
  SDL_hid_init: function(): Integer; cdecl;
  SDL_hid_exit: function(): Integer; cdecl;
  SDL_hid_device_change_count: function(): Uint32; cdecl;
  SDL_hid_enumerate: function(vendor_id: Word; product_id: Word): PSDL_hid_device_info; cdecl;
  SDL_hid_free_enumeration: procedure(devs: PSDL_hid_device_info); cdecl;
  SDL_hid_open: function(vendor_id: Word; product_id: Word; const serial_number: PWideChar): PSDL_hid_device; cdecl;
  SDL_hid_open_path: function(const path: PUTF8Char): PSDL_hid_device; cdecl;
  SDL_hid_write: function(dev: PSDL_hid_device; const data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_read_timeout: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt; milliseconds: Integer): Integer; cdecl;
  SDL_hid_read: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_set_nonblocking: function(dev: PSDL_hid_device; nonblock: Integer): Integer; cdecl;
  SDL_hid_send_feature_report: function(dev: PSDL_hid_device; const data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_get_feature_report: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_get_input_report: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_close: function(dev: PSDL_hid_device): Integer; cdecl;
  SDL_hid_get_manufacturer_string: function(dev: PSDL_hid_device; &string: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_product_string: function(dev: PSDL_hid_device; &string: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_serial_number_string: function(dev: PSDL_hid_device; &string: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_indexed_string: function(dev: PSDL_hid_device; string_index: Integer; &string: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_device_info: function(dev: PSDL_hid_device): PSDL_hid_device_info; cdecl;
  SDL_hid_get_report_descriptor: function(dev: PSDL_hid_device; buf: PByte; buf_size: NativeUInt): Integer; cdecl;
  SDL_hid_ble_scan: procedure(active: Boolean); cdecl;
  SDL_SetHintWithPriority: function(const name: PUTF8Char; const value: PUTF8Char; priority: SDL_HintPriority): Boolean; cdecl;
  SDL_SetHint: function(const name: PUTF8Char; const value: PUTF8Char): Boolean; cdecl;
  SDL_ResetHint: function(const name: PUTF8Char): Boolean; cdecl;
  SDL_ResetHints: procedure(); cdecl;
  SDL_GetHint: function(const name: PUTF8Char): PUTF8Char; cdecl;
  SDL_GetHintBoolean: function(const name: PUTF8Char; default_value: Boolean): Boolean; cdecl;
  SDL_AddHintCallback: function(const name: PUTF8Char; callback: SDL_HintCallback; userdata: Pointer): Boolean; cdecl;
  SDL_RemoveHintCallback: procedure(const name: PUTF8Char; callback: SDL_HintCallback; userdata: Pointer); cdecl;
  SDL_Init: function(flags: SDL_InitFlags): Boolean; cdecl;
  SDL_InitSubSystem: function(flags: SDL_InitFlags): Boolean; cdecl;
  SDL_QuitSubSystem: procedure(flags: SDL_InitFlags); cdecl;
  SDL_WasInit: function(flags: SDL_InitFlags): SDL_InitFlags; cdecl;
  SDL_Quit: procedure(); cdecl;
  SDL_IsMainThread: function(): Boolean; cdecl;
  SDL_RunOnMainThread: function(callback: SDL_MainThreadCallback; userdata: Pointer; wait_complete: Boolean): Boolean; cdecl;
  SDL_SetAppMetadata: function(const appname: PUTF8Char; const appversion: PUTF8Char; const appidentifier: PUTF8Char): Boolean; cdecl;
  SDL_SetAppMetadataProperty: function(const name: PUTF8Char; const value: PUTF8Char): Boolean; cdecl;
  SDL_GetAppMetadataProperty: function(const name: PUTF8Char): PUTF8Char; cdecl;
  SDL_LoadObject: function(const sofile: PUTF8Char): PSDL_SharedObject; cdecl;
  SDL_LoadFunction: function(handle: PSDL_SharedObject; const name: PUTF8Char): SDL_FunctionPointer; cdecl;
  SDL_UnloadObject: procedure(handle: PSDL_SharedObject); cdecl;
  SDL_GetPreferredLocales: function(count: PInteger): PPSDL_Locale; cdecl;
  SDL_SetLogPriorities: procedure(priority: SDL_LogPriority); cdecl;
  SDL_SetLogPriority: procedure(category: Integer; priority: SDL_LogPriority); cdecl;
  SDL_GetLogPriority: function(category: Integer): SDL_LogPriority; cdecl;
  SDL_ResetLogPriorities: procedure(); cdecl;
  SDL_SetLogPriorityPrefix: function(priority: SDL_LogPriority; const prefix: PUTF8Char): Boolean; cdecl;
  SDL_Log_rtn: procedure(const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogTrace: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogVerbose: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogDebug: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogInfo: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogWarn: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogError: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogCritical: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogMessage: procedure(category: Integer; priority: SDL_LogPriority; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogMessageV: procedure(category: Integer; priority: SDL_LogPriority; const fmt: PUTF8Char; ap: Pointer); cdecl;
  SDL_GetDefaultLogOutputFunction: function(): SDL_LogOutputFunction; cdecl;
  SDL_GetLogOutputFunction: procedure(callback: PSDL_LogOutputFunction; userdata: PPointer); cdecl;
  SDL_SetLogOutputFunction: procedure(callback: SDL_LogOutputFunction; userdata: Pointer); cdecl;
  SDL_ShowMessageBox: function(const messageboxdata: PSDL_MessageBoxData; buttonid: PInteger): Boolean; cdecl;
  SDL_ShowSimpleMessageBox: function(flags: SDL_MessageBoxFlags; const title: PUTF8Char; const &message: PUTF8Char; window: PSDL_Window): Boolean; cdecl;
  SDL_Metal_CreateView: function(window: PSDL_Window): SDL_MetalView; cdecl;
  SDL_Metal_DestroyView: procedure(view: SDL_MetalView); cdecl;
  SDL_Metal_GetLayer: function(view: SDL_MetalView): Pointer; cdecl;
  SDL_OpenURL: function(const url: PUTF8Char): Boolean; cdecl;
  SDL_GetPlatform: function(): PUTF8Char; cdecl;
  SDL_CreateProcess: function(const args: PPUTF8Char; pipe_stdio: Boolean): PSDL_Process; cdecl;
  SDL_CreateProcessWithProperties: function(props: SDL_PropertiesID): PSDL_Process; cdecl;
  SDL_GetProcessProperties: function(process: PSDL_Process): SDL_PropertiesID; cdecl;
  SDL_ReadProcess: function(process: PSDL_Process; datasize: PNativeUInt; exitcode: PInteger): Pointer; cdecl;
  SDL_GetProcessInput: function(process: PSDL_Process): PSDL_IOStream; cdecl;
  SDL_GetProcessOutput: function(process: PSDL_Process): PSDL_IOStream; cdecl;
  SDL_KillProcess: function(process: PSDL_Process; force: Boolean): Boolean; cdecl;
  SDL_WaitProcess: function(process: PSDL_Process; block: Boolean; exitcode: PInteger): Boolean; cdecl;
  SDL_DestroyProcess: procedure(process: PSDL_Process); cdecl;
  SDL_GetNumRenderDrivers: function(): Integer; cdecl;
  SDL_GetRenderDriver: function(index: Integer): PUTF8Char; cdecl;
  SDL_CreateWindowAndRenderer: function(const title: PUTF8Char; width: Integer; height: Integer; window_flags: SDL_WindowFlags; window: PPSDL_Window; renderer: PPSDL_Renderer): Boolean; cdecl;
  SDL_CreateRenderer: function(window: PSDL_Window; const name: PUTF8Char): PSDL_Renderer; cdecl;
  SDL_CreateRendererWithProperties: function(props: SDL_PropertiesID): PSDL_Renderer; cdecl;
  SDL_CreateSoftwareRenderer: function(surface: PSDL_Surface): PSDL_Renderer; cdecl;
  SDL_GetRenderer: function(window: PSDL_Window): PSDL_Renderer; cdecl;
  SDL_GetRenderWindow: function(renderer: PSDL_Renderer): PSDL_Window; cdecl;
  SDL_GetRendererName: function(renderer: PSDL_Renderer): PUTF8Char; cdecl;
  SDL_GetRendererProperties: function(renderer: PSDL_Renderer): SDL_PropertiesID; cdecl;
  SDL_GetRenderOutputSize: function(renderer: PSDL_Renderer; w: PInteger; h: PInteger): Boolean; cdecl;
  SDL_GetCurrentRenderOutputSize: function(renderer: PSDL_Renderer; w: PInteger; h: PInteger): Boolean; cdecl;
  SDL_CreateTexture: function(renderer: PSDL_Renderer; format: SDL_PixelFormat; access: SDL_TextureAccess; w: Integer; h: Integer): PSDL_Texture; cdecl;
  SDL_CreateTextureFromSurface: function(renderer: PSDL_Renderer; surface: PSDL_Surface): PSDL_Texture; cdecl;
  SDL_CreateTextureWithProperties: function(renderer: PSDL_Renderer; props: SDL_PropertiesID): PSDL_Texture; cdecl;
  SDL_GetTextureProperties: function(texture: PSDL_Texture): SDL_PropertiesID; cdecl;
  SDL_GetRendererFromTexture: function(texture: PSDL_Texture): PSDL_Renderer; cdecl;
  SDL_GetTextureSize: function(texture: PSDL_Texture; w: PSingle; h: PSingle): Boolean; cdecl;
  SDL_SetTextureColorMod: function(texture: PSDL_Texture; r: Uint8; g: Uint8; b: Uint8): Boolean; cdecl;
  SDL_SetTextureColorModFloat: function(texture: PSDL_Texture; r: Single; g: Single; b: Single): Boolean; cdecl;
  SDL_GetTextureColorMod: function(texture: PSDL_Texture; r: PUint8; g: PUint8; b: PUint8): Boolean; cdecl;
  SDL_GetTextureColorModFloat: function(texture: PSDL_Texture; r: PSingle; g: PSingle; b: PSingle): Boolean; cdecl;
  SDL_SetTextureAlphaMod: function(texture: PSDL_Texture; alpha: Uint8): Boolean; cdecl;
  SDL_SetTextureAlphaModFloat: function(texture: PSDL_Texture; alpha: Single): Boolean; cdecl;
  SDL_GetTextureAlphaMod: function(texture: PSDL_Texture; alpha: PUint8): Boolean; cdecl;
  SDL_GetTextureAlphaModFloat: function(texture: PSDL_Texture; alpha: PSingle): Boolean; cdecl;
  SDL_SetTextureBlendMode: function(texture: PSDL_Texture; blendMode: SDL_BlendMode): Boolean; cdecl;
  SDL_GetTextureBlendMode: function(texture: PSDL_Texture; blendMode: PSDL_BlendMode): Boolean; cdecl;
  SDL_SetTextureScaleMode: function(texture: PSDL_Texture; scaleMode: SDL_ScaleMode): Boolean; cdecl;
  SDL_GetTextureScaleMode: function(texture: PSDL_Texture; scaleMode: PSDL_ScaleMode): Boolean; cdecl;
  SDL_UpdateTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const pixels: Pointer; pitch: Integer): Boolean; cdecl;
  SDL_UpdateYUVTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const Yplane: PUint8; Ypitch: Integer; const Uplane: PUint8; Upitch: Integer; const Vplane: PUint8; Vpitch: Integer): Boolean; cdecl;
  SDL_UpdateNVTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const Yplane: PUint8; Ypitch: Integer; const UVplane: PUint8; UVpitch: Integer): Boolean; cdecl;
  SDL_LockTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; pixels: PPointer; pitch: PInteger): Boolean; cdecl;
  SDL_LockTextureToSurface: function(texture: PSDL_Texture; const rect: PSDL_Rect; surface: PPSDL_Surface): Boolean; cdecl;
  SDL_UnlockTexture: procedure(texture: PSDL_Texture); cdecl;
  SDL_SetRenderTarget: function(renderer: PSDL_Renderer; texture: PSDL_Texture): Boolean; cdecl;
  SDL_GetRenderTarget: function(renderer: PSDL_Renderer): PSDL_Texture; cdecl;
  SDL_SetRenderLogicalPresentation: function(renderer: PSDL_Renderer; w: Integer; h: Integer; mode: SDL_RendererLogicalPresentation): Boolean; cdecl;
  SDL_GetRenderLogicalPresentation: function(renderer: PSDL_Renderer; w: PInteger; h: PInteger; mode: PSDL_RendererLogicalPresentation): Boolean; cdecl;
  SDL_GetRenderLogicalPresentationRect: function(renderer: PSDL_Renderer; rect: PSDL_FRect): Boolean; cdecl;
  SDL_RenderCoordinatesFromWindow: function(renderer: PSDL_Renderer; window_x: Single; window_y: Single; x: PSingle; y: PSingle): Boolean; cdecl;
  SDL_RenderCoordinatesToWindow: function(renderer: PSDL_Renderer; x: Single; y: Single; window_x: PSingle; window_y: PSingle): Boolean; cdecl;
  SDL_ConvertEventToRenderCoordinates: function(renderer: PSDL_Renderer; event: PSDL_Event): Boolean; cdecl;
  SDL_SetRenderViewport: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Boolean; cdecl;
  SDL_GetRenderViewport: function(renderer: PSDL_Renderer; rect: PSDL_Rect): Boolean; cdecl;
  SDL_RenderViewportSet: function(renderer: PSDL_Renderer): Boolean; cdecl;
  SDL_GetRenderSafeArea: function(renderer: PSDL_Renderer; rect: PSDL_Rect): Boolean; cdecl;
  SDL_SetRenderClipRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Boolean; cdecl;
  SDL_GetRenderClipRect: function(renderer: PSDL_Renderer; rect: PSDL_Rect): Boolean; cdecl;
  SDL_RenderClipEnabled: function(renderer: PSDL_Renderer): Boolean; cdecl;
  SDL_SetRenderScale: function(renderer: PSDL_Renderer; scaleX: Single; scaleY: Single): Boolean; cdecl;
  SDL_GetRenderScale: function(renderer: PSDL_Renderer; scaleX: PSingle; scaleY: PSingle): Boolean; cdecl;
  SDL_SetRenderDrawColor: function(renderer: PSDL_Renderer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Boolean; cdecl;
  SDL_SetRenderDrawColorFloat: function(renderer: PSDL_Renderer; r: Single; g: Single; b: Single; a: Single): Boolean; cdecl;
  SDL_GetRenderDrawColor: function(renderer: PSDL_Renderer; r: PUint8; g: PUint8; b: PUint8; a: PUint8): Boolean; cdecl;
  SDL_GetRenderDrawColorFloat: function(renderer: PSDL_Renderer; r: PSingle; g: PSingle; b: PSingle; a: PSingle): Boolean; cdecl;
  SDL_SetRenderColorScale: function(renderer: PSDL_Renderer; scale: Single): Boolean; cdecl;
  SDL_GetRenderColorScale: function(renderer: PSDL_Renderer; scale: PSingle): Boolean; cdecl;
  SDL_SetRenderDrawBlendMode: function(renderer: PSDL_Renderer; blendMode: SDL_BlendMode): Boolean; cdecl;
  SDL_GetRenderDrawBlendMode: function(renderer: PSDL_Renderer; blendMode: PSDL_BlendMode): Boolean; cdecl;
  SDL_RenderClear: function(renderer: PSDL_Renderer): Boolean; cdecl;
  SDL_RenderPoint: function(renderer: PSDL_Renderer; x: Single; y: Single): Boolean; cdecl;
  SDL_RenderPoints: function(renderer: PSDL_Renderer; const points: PSDL_FPoint; count: Integer): Boolean; cdecl;
  SDL_RenderLine: function(renderer: PSDL_Renderer; x1: Single; y1: Single; x2: Single; y2: Single): Boolean; cdecl;
  SDL_RenderLines: function(renderer: PSDL_Renderer; const points: PSDL_FPoint; count: Integer): Boolean; cdecl;
  SDL_RenderRect: function(renderer: PSDL_Renderer; const rect: PSDL_FRect): Boolean; cdecl;
  SDL_RenderRects: function(renderer: PSDL_Renderer; const rects: PSDL_FRect; count: Integer): Boolean; cdecl;
  SDL_RenderFillRect: function(renderer: PSDL_Renderer; const rect: PSDL_FRect): Boolean; cdecl;
  SDL_RenderFillRects: function(renderer: PSDL_Renderer; const rects: PSDL_FRect; count: Integer): Boolean; cdecl;
  SDL_RenderTexture: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_FRect; const dstrect: PSDL_FRect): Boolean; cdecl;
  SDL_RenderTextureRotated: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_FRect; const dstrect: PSDL_FRect; angle: Double; const center: PSDL_FPoint; flip: SDL_FlipMode): Boolean; cdecl;
  SDL_RenderTextureAffine: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_FRect; const origin: PSDL_FPoint; const right: PSDL_FPoint; const down: PSDL_FPoint): Boolean; cdecl;
  SDL_RenderTextureTiled: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_FRect; scale: Single; const dstrect: PSDL_FRect): Boolean; cdecl;
  SDL_RenderTexture9Grid: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_FRect; left_width: Single; right_width: Single; top_height: Single; bottom_height: Single; scale: Single; const dstrect: PSDL_FRect): Boolean; cdecl;
  SDL_RenderGeometry: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const vertices: PSDL_Vertex; num_vertices: Integer; const indices: PInteger; num_indices: Integer): Boolean; cdecl;
  SDL_RenderGeometryRaw: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const xy: PSingle; xy_stride: Integer; const color: PSDL_FColor; color_stride: Integer; const uv: PSingle; uv_stride: Integer; num_vertices: Integer; const indices: Pointer; num_indices: Integer; size_indices: Integer): Boolean; cdecl;
  SDL_RenderReadPixels: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): PSDL_Surface; cdecl;
  SDL_RenderPresent: function(renderer: PSDL_Renderer): Boolean; cdecl;
  SDL_DestroyTexture: procedure(texture: PSDL_Texture); cdecl;
  SDL_DestroyRenderer: procedure(renderer: PSDL_Renderer); cdecl;
  SDL_FlushRenderer: function(renderer: PSDL_Renderer): Boolean; cdecl;
  SDL_GetRenderMetalLayer: function(renderer: PSDL_Renderer): Pointer; cdecl;
  SDL_GetRenderMetalCommandEncoder: function(renderer: PSDL_Renderer): Pointer; cdecl;
  SDL_AddVulkanRenderSemaphores: function(renderer: PSDL_Renderer; wait_stage_mask: Uint32; wait_semaphore: Sint64; signal_semaphore: Sint64): Boolean; cdecl;
  SDL_SetRenderVSync: function(renderer: PSDL_Renderer; vsync: Integer): Boolean; cdecl;
  SDL_GetRenderVSync: function(renderer: PSDL_Renderer; vsync: PInteger): Boolean; cdecl;
  SDL_RenderDebugText: function(renderer: PSDL_Renderer; x: Single; y: Single; const str: PUTF8Char): Boolean; cdecl;
  SDL_OpenTitleStorage: function(const &override: PUTF8Char; props: SDL_PropertiesID): PSDL_Storage; cdecl;
  SDL_OpenUserStorage: function(const org: PUTF8Char; const app: PUTF8Char; props: SDL_PropertiesID): PSDL_Storage; cdecl;
  SDL_OpenFileStorage: function(const path: PUTF8Char): PSDL_Storage; cdecl;
  SDL_OpenStorage: function(const iface: PSDL_StorageInterface; userdata: Pointer): PSDL_Storage; cdecl;
  SDL_CloseStorage: function(storage: PSDL_Storage): Boolean; cdecl;
  SDL_StorageReady: function(storage: PSDL_Storage): Boolean; cdecl;
  SDL_GetStorageFileSize: function(storage: PSDL_Storage; const path: PUTF8Char; length: PUint64): Boolean; cdecl;
  SDL_ReadStorageFile: function(storage: PSDL_Storage; const path: PUTF8Char; destination: Pointer; length: Uint64): Boolean; cdecl;
  SDL_WriteStorageFile: function(storage: PSDL_Storage; const path: PUTF8Char; const source: Pointer; length: Uint64): Boolean; cdecl;
  SDL_CreateStorageDirectory: function(storage: PSDL_Storage; const path: PUTF8Char): Boolean; cdecl;
  SDL_EnumerateStorageDirectory: function(storage: PSDL_Storage; const path: PUTF8Char; callback: SDL_EnumerateDirectoryCallback; userdata: Pointer): Boolean; cdecl;
  SDL_RemoveStoragePath: function(storage: PSDL_Storage; const path: PUTF8Char): Boolean; cdecl;
  SDL_RenameStoragePath: function(storage: PSDL_Storage; const oldpath: PUTF8Char; const newpath: PUTF8Char): Boolean; cdecl;
  SDL_CopyStorageFile: function(storage: PSDL_Storage; const oldpath: PUTF8Char; const newpath: PUTF8Char): Boolean; cdecl;
  SDL_GetStoragePathInfo: function(storage: PSDL_Storage; const path: PUTF8Char; info: PSDL_PathInfo): Boolean; cdecl;
  SDL_GetStorageSpaceRemaining: function(storage: PSDL_Storage): Uint64; cdecl;
  SDL_GlobStorageDirectory: function(storage: PSDL_Storage; const path: PUTF8Char; const pattern: PUTF8Char; flags: SDL_GlobFlags; count: PInteger): PPUTF8Char; cdecl;
  SDL_SetWindowsMessageHook: procedure(callback: SDL_WindowsMessageHook; userdata: Pointer); cdecl;
  SDL_GetDirect3D9AdapterIndex: function(displayID: SDL_DisplayID): Integer; cdecl;
  SDL_GetDXGIOutputInfo: function(displayID: SDL_DisplayID; adapterIndex: PInteger; outputIndex: PInteger): Boolean; cdecl;
  SDL_SetX11EventHook: procedure(callback: SDL_X11EventHook; userdata: Pointer); cdecl;
  SDL_IsTablet: function(): Boolean; cdecl;
  SDL_IsTV: function(): Boolean; cdecl;
  SDL_GetSandbox: function(): SDL_Sandbox; cdecl;
  SDL_OnApplicationWillTerminate: procedure(); cdecl;
  SDL_OnApplicationDidReceiveMemoryWarning: procedure(); cdecl;
  SDL_OnApplicationWillEnterBackground: procedure(); cdecl;
  SDL_OnApplicationDidEnterBackground: procedure(); cdecl;
  SDL_OnApplicationWillEnterForeground: procedure(); cdecl;
  SDL_OnApplicationDidEnterForeground: procedure(); cdecl;
  SDL_GetDateTimeLocalePreferences: function(dateFormat: PSDL_DateFormat; timeFormat: PSDL_TimeFormat): Boolean; cdecl;
  SDL_GetCurrentTime: function(ticks: PSDL_Time): Boolean; cdecl;
  SDL_TimeToDateTime: function(ticks: SDL_Time; dt: PSDL_DateTime; localTime: Boolean): Boolean; cdecl;
  SDL_DateTimeToTime: function(const dt: PSDL_DateTime; ticks: PSDL_Time): Boolean; cdecl;
  SDL_TimeToWindows: procedure(ticks: SDL_Time; dwLowDateTime: PUint32; dwHighDateTime: PUint32); cdecl;
  SDL_TimeFromWindows: function(dwLowDateTime: Uint32; dwHighDateTime: Uint32): SDL_Time; cdecl;
  SDL_GetDaysInMonth: function(year: Integer; month: Integer): Integer; cdecl;
  SDL_GetDayOfYear: function(year: Integer; month: Integer; day: Integer): Integer; cdecl;
  SDL_GetDayOfWeek: function(year: Integer; month: Integer; day: Integer): Integer; cdecl;
  SDL_GetTicks: function(): Uint64; cdecl;
  SDL_GetTicksNS: function(): Uint64; cdecl;
  SDL_GetPerformanceCounter: function(): Uint64; cdecl;
  SDL_GetPerformanceFrequency: function(): Uint64; cdecl;
  SDL_Delay: procedure(ms: Uint32); cdecl;
  SDL_DelayNS: procedure(ns: Uint64); cdecl;
  SDL_DelayPrecise: procedure(ns: Uint64); cdecl;
  SDL_AddTimer: function(interval: Uint32; callback: SDL_TimerCallback; userdata: Pointer): SDL_TimerID; cdecl;
  SDL_AddTimerNS: function(interval: Uint64; callback: SDL_NSTimerCallback; userdata: Pointer): SDL_TimerID; cdecl;
  SDL_RemoveTimer: function(id: SDL_TimerID): Boolean; cdecl;
  SDL_GetVersion: function(): Integer; cdecl;
  SDL_GetRevision: function(): PUTF8Char; cdecl;
  IMG_Version: function(): Integer; cdecl;
  IMG_LoadTyped_IO: function(src: PSDL_IOStream; closeio: Boolean; const &type: PUTF8Char): PSDL_Surface; cdecl;
  IMG_Load: function(const &file: PUTF8Char): PSDL_Surface; cdecl;
  IMG_Load_IO: function(src: PSDL_IOStream; closeio: Boolean): PSDL_Surface; cdecl;
  IMG_LoadTexture: function(renderer: PSDL_Renderer; const &file: PUTF8Char): PSDL_Texture; cdecl;
  IMG_LoadTexture_IO: function(renderer: PSDL_Renderer; src: PSDL_IOStream; closeio: Boolean): PSDL_Texture; cdecl;
  IMG_LoadTextureTyped_IO: function(renderer: PSDL_Renderer; src: PSDL_IOStream; closeio: Boolean; const &type: PUTF8Char): PSDL_Texture; cdecl;
  IMG_isAVIF: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isICO: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isCUR: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isBMP: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isGIF: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isJPG: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isJXL: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isLBM: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isPCX: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isPNG: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isPNM: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isSVG: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isQOI: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isTIF: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isXCF: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isXPM: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isXV: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_isWEBP: function(src: PSDL_IOStream): Boolean; cdecl;
  IMG_LoadAVIF_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadICO_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadCUR_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadBMP_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadGIF_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadJPG_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadJXL_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadLBM_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadPCX_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadPNG_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadPNM_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadSVG_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadQOI_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadTGA_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadTIF_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadXCF_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadXPM_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadXV_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadWEBP_IO: function(src: PSDL_IOStream): PSDL_Surface; cdecl;
  IMG_LoadSizedSVG_IO: function(src: PSDL_IOStream; width: Integer; height: Integer): PSDL_Surface; cdecl;
  IMG_ReadXPMFromArray: function(xpm: PPUTF8Char): PSDL_Surface; cdecl;
  IMG_ReadXPMFromArrayToRGB888: function(xpm: PPUTF8Char): PSDL_Surface; cdecl;
  IMG_SaveAVIF: function(surface: PSDL_Surface; const &file: PUTF8Char; quality: Integer): Boolean; cdecl;
  IMG_SaveAVIF_IO: function(surface: PSDL_Surface; dst: PSDL_IOStream; closeio: Boolean; quality: Integer): Boolean; cdecl;
  IMG_SavePNG: function(surface: PSDL_Surface; const &file: PUTF8Char): Boolean; cdecl;
  IMG_SavePNG_IO: function(surface: PSDL_Surface; dst: PSDL_IOStream; closeio: Boolean): Boolean; cdecl;
  IMG_SaveJPG: function(surface: PSDL_Surface; const &file: PUTF8Char; quality: Integer): Boolean; cdecl;
  IMG_SaveJPG_IO: function(surface: PSDL_Surface; dst: PSDL_IOStream; closeio: Boolean; quality: Integer): Boolean; cdecl;
  IMG_LoadAnimation: function(const &file: PUTF8Char): PIMG_Animation; cdecl;
  IMG_LoadAnimation_IO: function(src: PSDL_IOStream; closeio: Boolean): PIMG_Animation; cdecl;
  IMG_LoadAnimationTyped_IO: function(src: PSDL_IOStream; closeio: Boolean; const &type: PUTF8Char): PIMG_Animation; cdecl;
  IMG_FreeAnimation: procedure(anim: PIMG_Animation); cdecl;
  IMG_LoadGIFAnimation_IO: function(src: PSDL_IOStream): PIMG_Animation; cdecl;
  IMG_LoadWEBPAnimation_IO: function(src: PSDL_IOStream): PIMG_Animation; cdecl;
  Mix_Version: function(): Integer; cdecl;
  Mix_Init: function(flags: MIX_InitFlags): MIX_InitFlags; cdecl;
  Mix_Quit: procedure(); cdecl;
  Mix_OpenAudio: function(devid: SDL_AudioDeviceID; const spec: PSDL_AudioSpec): Boolean; cdecl;
  Mix_PauseAudio: procedure(pause_on: Integer); cdecl;
  Mix_QuerySpec: function(frequency: PInteger; format: PSDL_AudioFormat; channels: PInteger): Boolean; cdecl;
  Mix_AllocateChannels: function(numchans: Integer): Integer; cdecl;
  Mix_LoadWAV_IO: function(src: PSDL_IOStream; closeio: Boolean): PMix_Chunk; cdecl;
  Mix_LoadWAV: function(const &file: PUTF8Char): PMix_Chunk; cdecl;
  Mix_LoadMUS: function(const &file: PUTF8Char): PMix_Music; cdecl;
  Mix_LoadMUS_IO: function(src: PSDL_IOStream; closeio: Boolean): PMix_Music; cdecl;
  Mix_LoadMUSType_IO: function(src: PSDL_IOStream; &type: Mix_MusicType; closeio: Boolean): PMix_Music; cdecl;
  Mix_QuickLoad_WAV: function(mem: PUint8): PMix_Chunk; cdecl;
  Mix_QuickLoad_RAW: function(mem: PUint8; len: Uint32): PMix_Chunk; cdecl;
  Mix_FreeChunk: procedure(chunk: PMix_Chunk); cdecl;
  Mix_FreeMusic: procedure(music: PMix_Music); cdecl;
  Mix_GetNumChunkDecoders: function(): Integer; cdecl;
  Mix_GetChunkDecoder: function(index: Integer): PUTF8Char; cdecl;
  Mix_HasChunkDecoder: function(const name: PUTF8Char): Boolean; cdecl;
  Mix_GetNumMusicDecoders: function(): Integer; cdecl;
  Mix_GetMusicDecoder: function(index: Integer): PUTF8Char; cdecl;
  Mix_HasMusicDecoder: function(const name: PUTF8Char): Boolean; cdecl;
  Mix_GetMusicType: function(const music: PMix_Music): Mix_MusicType; cdecl;
  Mix_GetMusicTitle: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_GetMusicTitleTag: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_GetMusicArtistTag: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_GetMusicAlbumTag: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_GetMusicCopyrightTag: function(const music: PMix_Music): PUTF8Char; cdecl;
  Mix_SetPostMix: procedure(mix_func: Mix_MixCallback; arg: Pointer); cdecl;
  Mix_HookMusic: procedure(mix_func: Mix_MixCallback; arg: Pointer); cdecl;
  Mix_HookMusicFinished: procedure(music_finished: Mix_MusicFinishedCallback); cdecl;
  Mix_GetMusicHookData: function(): Pointer; cdecl;
  Mix_ChannelFinished: procedure(channel_finished: Mix_ChannelFinishedCallback); cdecl;
  Mix_RegisterEffect: function(chan: Integer; f: Mix_EffectFunc_t; d: Mix_EffectDone_t; arg: Pointer): Boolean; cdecl;
  Mix_UnregisterEffect: function(channel: Integer; f: Mix_EffectFunc_t): Boolean; cdecl;
  Mix_UnregisterAllEffects: function(channel: Integer): Boolean; cdecl;
  Mix_SetPanning: function(channel: Integer; left: Uint8; right: Uint8): Boolean; cdecl;
  Mix_SetPosition: function(channel: Integer; angle: Sint16; distance: Uint8): Boolean; cdecl;
  Mix_SetDistance: function(channel: Integer; distance: Uint8): Boolean; cdecl;
  Mix_SetReverseStereo: function(channel: Integer; flip: Integer): Boolean; cdecl;
  Mix_ReserveChannels: function(num: Integer): Integer; cdecl;
  Mix_GroupChannel: function(which: Integer; tag: Integer): Boolean; cdecl;
  Mix_GroupChannels: function(from: Integer; &to: Integer; tag: Integer): Boolean; cdecl;
  Mix_GroupAvailable: function(tag: Integer): Integer; cdecl;
  Mix_GroupCount: function(tag: Integer): Integer; cdecl;
  Mix_GroupOldest: function(tag: Integer): Integer; cdecl;
  Mix_GroupNewer: function(tag: Integer): Integer; cdecl;
  Mix_PlayChannel: function(channel: Integer; chunk: PMix_Chunk; loops: Integer): Integer; cdecl;
  Mix_PlayChannelTimed: function(channel: Integer; chunk: PMix_Chunk; loops: Integer; ticks: Integer): Integer; cdecl;
  Mix_PlayMusic: function(music: PMix_Music; loops: Integer): Boolean; cdecl;
  Mix_FadeInMusic: function(music: PMix_Music; loops: Integer; ms: Integer): Boolean; cdecl;
  Mix_FadeInMusicPos: function(music: PMix_Music; loops: Integer; ms: Integer; position: Double): Boolean; cdecl;
  Mix_FadeInChannel: function(channel: Integer; chunk: PMix_Chunk; loops: Integer; ms: Integer): Integer; cdecl;
  Mix_FadeInChannelTimed: function(channel: Integer; chunk: PMix_Chunk; loops: Integer; ms: Integer; ticks: Integer): Integer; cdecl;
  Mix_Volume: function(channel: Integer; volume: Integer): Integer; cdecl;
  Mix_VolumeChunk: function(chunk: PMix_Chunk; volume: Integer): Integer; cdecl;
  Mix_VolumeMusic: function(volume: Integer): Integer; cdecl;
  Mix_GetMusicVolume: function(music: PMix_Music): Integer; cdecl;
  Mix_MasterVolume: function(volume: Integer): Integer; cdecl;
  Mix_HaltChannel: procedure(channel: Integer); cdecl;
  Mix_HaltGroup: procedure(tag: Integer); cdecl;
  Mix_HaltMusic: procedure(); cdecl;
  Mix_ExpireChannel: function(channel: Integer; ticks: Integer): Integer; cdecl;
  Mix_FadeOutChannel: function(which: Integer; ms: Integer): Integer; cdecl;
  Mix_FadeOutGroup: function(tag: Integer; ms: Integer): Integer; cdecl;
  Mix_FadeOutMusic: function(ms: Integer): Boolean; cdecl;
  Mix_FadingMusic: function(): Mix_Fading; cdecl;
  Mix_FadingChannel: function(which: Integer): Mix_Fading; cdecl;
  Mix_Pause: procedure(channel: Integer); cdecl;
  Mix_PauseGroup: procedure(tag: Integer); cdecl;
  Mix_Resume: procedure(channel: Integer); cdecl;
  Mix_ResumeGroup: procedure(tag: Integer); cdecl;
  Mix_Paused: function(channel: Integer): Integer; cdecl;
  Mix_PauseMusic: procedure(); cdecl;
  Mix_ResumeMusic: procedure(); cdecl;
  Mix_RewindMusic: procedure(); cdecl;
  Mix_PausedMusic: function(): Boolean; cdecl;
  Mix_ModMusicJumpToOrder: function(order: Integer): Boolean; cdecl;
  Mix_StartTrack: function(music: PMix_Music; track: Integer): Boolean; cdecl;
  Mix_GetNumTracks: function(music: PMix_Music): Integer; cdecl;
  Mix_SetMusicPosition: function(position: Double): Boolean; cdecl;
  Mix_GetMusicPosition: function(music: PMix_Music): Double; cdecl;
  Mix_MusicDuration: function(music: PMix_Music): Double; cdecl;
  Mix_GetMusicLoopStartTime: function(music: PMix_Music): Double; cdecl;
  Mix_GetMusicLoopEndTime: function(music: PMix_Music): Double; cdecl;
  Mix_GetMusicLoopLengthTime: function(music: PMix_Music): Double; cdecl;
  Mix_Playing: function(channel: Integer): Integer; cdecl;
  Mix_PlayingMusic: function(): Boolean; cdecl;
  Mix_SetSoundFonts: function(const paths: PUTF8Char): Boolean; cdecl;
  Mix_GetSoundFonts: function(): PUTF8Char; cdecl;
  Mix_EachSoundFont: function(&function: Mix_EachSoundFontCallback; data: Pointer): Boolean; cdecl;
  Mix_SetTimidityCfg: function(const path: PUTF8Char): Boolean; cdecl;
  Mix_GetTimidityCfg: function(): PUTF8Char; cdecl;
  Mix_GetChunk: function(channel: Integer): PMix_Chunk; cdecl;
  Mix_CloseAudio: procedure(); cdecl;
  SDLNet_Version: function(): Integer; cdecl;
  SDLNet_Init: function(): Boolean; cdecl;
  SDLNet_Quit: procedure(); cdecl;
  SDLNet_ResolveHostname: function(const host: PUTF8Char): PSDLNet_Address; cdecl;
  SDLNet_WaitUntilResolved: function(address: PSDLNet_Address; timeout: Sint32): Integer; cdecl;
  SDLNet_GetAddressStatus: function(address: PSDLNet_Address): Integer; cdecl;
  SDLNet_GetAddressString: function(address: PSDLNet_Address): PUTF8Char; cdecl;
  SDLNet_RefAddress: function(address: PSDLNet_Address): PSDLNet_Address; cdecl;
  SDLNet_UnrefAddress: procedure(address: PSDLNet_Address); cdecl;
  SDLNet_SimulateAddressResolutionLoss: procedure(percent_loss: Integer); cdecl;
  SDLNet_CompareAddresses: function(const a: PSDLNet_Address; const b: PSDLNet_Address): Integer; cdecl;
  SDLNet_GetLocalAddresses: function(num_addresses: PInteger): PPSDLNet_Address; cdecl;
  SDLNet_FreeLocalAddresses: procedure(addresses: PPSDLNet_Address); cdecl;
  SDLNet_CreateClient: function(address: PSDLNet_Address; port: Uint16): PSDLNet_StreamSocket; cdecl;
  SDLNet_WaitUntilConnected: function(sock: PSDLNet_StreamSocket; timeout: Sint32): Integer; cdecl;
  SDLNet_CreateServer: function(addr: PSDLNet_Address; port: Uint16): PSDLNet_Server; cdecl;
  SDLNet_AcceptClient: function(server: PSDLNet_Server; client_stream: PPSDLNet_StreamSocket): Boolean; cdecl;
  SDLNet_DestroyServer: procedure(server: PSDLNet_Server); cdecl;
  SDLNet_GetStreamSocketAddress: function(sock: PSDLNet_StreamSocket): PSDLNet_Address; cdecl;
  SDLNet_GetConnectionStatus: function(sock: PSDLNet_StreamSocket): Integer; cdecl;
  SDLNet_WriteToStreamSocket: function(sock: PSDLNet_StreamSocket; const buf: Pointer; buflen: Integer): Boolean; cdecl;
  SDLNet_GetStreamSocketPendingWrites: function(sock: PSDLNet_StreamSocket): Integer; cdecl;
  SDLNet_WaitUntilStreamSocketDrained: function(sock: PSDLNet_StreamSocket; timeout: Sint32): Integer; cdecl;
  SDLNet_ReadFromStreamSocket: function(sock: PSDLNet_StreamSocket; buf: Pointer; buflen: Integer): Integer; cdecl;
  SDLNet_SimulateStreamPacketLoss: procedure(sock: PSDLNet_StreamSocket; percent_loss: Integer); cdecl;
  SDLNet_DestroyStreamSocket: procedure(sock: PSDLNet_StreamSocket); cdecl;
  SDLNet_CreateDatagramSocket: function(addr: PSDLNet_Address; port: Uint16): PSDLNet_DatagramSocket; cdecl;
  SDLNet_SendDatagram: function(sock: PSDLNet_DatagramSocket; address: PSDLNet_Address; port: Uint16; const buf: Pointer; buflen: Integer): Boolean; cdecl;
  SDLNet_ReceiveDatagram: function(sock: PSDLNet_DatagramSocket; dgram: PPSDLNet_Datagram): Boolean; cdecl;
  SDLNet_DestroyDatagram: procedure(dgram: PSDLNet_Datagram); cdecl;
  SDLNet_SimulateDatagramPacketLoss: procedure(sock: PSDLNet_DatagramSocket; percent_loss: Integer); cdecl;
  SDLNet_DestroyDatagramSocket: procedure(sock: PSDLNet_DatagramSocket); cdecl;
  SDLNet_WaitUntilInputAvailable: function(vsockets: PPointer; numsockets: Integer; timeout: Sint32): Integer; cdecl;
  TTF_Version: function(): Integer; cdecl;
  TTF_GetFreeTypeVersion: procedure(major: PInteger; minor: PInteger; patch: PInteger); cdecl;
  TTF_GetHarfBuzzVersion: procedure(major: PInteger; minor: PInteger; patch: PInteger); cdecl;
  TTF_Init: function(): Boolean; cdecl;
  TTF_OpenFont: function(const &file: PUTF8Char; ptsize: Single): PTTF_Font; cdecl;
  TTF_OpenFontIO: function(src: PSDL_IOStream; closeio: Boolean; ptsize: Single): PTTF_Font; cdecl;
  TTF_OpenFontWithProperties: function(props: SDL_PropertiesID): PTTF_Font; cdecl;
  TTF_GetFontProperties: function(font: PTTF_Font): SDL_PropertiesID; cdecl;
  TTF_GetFontGeneration: function(font: PTTF_Font): Uint32; cdecl;
  TTF_SetFontSize: function(font: PTTF_Font; ptsize: Single): Boolean; cdecl;
  TTF_SetFontSizeDPI: function(font: PTTF_Font; ptsize: Single; hdpi: Integer; vdpi: Integer): Boolean; cdecl;
  TTF_GetFontSize: function(font: PTTF_Font): Single; cdecl;
  TTF_GetFontDPI: function(font: PTTF_Font; hdpi: PInteger; vdpi: PInteger): Boolean; cdecl;
  TTF_SetFontStyle: procedure(font: PTTF_Font; style: Integer); cdecl;
  TTF_GetFontStyle: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontOutline: function(font: PTTF_Font; outline: Integer): Boolean; cdecl;
  TTF_GetFontOutline: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontHinting: procedure(font: PTTF_Font; hinting: Integer); cdecl;
  TTF_GetFontHinting: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontSDF: function(font: PTTF_Font; enabled: Boolean): Boolean; cdecl;
  TTF_GetFontSDF: function(const font: PTTF_Font): Boolean; cdecl;
  TTF_SetFontWrapAlignment: procedure(font: PTTF_Font; align: TTF_HorizontalAlignment); cdecl;
  TTF_GetFontWrapAlignment: function(const font: PTTF_Font): TTF_HorizontalAlignment; cdecl;
  TTF_GetFontHeight: function(const font: PTTF_Font): Integer; cdecl;
  TTF_GetFontAscent: function(const font: PTTF_Font): Integer; cdecl;
  TTF_GetFontDescent: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontLineSkip: procedure(font: PTTF_Font; lineskip: Integer); cdecl;
  TTF_GetFontLineSkip: function(const font: PTTF_Font): Integer; cdecl;
  TTF_SetFontKerning: procedure(font: PTTF_Font; enabled: Boolean); cdecl;
  TTF_GetFontKerning: function(const font: PTTF_Font): Boolean; cdecl;
  TTF_FontIsFixedWidth: function(const font: PTTF_Font): Boolean; cdecl;
  TTF_FontIsScalable: function(const font: PTTF_Font): Boolean; cdecl;
  TTF_GetFontFamilyName: function(const font: PTTF_Font): PUTF8Char; cdecl;
  TTF_GetFontStyleName: function(const font: PTTF_Font): PUTF8Char; cdecl;
  TTF_RenderText_Solid: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_Solid_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; fg: SDL_Color; wrapLength: Integer): PSDL_Surface; cdecl;
  TTF_RenderGlyph_Solid: function(font: PTTF_Font; ch: Uint32; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_SetFontDirection: function(font: PTTF_Font; direction: TTF_Direction): Boolean; cdecl;
  TTF_GetFontDirection: function(font: PTTF_Font): TTF_Direction; cdecl;
  TTF_SetFontScript: function(font: PTTF_Font; const script: PUTF8Char): Boolean; cdecl;
  TTF_GetGlyphScript: function(ch: Uint32; script: PUTF8Char; script_size: NativeUInt): Boolean; cdecl;
  TTF_SetFontLanguage: function(font: PTTF_Font; const language_bcp47: PUTF8Char): Boolean; cdecl;
  TTF_FontHasGlyph: function(font: PTTF_Font; ch: Uint32): Boolean; cdecl;
  TTF_GetGlyphImage: function(font: PTTF_Font; ch: Uint32): PSDL_Surface; cdecl;
  TTF_GetGlyphImageForIndex: function(font: PTTF_Font; glyph_index: Uint32): PSDL_Surface; cdecl;
  TTF_GetGlyphMetrics: function(font: PTTF_Font; ch: Uint32; minx: PInteger; maxx: PInteger; miny: PInteger; maxy: PInteger; advance: PInteger): Boolean; cdecl;
  TTF_GetGlyphKerning: function(font: PTTF_Font; previous_ch: Uint32; ch: Uint32; kerning: PInteger): Boolean; cdecl;
  TTF_GetStringSize: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; w: PInteger; h: PInteger): Boolean; cdecl;
  TTF_GetStringSizeWrapped: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; wrap_width: Integer; w: PInteger; h: PInteger): Boolean; cdecl;
  TTF_MeasureString: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; max_width: Integer; measured_width: PInteger; measured_length: PNativeUInt): Boolean; cdecl;
  TTF_RenderText_Shaded: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_Shaded_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; fg: SDL_Color; bg: SDL_Color; wrap_width: Integer): PSDL_Surface; cdecl;
  TTF_RenderGlyph_Shaded: function(font: PTTF_Font; ch: Uint32; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_Blended: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_Blended_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; fg: SDL_Color; wrap_width: Integer): PSDL_Surface; cdecl;
  TTF_RenderGlyph_Blended: function(font: PTTF_Font; ch: Uint32; fg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_LCD: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_RenderText_LCD_Wrapped: function(font: PTTF_Font; const text: PUTF8Char; length: NativeUInt; fg: SDL_Color; bg: SDL_Color; wrap_width: Integer): PSDL_Surface; cdecl;
  TTF_RenderGlyph_LCD: function(font: PTTF_Font; ch: Uint32; fg: SDL_Color; bg: SDL_Color): PSDL_Surface; cdecl;
  TTF_CreateSurfaceTextEngine: function(): PTTF_TextEngine; cdecl;
  TTF_DrawSurfaceText: function(text: PTTF_Text; x: Integer; y: Integer; surface: PSDL_Surface): Boolean; cdecl;
  TTF_DestroySurfaceTextEngine: procedure(engine: PTTF_TextEngine); cdecl;
  TTF_CreateRendererTextEngine: function(renderer: PSDL_Renderer): PTTF_TextEngine; cdecl;
  TTF_DrawRendererText: function(text: PTTF_Text; x: Single; y: Single): Boolean; cdecl;
  TTF_DestroyRendererTextEngine: procedure(engine: PTTF_TextEngine); cdecl;
  TTF_CreateGPUTextEngine: function(device: PSDL_GPUDevice): PTTF_TextEngine; cdecl;
  TTF_GetGPUTextDrawData: function(text: PTTF_Text): PTTF_GPUAtlasDrawSequence; cdecl;
  TTF_DestroyGPUTextEngine: procedure(engine: PTTF_TextEngine); cdecl;
  TTF_CreateText: function(engine: PTTF_TextEngine; font: PTTF_Font; const text: PUTF8Char; length: NativeUInt): PTTF_Text; cdecl;
  TTF_GetTextProperties: function(text: PTTF_Text): SDL_PropertiesID; cdecl;
  TTF_SetTextEngine: function(text: PTTF_Text; engine: PTTF_TextEngine): Boolean; cdecl;
  TTF_GetTextEngine: function(text: PTTF_Text): PTTF_TextEngine; cdecl;
  TTF_SetTextFont: function(text: PTTF_Text; font: PTTF_Font): Boolean; cdecl;
  TTF_GetTextFont: function(text: PTTF_Text): PTTF_Font; cdecl;
  TTF_SetTextColor: function(text: PTTF_Text; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Boolean; cdecl;
  TTF_SetTextColorFloat: function(text: PTTF_Text; r: Single; g: Single; b: Single; a: Single): Boolean; cdecl;
  TTF_GetTextColor: function(text: PTTF_Text; r: PUint8; g: PUint8; b: PUint8; a: PUint8): Boolean; cdecl;
  TTF_GetTextColorFloat: function(text: PTTF_Text; r: PSingle; g: PSingle; b: PSingle; a: PSingle): Boolean; cdecl;
  TTF_SetTextPosition: function(text: PTTF_Text; x: Integer; y: Integer): Boolean; cdecl;
  TTF_GetTextPosition: function(text: PTTF_Text; x: PInteger; y: PInteger): Boolean; cdecl;
  TTF_SetTextWrapWidth: function(text: PTTF_Text; wrap_width: Integer): Boolean; cdecl;
  TTF_GetTextWrapWidth: function(text: PTTF_Text; wrap_width: PInteger): Boolean; cdecl;
  TTF_SetTextWrapWhitespaceVisible: function(text: PTTF_Text; visible: Boolean): Boolean; cdecl;
  TTF_TextWrapWhitespaceVisible: function(text: PTTF_Text): Boolean; cdecl;
  TTF_SetTextString: function(text: PTTF_Text; const &string: PUTF8Char; length: NativeUInt): Boolean; cdecl;
  TTF_InsertTextString: function(text: PTTF_Text; offset: Integer; const &string: PUTF8Char; length: NativeUInt): Boolean; cdecl;
  TTF_AppendTextString: function(text: PTTF_Text; const &string: PUTF8Char; length: NativeUInt): Boolean; cdecl;
  TTF_DeleteTextString: function(text: PTTF_Text; offset: Integer; length: Integer): Boolean; cdecl;
  TTF_GetTextSize: function(text: PTTF_Text; w: PInteger; h: PInteger): Boolean; cdecl;
  TTF_GetTextSubString: function(text: PTTF_Text; offset: Integer; substring: PTTF_SubString): Boolean; cdecl;
  TTF_GetTextSubStringForLine: function(text: PTTF_Text; line: Integer; substring: PTTF_SubString): Boolean; cdecl;
  TTF_GetTextSubStringsForRange: function(text: PTTF_Text; offset: Integer; length: Integer; count: PInteger): PPTTF_SubString; cdecl;
  TTF_GetTextSubStringForPoint: function(text: PTTF_Text; x: Integer; y: Integer; substring: PTTF_SubString): Boolean; cdecl;
  TTF_GetPreviousTextSubString: function(text: PTTF_Text; const substring: PTTF_SubString; previous: PTTF_SubString): Boolean; cdecl;
  TTF_GetNextTextSubString: function(text: PTTF_Text; const substring: PTTF_SubString; next: PTTF_SubString): Boolean; cdecl;
  TTF_UpdateText: function(text: PTTF_Text): Boolean; cdecl;
  TTF_DestroyText: procedure(text: PTTF_Text); cdecl;
  TTF_CloseFont: procedure(font: PTTF_Font); cdecl;
  TTF_Quit: procedure(); cdecl;
  TTF_WasInit: function(): Integer; cdecl;
  crc32: function(crc: uLong; const buf: PBytef; len: uInt): uLong; cdecl;
  unzOpen64: function(const path: Pointer): unzFile; cdecl;
  unzLocateFile: function(&file: unzFile; const szFileName: PUTF8Char; iCaseSensitivity: Integer): Integer; cdecl;
  unzClose: function(&file: unzFile): Integer; cdecl;
  unzOpenCurrentFilePassword: function(&file: unzFile; const password: PUTF8Char): Integer; cdecl;
  unzGetCurrentFileInfo64: function(&file: unzFile; pfile_info: Punz_file_info64; szFileName: PUTF8Char; fileNameBufferSize: uLong; extraField: Pointer; extraFieldBufferSize: uLong; szComment: PUTF8Char; commentBufferSize: uLong): Integer; cdecl;
  unzReadCurrentFile: function(&file: unzFile; buf: voidp; len: Cardinal): Integer; cdecl;
  unzCloseCurrentFile: function(&file: unzFile): Integer; cdecl;
  unztell64: function(&file: unzFile): UInt64; cdecl;
  zipOpen64: function(const pathname: Pointer; append: Integer): zipFile; cdecl;
  zipOpenNewFileInZip3_64: function(&file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong; zip64: Integer): Integer; cdecl;
  zipWriteInFileInZip: function(&file: zipFile; const buf: Pointer; len: Cardinal): Integer; cdecl;
  zipCloseFileInZip: function(&file: zipFile): Integer; cdecl;
  zipClose: function(&file: zipFile; const global_comment: PUTF8Char): Integer; cdecl;
  plm_create_with_filename: function(const filename: PUTF8Char): Pplm_t; cdecl;
  plm_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_t; cdecl;
  plm_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_t; cdecl;
  plm_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_t; cdecl;
  plm_destroy: procedure(self: Pplm_t); cdecl;
  plm_has_headers: function(self: Pplm_t): Integer; cdecl;
  plm_probe: function(self: Pplm_t; probesize: NativeUInt): Integer; cdecl;
  plm_get_video_enabled: function(self: Pplm_t): Integer; cdecl;
  plm_set_video_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;
  plm_get_num_video_streams: function(self: Pplm_t): Integer; cdecl;
  plm_get_width: function(self: Pplm_t): Integer; cdecl;
  plm_get_height: function(self: Pplm_t): Integer; cdecl;
  plm_get_pixel_aspect_ratio: function(self: Pplm_t): Double; cdecl;
  plm_get_framerate: function(self: Pplm_t): Double; cdecl;
  plm_get_audio_enabled: function(self: Pplm_t): Integer; cdecl;
  plm_set_audio_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;
  plm_get_num_audio_streams: function(self: Pplm_t): Integer; cdecl;
  plm_set_audio_stream: procedure(self: Pplm_t; stream_index: Integer); cdecl;
  plm_get_samplerate: function(self: Pplm_t): Integer; cdecl;
  plm_get_audio_lead_time: function(self: Pplm_t): Double; cdecl;
  plm_set_audio_lead_time: procedure(self: Pplm_t; lead_time: Double); cdecl;
  plm_get_time: function(self: Pplm_t): Double; cdecl;
  plm_get_duration: function(self: Pplm_t): Double; cdecl;
  plm_rewind: procedure(self: Pplm_t); cdecl;
  plm_get_loop: function(self: Pplm_t): Integer; cdecl;
  plm_set_loop: procedure(self: Pplm_t; loop: Integer); cdecl;
  plm_has_ended: function(self: Pplm_t): Integer; cdecl;
  plm_set_video_decode_callback: procedure(self: Pplm_t; fp: plm_video_decode_callback; user: Pointer); cdecl;
  plm_set_audio_decode_callback: procedure(self: Pplm_t; fp: plm_audio_decode_callback; user: Pointer); cdecl;
  plm_decode: procedure(self: Pplm_t; seconds: Double); cdecl;
  plm_decode_video: function(self: Pplm_t): Pplm_frame_t; cdecl;
  plm_decode_audio: function(self: Pplm_t): Pplm_samples_t; cdecl;
  plm_seek: function(self: Pplm_t; time: Double; seek_exact: Integer): Integer; cdecl;
  plm_seek_frame: function(self: Pplm_t; time: Double; seek_exact: Integer): Pplm_frame_t; cdecl;
  plm_buffer_create_with_filename: function(const filename: PUTF8Char): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_capacity: function(capacity: NativeUInt): Pplm_buffer_t; cdecl;
  plm_buffer_create_for_appending: function(initial_capacity: NativeUInt): Pplm_buffer_t; cdecl;
  plm_buffer_destroy: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_write: function(self: Pplm_buffer_t; bytes: PUInt8; length: NativeUInt): NativeUInt; cdecl;
  plm_buffer_signal_end: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_set_load_callback: procedure(self: Pplm_buffer_t; fp: plm_buffer_load_callback; user: Pointer); cdecl;
  plm_buffer_rewind: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_get_size: function(self: Pplm_buffer_t): NativeUInt; cdecl;
  plm_buffer_get_remaining: function(self: Pplm_buffer_t): NativeUInt; cdecl;
  plm_buffer_has_ended: function(self: Pplm_buffer_t): Integer; cdecl;
  plm_demux_create: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_demux_t; cdecl;
  plm_demux_destroy: procedure(self: Pplm_demux_t); cdecl;
  plm_demux_has_headers: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_probe: function(self: Pplm_demux_t; probesize: NativeUInt): Integer; cdecl;
  plm_demux_get_num_video_streams: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_get_num_audio_streams: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_rewind: procedure(self: Pplm_demux_t); cdecl;
  plm_demux_has_ended: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_seek: function(self: Pplm_demux_t; time: Double; &type: Integer; force_intra: Integer): Pplm_packet_t; cdecl;
  plm_demux_get_start_time: function(self: Pplm_demux_t; &type: Integer): Double; cdecl;
  plm_demux_get_duration: function(self: Pplm_demux_t; &type: Integer): Double; cdecl;
  plm_demux_decode: function(self: Pplm_demux_t): Pplm_packet_t; cdecl;
  plm_video_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_video_t; cdecl;
  plm_video_destroy: procedure(self: Pplm_video_t); cdecl;
  plm_video_has_header: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_get_framerate: function(self: Pplm_video_t): Double; cdecl;
  plm_video_get_pixel_aspect_ratio: function(self: Pplm_video_t): Double; cdecl;
  plm_video_get_width: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_get_height: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_set_no_delay: procedure(self: Pplm_video_t; no_delay: Integer); cdecl;
  plm_video_get_time: function(self: Pplm_video_t): Double; cdecl;
  plm_video_set_time: procedure(self: Pplm_video_t; time: Double); cdecl;
  plm_video_rewind: procedure(self: Pplm_video_t); cdecl;
  plm_video_has_ended: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_decode: function(self: Pplm_video_t): Pplm_frame_t; cdecl;
  plm_frame_to_rgb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_bgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_rgba: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_bgra: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_argb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_abgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_audio_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_audio_t; cdecl;
  plm_audio_destroy: procedure(self: Pplm_audio_t); cdecl;
  plm_audio_has_header: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_get_samplerate: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_get_time: function(self: Pplm_audio_t): Double; cdecl;
  plm_audio_set_time: procedure(self: Pplm_audio_t; time: Double); cdecl;
  plm_audio_rewind: procedure(self: Pplm_audio_t); cdecl;
  plm_audio_has_ended: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_decode: function(self: Pplm_audio_t): Pplm_samples_t; cdecl;
  spFloatArray_create: function(initialCapacity: Integer): PspFloatArray; cdecl;
  spFloatArray_dispose: procedure(self: PspFloatArray); cdecl;
  spFloatArray_clear: procedure(self: PspFloatArray); cdecl;
  spFloatArray_setSize: function(self: PspFloatArray; newSize: Integer): PspFloatArray; cdecl;
  spFloatArray_ensureCapacity: procedure(self: PspFloatArray; newCapacity: Integer); cdecl;
  spFloatArray_add: procedure(self: PspFloatArray; value: Single); cdecl;
  spFloatArray_addAll: procedure(self: PspFloatArray; other: PspFloatArray); cdecl;
  spFloatArray_addAllValues: procedure(self: PspFloatArray; values: PSingle; offset: Integer; count: Integer); cdecl;
  spFloatArray_removeAt: procedure(self: PspFloatArray; index: Integer); cdecl;
  spFloatArray_contains: function(self: PspFloatArray; value: Single): Integer; cdecl;
  spFloatArray_pop: function(self: PspFloatArray): Single; cdecl;
  spFloatArray_peek: function(self: PspFloatArray): Single; cdecl;
  spIntArray_create: function(initialCapacity: Integer): PspIntArray; cdecl;
  spIntArray_dispose: procedure(self: PspIntArray); cdecl;
  spIntArray_clear: procedure(self: PspIntArray); cdecl;
  spIntArray_setSize: function(self: PspIntArray; newSize: Integer): PspIntArray; cdecl;
  spIntArray_ensureCapacity: procedure(self: PspIntArray; newCapacity: Integer); cdecl;
  spIntArray_add: procedure(self: PspIntArray; value: Integer); cdecl;
  spIntArray_addAll: procedure(self: PspIntArray; other: PspIntArray); cdecl;
  spIntArray_addAllValues: procedure(self: PspIntArray; values: PInteger; offset: Integer; count: Integer); cdecl;
  spIntArray_removeAt: procedure(self: PspIntArray; index: Integer); cdecl;
  spIntArray_contains: function(self: PspIntArray; value: Integer): Integer; cdecl;
  spIntArray_pop: function(self: PspIntArray): Integer; cdecl;
  spIntArray_peek: function(self: PspIntArray): Integer; cdecl;
  spShortArray_create: function(initialCapacity: Integer): PspShortArray; cdecl;
  spShortArray_dispose: procedure(self: PspShortArray); cdecl;
  spShortArray_clear: procedure(self: PspShortArray); cdecl;
  spShortArray_setSize: function(self: PspShortArray; newSize: Integer): PspShortArray; cdecl;
  spShortArray_ensureCapacity: procedure(self: PspShortArray; newCapacity: Integer); cdecl;
  spShortArray_add: procedure(self: PspShortArray; value: Smallint); cdecl;
  spShortArray_addAll: procedure(self: PspShortArray; other: PspShortArray); cdecl;
  spShortArray_addAllValues: procedure(self: PspShortArray; values: PSmallint; offset: Integer; count: Integer); cdecl;
  spShortArray_removeAt: procedure(self: PspShortArray; index: Integer); cdecl;
  spShortArray_contains: function(self: PspShortArray; value: Smallint): Integer; cdecl;
  spShortArray_pop: function(self: PspShortArray): Smallint; cdecl;
  spShortArray_peek: function(self: PspShortArray): Smallint; cdecl;
  spUnsignedShortArray_create: function(initialCapacity: Integer): PspUnsignedShortArray; cdecl;
  spUnsignedShortArray_dispose: procedure(self: PspUnsignedShortArray); cdecl;
  spUnsignedShortArray_clear: procedure(self: PspUnsignedShortArray); cdecl;
  spUnsignedShortArray_setSize: function(self: PspUnsignedShortArray; newSize: Integer): PspUnsignedShortArray; cdecl;
  spUnsignedShortArray_ensureCapacity: procedure(self: PspUnsignedShortArray; newCapacity: Integer); cdecl;
  spUnsignedShortArray_add: procedure(self: PspUnsignedShortArray; value: Word); cdecl;
  spUnsignedShortArray_addAll: procedure(self: PspUnsignedShortArray; other: PspUnsignedShortArray); cdecl;
  spUnsignedShortArray_addAllValues: procedure(self: PspUnsignedShortArray; values: PWord; offset: Integer; count: Integer); cdecl;
  spUnsignedShortArray_removeAt: procedure(self: PspUnsignedShortArray; index: Integer); cdecl;
  spUnsignedShortArray_contains: function(self: PspUnsignedShortArray; value: Word): Integer; cdecl;
  spUnsignedShortArray_pop: function(self: PspUnsignedShortArray): Word; cdecl;
  spUnsignedShortArray_peek: function(self: PspUnsignedShortArray): Word; cdecl;
  spArrayFloatArray_create: function(initialCapacity: Integer): PspArrayFloatArray; cdecl;
  spArrayFloatArray_dispose: procedure(self: PspArrayFloatArray); cdecl;
  spArrayFloatArray_clear: procedure(self: PspArrayFloatArray); cdecl;
  spArrayFloatArray_setSize: function(self: PspArrayFloatArray; newSize: Integer): PspArrayFloatArray; cdecl;
  spArrayFloatArray_ensureCapacity: procedure(self: PspArrayFloatArray; newCapacity: Integer); cdecl;
  spArrayFloatArray_add: procedure(self: PspArrayFloatArray; value: PspFloatArray); cdecl;
  spArrayFloatArray_addAll: procedure(self: PspArrayFloatArray; other: PspArrayFloatArray); cdecl;
  spArrayFloatArray_addAllValues: procedure(self: PspArrayFloatArray; values: PPspFloatArray; offset: Integer; count: Integer); cdecl;
  spArrayFloatArray_removeAt: procedure(self: PspArrayFloatArray; index: Integer); cdecl;
  spArrayFloatArray_contains: function(self: PspArrayFloatArray; value: PspFloatArray): Integer; cdecl;
  spArrayFloatArray_pop: function(self: PspArrayFloatArray): PspFloatArray; cdecl;
  spArrayFloatArray_peek: function(self: PspArrayFloatArray): PspFloatArray; cdecl;
  spArrayShortArray_create: function(initialCapacity: Integer): PspArrayShortArray; cdecl;
  spArrayShortArray_dispose: procedure(self: PspArrayShortArray); cdecl;
  spArrayShortArray_clear: procedure(self: PspArrayShortArray); cdecl;
  spArrayShortArray_setSize: function(self: PspArrayShortArray; newSize: Integer): PspArrayShortArray; cdecl;
  spArrayShortArray_ensureCapacity: procedure(self: PspArrayShortArray; newCapacity: Integer); cdecl;
  spArrayShortArray_add: procedure(self: PspArrayShortArray; value: PspShortArray); cdecl;
  spArrayShortArray_addAll: procedure(self: PspArrayShortArray; other: PspArrayShortArray); cdecl;
  spArrayShortArray_addAllValues: procedure(self: PspArrayShortArray; values: PPspShortArray; offset: Integer; count: Integer); cdecl;
  spArrayShortArray_removeAt: procedure(self: PspArrayShortArray; index: Integer); cdecl;
  spArrayShortArray_contains: function(self: PspArrayShortArray; value: PspShortArray): Integer; cdecl;
  spArrayShortArray_pop: function(self: PspArrayShortArray): PspShortArray; cdecl;
  spArrayShortArray_peek: function(self: PspArrayShortArray): PspShortArray; cdecl;
  spEventData_create: function(const name: PUTF8Char): PspEventData; cdecl;
  spEventData_dispose: procedure(self: PspEventData); cdecl;
  spEvent_create: function(time: Single; data: PspEventData): PspEvent; cdecl;
  spEvent_dispose: procedure(self: PspEvent); cdecl;
  spAttachment_dispose: procedure(self: PspAttachment); cdecl;
  spAttachment_copy: function(self: PspAttachment): PspAttachment; cdecl;
  spColor_create: function(): PspColor; cdecl;
  spColor_dispose: procedure(self: PspColor); cdecl;
  spColor_setFromFloats: procedure(color: PspColor; r: Single; g: Single; b: Single; a: Single); cdecl;
  spColor_setFromFloats3: procedure(self: PspColor; r: Single; g: Single; b: Single); cdecl;
  spColor_setFromColor: procedure(color: PspColor; otherColor: PspColor); cdecl;
  spColor_setFromColor3: procedure(self: PspColor; otherColor: PspColor); cdecl;
  spColor_addFloats: procedure(color: PspColor; r: Single; g: Single; b: Single; a: Single); cdecl;
  spColor_addFloats3: procedure(color: PspColor; r: Single; g: Single; b: Single); cdecl;
  spColor_addColor: procedure(color: PspColor; otherColor: PspColor); cdecl;
  spColor_clamp: procedure(color: PspColor); cdecl;
  spBoneData_create: function(index: Integer; const name: PUTF8Char; parent: PspBoneData): PspBoneData; cdecl;
  spBoneData_dispose: procedure(self: PspBoneData); cdecl;
  spBone_setYDown: procedure(yDown: Integer); cdecl;
  spBone_isYDown: function(): Integer; cdecl;
  spBone_create: function(data: PspBoneData; skeleton: PspSkeleton; parent: PspBone): PspBone; cdecl;
  spBone_dispose: procedure(self: PspBone); cdecl;
  spBone_setToSetupPose: procedure(self: PspBone); cdecl;
  spBone_update: procedure(self: PspBone); cdecl;
  spBone_updateWorldTransform: procedure(self: PspBone); cdecl;
  spBone_updateWorldTransformWith: procedure(self: PspBone; x: Single; y: Single; rotation: Single; scaleX: Single; scaleY: Single; shearX: Single; shearY: Single); cdecl;
  spBone_getWorldRotationX: function(self: PspBone): Single; cdecl;
  spBone_getWorldRotationY: function(self: PspBone): Single; cdecl;
  spBone_getWorldScaleX: function(self: PspBone): Single; cdecl;
  spBone_getWorldScaleY: function(self: PspBone): Single; cdecl;
  spBone_updateAppliedTransform: procedure(self: PspBone); cdecl;
  spBone_worldToLocal: procedure(self: PspBone; worldX: Single; worldY: Single; localX: PSingle; localY: PSingle); cdecl;
  spBone_worldToParent: procedure(self: PspBone; worldX: Single; worldY: Single; parentX: PSingle; parentY: PSingle); cdecl;
  spBone_localToWorld: procedure(self: PspBone; localX: Single; localY: Single; worldX: PSingle; worldY: PSingle); cdecl;
  spBone_localToParent: procedure(self: PspBone; localX: Single; localY: Single; parentX: PSingle; parentY: PSingle); cdecl;
  spBone_worldToLocalRotation: function(self: PspBone; worldRotation: Single): Single; cdecl;
  spBone_localToWorldRotation: function(self: PspBone; localRotation: Single): Single; cdecl;
  spBone_rotateWorld: procedure(self: PspBone; degrees: Single); cdecl;
  spSlotData_create: function(const index: Integer; const name: PUTF8Char; boneData: PspBoneData): PspSlotData; cdecl;
  spSlotData_dispose: procedure(self: PspSlotData); cdecl;
  spSlotData_setAttachmentName: procedure(self: PspSlotData; const attachmentName: PUTF8Char); cdecl;
  spSlot_create: function(data: PspSlotData; bone: PspBone): PspSlot; cdecl;
  spSlot_dispose: procedure(self: PspSlot); cdecl;
  spSlot_setAttachment: procedure(self: PspSlot; attachment: PspAttachment); cdecl;
  spSlot_setToSetupPose: procedure(self: PspSlot); cdecl;
  spVertexAttachment_computeWorldVertices: procedure(self: PspVertexAttachment; slot: PspSlot; start: Integer; count: Integer; worldVertices: PSingle; offset: Integer; stride: Integer); cdecl;
  spVertexAttachment_copyTo: procedure(self: PspVertexAttachment; other: PspVertexAttachment); cdecl;
  spAtlasPage_create: function(atlas: PspAtlas; const name: PUTF8Char): PspAtlasPage; cdecl;
  spAtlasPage_dispose: procedure(self: PspAtlasPage); cdecl;
  spKeyValueArray_create: function(initialCapacity: Integer): PspKeyValueArray; cdecl;
  spKeyValueArray_dispose: procedure(self: PspKeyValueArray); cdecl;
  spKeyValueArray_clear: procedure(self: PspKeyValueArray); cdecl;
  spKeyValueArray_setSize: function(self: PspKeyValueArray; newSize: Integer): PspKeyValueArray; cdecl;
  spKeyValueArray_ensureCapacity: procedure(self: PspKeyValueArray; newCapacity: Integer); cdecl;
  spKeyValueArray_add: procedure(self: PspKeyValueArray; value: spKeyValue); cdecl;
  spKeyValueArray_addAll: procedure(self: PspKeyValueArray; other: PspKeyValueArray); cdecl;
  spKeyValueArray_addAllValues: procedure(self: PspKeyValueArray; values: PspKeyValue; offset: Integer; count: Integer); cdecl;
  spKeyValueArray_removeAt: procedure(self: PspKeyValueArray; index: Integer); cdecl;
  spKeyValueArray_contains: function(self: PspKeyValueArray; value: spKeyValue): Integer; cdecl;
  spKeyValueArray_pop: function(self: PspKeyValueArray): spKeyValue; cdecl;
  spKeyValueArray_peek: function(self: PspKeyValueArray): spKeyValue; cdecl;
  spAtlasRegion_create: function(): PspAtlasRegion; cdecl;
  spAtlasRegion_dispose: procedure(self: PspAtlasRegion); cdecl;
  spAtlas_create: function(const data: PUTF8Char; length: Integer; const dir: PUTF8Char; rendererObject: Pointer): PspAtlas; cdecl;
  spAtlas_createFromFile: function(const path: PUTF8Char; rendererObject: Pointer): PspAtlas; cdecl;
  spAtlas_dispose: procedure(atlas: PspAtlas); cdecl;
  spAtlas_findRegion: function(const self: PspAtlas; const name: PUTF8Char): PspAtlasRegion; cdecl;
  spTextureRegionArray_create: function(initialCapacity: Integer): PspTextureRegionArray; cdecl;
  spTextureRegionArray_dispose: procedure(self: PspTextureRegionArray); cdecl;
  spTextureRegionArray_clear: procedure(self: PspTextureRegionArray); cdecl;
  spTextureRegionArray_setSize: function(self: PspTextureRegionArray; newSize: Integer): PspTextureRegionArray; cdecl;
  spTextureRegionArray_ensureCapacity: procedure(self: PspTextureRegionArray; newCapacity: Integer); cdecl;
  spTextureRegionArray_add: procedure(self: PspTextureRegionArray; value: PspTextureRegion); cdecl;
  spTextureRegionArray_addAll: procedure(self: PspTextureRegionArray; other: PspTextureRegionArray); cdecl;
  spTextureRegionArray_addAllValues: procedure(self: PspTextureRegionArray; values: PPspTextureRegion; offset: Integer; count: Integer); cdecl;
  spTextureRegionArray_removeAt: procedure(self: PspTextureRegionArray; index: Integer); cdecl;
  spTextureRegionArray_contains: function(self: PspTextureRegionArray; value: PspTextureRegion): Integer; cdecl;
  spTextureRegionArray_pop: function(self: PspTextureRegionArray): PspTextureRegion; cdecl;
  spTextureRegionArray_peek: function(self: PspTextureRegionArray): PspTextureRegion; cdecl;
  spSequence_create: function(numRegions: Integer): PspSequence; cdecl;
  spSequence_dispose: procedure(self: PspSequence); cdecl;
  spSequence_copy: function(self: PspSequence): PspSequence; cdecl;
  spSequence_apply: procedure(self: PspSequence; slot: PspSlot; attachment: PspAttachment); cdecl;
  spSequence_getPath: procedure(self: PspSequence; const basePath: PUTF8Char; index: Integer; path: PUTF8Char); cdecl;
  spPropertyIdArray_create: function(initialCapacity: Integer): PspPropertyIdArray; cdecl;
  spPropertyIdArray_dispose: procedure(self: PspPropertyIdArray); cdecl;
  spPropertyIdArray_clear: procedure(self: PspPropertyIdArray); cdecl;
  spPropertyIdArray_setSize: function(self: PspPropertyIdArray; newSize: Integer): PspPropertyIdArray; cdecl;
  spPropertyIdArray_ensureCapacity: procedure(self: PspPropertyIdArray; newCapacity: Integer); cdecl;
  spPropertyIdArray_add: procedure(self: PspPropertyIdArray; value: spPropertyId); cdecl;
  spPropertyIdArray_addAll: procedure(self: PspPropertyIdArray; other: PspPropertyIdArray); cdecl;
  spPropertyIdArray_addAllValues: procedure(self: PspPropertyIdArray; values: PspPropertyId; offset: Integer; count: Integer); cdecl;
  spPropertyIdArray_removeAt: procedure(self: PspPropertyIdArray; index: Integer); cdecl;
  spPropertyIdArray_contains: function(self: PspPropertyIdArray; value: spPropertyId): Integer; cdecl;
  spPropertyIdArray_pop: function(self: PspPropertyIdArray): spPropertyId; cdecl;
  spPropertyIdArray_peek: function(self: PspPropertyIdArray): spPropertyId; cdecl;
  spTimelineArray_create: function(initialCapacity: Integer): PspTimelineArray; cdecl;
  spTimelineArray_dispose: procedure(self: PspTimelineArray); cdecl;
  spTimelineArray_clear: procedure(self: PspTimelineArray); cdecl;
  spTimelineArray_setSize: function(self: PspTimelineArray; newSize: Integer): PspTimelineArray; cdecl;
  spTimelineArray_ensureCapacity: procedure(self: PspTimelineArray; newCapacity: Integer); cdecl;
  spTimelineArray_add: procedure(self: PspTimelineArray; value: PspTimeline); cdecl;
  spTimelineArray_addAll: procedure(self: PspTimelineArray; other: PspTimelineArray); cdecl;
  spTimelineArray_addAllValues: procedure(self: PspTimelineArray; values: PPspTimeline; offset: Integer; count: Integer); cdecl;
  spTimelineArray_removeAt: procedure(self: PspTimelineArray; index: Integer); cdecl;
  spTimelineArray_contains: function(self: PspTimelineArray; value: PspTimeline): Integer; cdecl;
  spTimelineArray_pop: function(self: PspTimelineArray): PspTimeline; cdecl;
  spTimelineArray_peek: function(self: PspTimelineArray): PspTimeline; cdecl;
  spAnimation_create: function(const name: PUTF8Char; timelines: PspTimelineArray; duration: Single): PspAnimation; cdecl;
  spAnimation_dispose: procedure(self: PspAnimation); cdecl;
  spAnimation_hasTimeline: function(self: PspAnimation; ids: PspPropertyId; idsCount: Integer): Integer; cdecl;
  spAnimation_apply: procedure(const self: PspAnimation; skeleton: PspSkeleton; lastTime: Single; time: Single; loop: Integer; events: PPspEvent; eventsCount: PInteger; alpha: Single; blend: spMixBlend; direction: spMixDirection); cdecl;
  spTimeline_dispose: procedure(self: PspTimeline); cdecl;
  spTimeline_apply: procedure(self: PspTimeline; skeleton: PspSkeleton; lastTime: Single; time: Single; firedEvents: PPspEvent; eventsCount: PInteger; alpha: Single; blend: spMixBlend; direction: spMixDirection); cdecl;
  spTimeline_setBezier: procedure(self: PspTimeline; bezier: Integer; frame: Integer; value: Single; time1: Single; value1: Single; cx1: Single; cy1: Single; cx2: Single; cy2: Single; time2: Single; value2: Single); cdecl;
  spTimeline_getDuration: function(const self: PspTimeline): Single; cdecl;
  spCurveTimeline_setLinear: procedure(self: PspCurveTimeline; frameIndex: Integer); cdecl;
  spCurveTimeline_setStepped: procedure(self: PspCurveTimeline; frameIndex: Integer); cdecl;
  spCurveTimeline_setCurve: procedure(self: PspCurveTimeline; frameIndex: Integer; cx1: Single; cy1: Single; cx2: Single; cy2: Single); cdecl;
  spCurveTimeline_getCurvePercent: function(const self: PspCurveTimeline; frameIndex: Integer; percent: Single): Single; cdecl;
  spCurveTimeline1_setFrame: procedure(self: PspCurveTimeline1; frame: Integer; time: Single; value: Single); cdecl;
  spCurveTimeline1_getCurveValue: function(self: PspCurveTimeline1; time: Single): Single; cdecl;
  spCurveTimeline1_getRelativeValue: function(timeline: PspCurveTimeline1; time: Single; alpha: Single; blend: spMixBlend; current: Single; setup: Single): Single; cdecl;
  spCurveTimeline1_getAbsoluteValue: function(timeline: PspCurveTimeline1; time: Single; alpha: Single; blend: spMixBlend; current: Single; setup: Single): Single; cdecl;
  spCurveTimeline1_getAbsoluteValue2: function(timeline: PspCurveTimeline1; time: Single; alpha: Single; blend: spMixBlend; current: Single; setup: Single; value: Single): Single; cdecl;
  spCurveTimeline1_getScaleValue: function(timeline: PspCurveTimeline1; time: Single; alpha: Single; blend: spMixBlend; direction: spMixDirection; current: Single; setup: Single): Single; cdecl;
  spCurveTimeline2_setFrame: procedure(self: PspCurveTimeline1; frame: Integer; time: Single; value1: Single; value2: Single); cdecl;
  spRotateTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspRotateTimeline; cdecl;
  spRotateTimeline_setFrame: procedure(self: PspRotateTimeline; frameIndex: Integer; time: Single; angle: Single); cdecl;
  spTranslateTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspTranslateTimeline; cdecl;
  spTranslateTimeline_setFrame: procedure(self: PspTranslateTimeline; frameIndex: Integer; time: Single; x: Single; y: Single); cdecl;
  spTranslateXTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspTranslateXTimeline; cdecl;
  spTranslateXTimeline_setFrame: procedure(self: PspTranslateXTimeline; frame: Integer; time: Single; x: Single); cdecl;
  spTranslateYTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspTranslateYTimeline; cdecl;
  spTranslateYTimeline_setFrame: procedure(self: PspTranslateYTimeline; frame: Integer; time: Single; y: Single); cdecl;
  spScaleTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspScaleTimeline; cdecl;
  spScaleTimeline_setFrame: procedure(self: PspScaleTimeline; frameIndex: Integer; time: Single; x: Single; y: Single); cdecl;
  spScaleXTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspScaleXTimeline; cdecl;
  spScaleXTimeline_setFrame: procedure(self: PspScaleXTimeline; frame: Integer; time: Single; x: Single); cdecl;
  spScaleYTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspScaleYTimeline; cdecl;
  spScaleYTimeline_setFrame: procedure(self: PspScaleYTimeline; frame: Integer; time: Single; y: Single); cdecl;
  spShearTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspShearTimeline; cdecl;
  spShearTimeline_setFrame: procedure(self: PspShearTimeline; frameIndex: Integer; time: Single; x: Single; y: Single); cdecl;
  spShearXTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspShearXTimeline; cdecl;
  spShearXTimeline_setFrame: procedure(self: PspShearXTimeline; frame: Integer; time: Single; x: Single); cdecl;
  spShearYTimeline_create: function(frameCount: Integer; bezierCount: Integer; boneIndex: Integer): PspShearYTimeline; cdecl;
  spShearYTimeline_setFrame: procedure(self: PspShearYTimeline; frame: Integer; time: Single; x: Single); cdecl;
  spRGBATimeline_create: function(framesCount: Integer; bezierCount: Integer; slotIndex: Integer): PspRGBATimeline; cdecl;
  spRGBATimeline_setFrame: procedure(self: PspRGBATimeline; frameIndex: Integer; time: Single; r: Single; g: Single; b: Single; a: Single); cdecl;
  spRGBTimeline_create: function(framesCount: Integer; bezierCount: Integer; slotIndex: Integer): PspRGBTimeline; cdecl;
  spRGBTimeline_setFrame: procedure(self: PspRGBTimeline; frameIndex: Integer; time: Single; r: Single; g: Single; b: Single); cdecl;
  spAlphaTimeline_create: function(frameCount: Integer; bezierCount: Integer; slotIndex: Integer): PspAlphaTimeline; cdecl;
  spAlphaTimeline_setFrame: procedure(self: PspAlphaTimeline; frame: Integer; time: Single; x: Single); cdecl;
  spRGBA2Timeline_create: function(framesCount: Integer; bezierCount: Integer; slotIndex: Integer): PspRGBA2Timeline; cdecl;
  spRGBA2Timeline_setFrame: procedure(self: PspRGBA2Timeline; frameIndex: Integer; time: Single; r: Single; g: Single; b: Single; a: Single; r2: Single; g2: Single; b2: Single); cdecl;
  spRGB2Timeline_create: function(framesCount: Integer; bezierCount: Integer; slotIndex: Integer): PspRGB2Timeline; cdecl;
  spRGB2Timeline_setFrame: procedure(self: PspRGB2Timeline; frameIndex: Integer; time: Single; r: Single; g: Single; b: Single; r2: Single; g2: Single; b2: Single); cdecl;
  spAttachmentTimeline_create: function(framesCount: Integer; SlotIndex: Integer): PspAttachmentTimeline; cdecl;
  spAttachmentTimeline_setFrame: procedure(self: PspAttachmentTimeline; frameIndex: Integer; time: Single; const attachmentName: PUTF8Char); cdecl;
  spDeformTimeline_create: function(framesCount: Integer; frameVerticesCount: Integer; bezierCount: Integer; slotIndex: Integer; attachment: PspVertexAttachment): PspDeformTimeline; cdecl;
  spDeformTimeline_setFrame: procedure(self: PspDeformTimeline; frameIndex: Integer; time: Single; vertices: PSingle); cdecl;
  spSequenceTimeline_create: function(framesCount: Integer; slotIndex: Integer; attachment: PspAttachment): PspSequenceTimeline; cdecl;
  spSequenceTimeline_setFrame: procedure(self: PspSequenceTimeline; frameIndex: Integer; time: Single; mode: Integer; index: Integer; delay: Single); cdecl;
  spEventTimeline_create: function(framesCount: Integer): PspEventTimeline; cdecl;
  spEventTimeline_setFrame: procedure(self: PspEventTimeline; frameIndex: Integer; event: PspEvent); cdecl;
  spDrawOrderTimeline_create: function(framesCount: Integer; slotsCount: Integer): PspDrawOrderTimeline; cdecl;
  spDrawOrderTimeline_setFrame: procedure(self: PspDrawOrderTimeline; frameIndex: Integer; time: Single; const drawOrder: PInteger); cdecl;
  spInheritTimeline_create: function(framesCount: Integer; boneIndex: Integer): PspInheritTimeline; cdecl;
  spInheritTimeline_setFrame: procedure(self: PspInheritTimeline; frameIndex: Integer; time: Single; inherit: spInherit); cdecl;
  spIkConstraintTimeline_create: function(framesCount: Integer; bezierCount: Integer; transformConstraintIndex: Integer): PspIkConstraintTimeline; cdecl;
  spIkConstraintTimeline_setFrame: procedure(self: PspIkConstraintTimeline; frameIndex: Integer; time: Single; mix: Single; softness: Single; bendDirection: Integer; compress: Integer; stretch: Integer); cdecl;
  spTransformConstraintTimeline_create: function(framesCount: Integer; bezierCount: Integer; transformConstraintIndex: Integer): PspTransformConstraintTimeline; cdecl;
  spTransformConstraintTimeline_setFrame: procedure(self: PspTransformConstraintTimeline; frameIndex: Integer; time: Single; mixRotate: Single; mixX: Single; mixY: Single; mixScaleX: Single; mixScaleY: Single; mixShearY: Single); cdecl;
  spPathConstraintPositionTimeline_create: function(framesCount: Integer; bezierCount: Integer; pathConstraintIndex: Integer): PspPathConstraintPositionTimeline; cdecl;
  spPathConstraintPositionTimeline_setFrame: procedure(self: PspPathConstraintPositionTimeline; frameIndex: Integer; time: Single; value: Single); cdecl;
  spPathConstraintSpacingTimeline_create: function(framesCount: Integer; bezierCount: Integer; pathConstraintIndex: Integer): PspPathConstraintSpacingTimeline; cdecl;
  spPathConstraintSpacingTimeline_setFrame: procedure(self: PspPathConstraintSpacingTimeline; frameIndex: Integer; time: Single; value: Single); cdecl;
  spPathConstraintMixTimeline_create: function(framesCount: Integer; bezierCount: Integer; pathConstraintIndex: Integer): PspPathConstraintMixTimeline; cdecl;
  spPathConstraintMixTimeline_setFrame: procedure(self: PspPathConstraintMixTimeline; frameIndex: Integer; time: Single; mixRotate: Single; mixX: Single; mixY: Single); cdecl;
  spPhysicsConstraintTimeline_create: function(framesCount: Integer; bezierCount: Integer; physicsConstraintIndex: Integer; &type: spTimelineType): PspPhysicsConstraintTimeline; cdecl;
  spPhysicsConstraintTimeline_setFrame: procedure(self: PspPhysicsConstraintTimeline; frame: Integer; time: Single; value: Single); cdecl;
  spPhysicsConstraintResetTimeline_create: function(framesCount: Integer; boneIndex: Integer): PspPhysicsConstraintResetTimeline; cdecl;
  spPhysicsConstraintResetTimeline_setFrame: procedure(self: PspPhysicsConstraintResetTimeline; frameIndex: Integer; time: Single); cdecl;
  spIkConstraintData_create: function(const name: PUTF8Char): PspIkConstraintData; cdecl;
  spIkConstraintData_dispose: procedure(self: PspIkConstraintData); cdecl;
  spTransformConstraintData_create: function(const name: PUTF8Char): PspTransformConstraintData; cdecl;
  spTransformConstraintData_dispose: procedure(self: PspTransformConstraintData); cdecl;
  spPathConstraintData_create: function(const name: PUTF8Char): PspPathConstraintData; cdecl;
  spPathConstraintData_dispose: procedure(self: PspPathConstraintData); cdecl;
  spPhysicsConstraintData_create: function(const name: PUTF8Char): PspPhysicsConstraintData; cdecl;
  spPhysicsConstraintData_dispose: procedure(self: PspPhysicsConstraintData); cdecl;
  spBoneDataArray_create: function(initialCapacity: Integer): PspBoneDataArray; cdecl;
  spBoneDataArray_dispose: procedure(self: PspBoneDataArray); cdecl;
  spBoneDataArray_clear: procedure(self: PspBoneDataArray); cdecl;
  spBoneDataArray_setSize: function(self: PspBoneDataArray; newSize: Integer): PspBoneDataArray; cdecl;
  spBoneDataArray_ensureCapacity: procedure(self: PspBoneDataArray; newCapacity: Integer); cdecl;
  spBoneDataArray_add: procedure(self: PspBoneDataArray; value: PspBoneData); cdecl;
  spBoneDataArray_addAll: procedure(self: PspBoneDataArray; other: PspBoneDataArray); cdecl;
  spBoneDataArray_addAllValues: procedure(self: PspBoneDataArray; values: PPspBoneData; offset: Integer; count: Integer); cdecl;
  spBoneDataArray_removeAt: procedure(self: PspBoneDataArray; index: Integer); cdecl;
  spBoneDataArray_contains: function(self: PspBoneDataArray; value: PspBoneData): Integer; cdecl;
  spBoneDataArray_pop: function(self: PspBoneDataArray): PspBoneData; cdecl;
  spBoneDataArray_peek: function(self: PspBoneDataArray): PspBoneData; cdecl;
  spIkConstraintDataArray_create: function(initialCapacity: Integer): PspIkConstraintDataArray; cdecl;
  spIkConstraintDataArray_dispose: procedure(self: PspIkConstraintDataArray); cdecl;
  spIkConstraintDataArray_clear: procedure(self: PspIkConstraintDataArray); cdecl;
  spIkConstraintDataArray_setSize: function(self: PspIkConstraintDataArray; newSize: Integer): PspIkConstraintDataArray; cdecl;
  spIkConstraintDataArray_ensureCapacity: procedure(self: PspIkConstraintDataArray; newCapacity: Integer); cdecl;
  spIkConstraintDataArray_add: procedure(self: PspIkConstraintDataArray; value: PspIkConstraintData); cdecl;
  spIkConstraintDataArray_addAll: procedure(self: PspIkConstraintDataArray; other: PspIkConstraintDataArray); cdecl;
  spIkConstraintDataArray_addAllValues: procedure(self: PspIkConstraintDataArray; values: PPspIkConstraintData; offset: Integer; count: Integer); cdecl;
  spIkConstraintDataArray_removeAt: procedure(self: PspIkConstraintDataArray; index: Integer); cdecl;
  spIkConstraintDataArray_contains: function(self: PspIkConstraintDataArray; value: PspIkConstraintData): Integer; cdecl;
  spIkConstraintDataArray_pop: function(self: PspIkConstraintDataArray): PspIkConstraintData; cdecl;
  spIkConstraintDataArray_peek: function(self: PspIkConstraintDataArray): PspIkConstraintData; cdecl;
  spTransformConstraintDataArray_create: function(initialCapacity: Integer): PspTransformConstraintDataArray; cdecl;
  spTransformConstraintDataArray_dispose: procedure(self: PspTransformConstraintDataArray); cdecl;
  spTransformConstraintDataArray_clear: procedure(self: PspTransformConstraintDataArray); cdecl;
  spTransformConstraintDataArray_setSize: function(self: PspTransformConstraintDataArray; newSize: Integer): PspTransformConstraintDataArray; cdecl;
  spTransformConstraintDataArray_ensureCapacity: procedure(self: PspTransformConstraintDataArray; newCapacity: Integer); cdecl;
  spTransformConstraintDataArray_add: procedure(self: PspTransformConstraintDataArray; value: PspTransformConstraintData); cdecl;
  spTransformConstraintDataArray_addAll: procedure(self: PspTransformConstraintDataArray; other: PspTransformConstraintDataArray); cdecl;
  spTransformConstraintDataArray_addAllValues: procedure(self: PspTransformConstraintDataArray; values: PPspTransformConstraintData; offset: Integer; count: Integer); cdecl;
  spTransformConstraintDataArray_removeAt: procedure(self: PspTransformConstraintDataArray; index: Integer); cdecl;
  spTransformConstraintDataArray_contains: function(self: PspTransformConstraintDataArray; value: PspTransformConstraintData): Integer; cdecl;
  spTransformConstraintDataArray_pop: function(self: PspTransformConstraintDataArray): PspTransformConstraintData; cdecl;
  spTransformConstraintDataArray_peek: function(self: PspTransformConstraintDataArray): PspTransformConstraintData; cdecl;
  spPathConstraintDataArray_create: function(initialCapacity: Integer): PspPathConstraintDataArray; cdecl;
  spPathConstraintDataArray_dispose: procedure(self: PspPathConstraintDataArray); cdecl;
  spPathConstraintDataArray_clear: procedure(self: PspPathConstraintDataArray); cdecl;
  spPathConstraintDataArray_setSize: function(self: PspPathConstraintDataArray; newSize: Integer): PspPathConstraintDataArray; cdecl;
  spPathConstraintDataArray_ensureCapacity: procedure(self: PspPathConstraintDataArray; newCapacity: Integer); cdecl;
  spPathConstraintDataArray_add: procedure(self: PspPathConstraintDataArray; value: PspPathConstraintData); cdecl;
  spPathConstraintDataArray_addAll: procedure(self: PspPathConstraintDataArray; other: PspPathConstraintDataArray); cdecl;
  spPathConstraintDataArray_addAllValues: procedure(self: PspPathConstraintDataArray; values: PPspPathConstraintData; offset: Integer; count: Integer); cdecl;
  spPathConstraintDataArray_removeAt: procedure(self: PspPathConstraintDataArray; index: Integer); cdecl;
  spPathConstraintDataArray_contains: function(self: PspPathConstraintDataArray; value: PspPathConstraintData): Integer; cdecl;
  spPathConstraintDataArray_pop: function(self: PspPathConstraintDataArray): PspPathConstraintData; cdecl;
  spPathConstraintDataArray_peek: function(self: PspPathConstraintDataArray): PspPathConstraintData; cdecl;
  spPhysicsConstraintDataArray_create: function(initialCapacity: Integer): PspPhysicsConstraintDataArray; cdecl;
  spPhysicsConstraintDataArray_dispose: procedure(self: PspPhysicsConstraintDataArray); cdecl;
  spPhysicsConstraintDataArray_clear: procedure(self: PspPhysicsConstraintDataArray); cdecl;
  spPhysicsConstraintDataArray_setSize: function(self: PspPhysicsConstraintDataArray; newSize: Integer): PspPhysicsConstraintDataArray; cdecl;
  spPhysicsConstraintDataArray_ensureCapacity: procedure(self: PspPhysicsConstraintDataArray; newCapacity: Integer); cdecl;
  spPhysicsConstraintDataArray_add: procedure(self: PspPhysicsConstraintDataArray; value: PspPhysicsConstraintData); cdecl;
  spPhysicsConstraintDataArray_addAll: procedure(self: PspPhysicsConstraintDataArray; other: PspPhysicsConstraintDataArray); cdecl;
  spPhysicsConstraintDataArray_addAllValues: procedure(self: PspPhysicsConstraintDataArray; values: PPspPhysicsConstraintData; offset: Integer; count: Integer); cdecl;
  spPhysicsConstraintDataArray_removeAt: procedure(self: PspPhysicsConstraintDataArray; index: Integer); cdecl;
  spPhysicsConstraintDataArray_contains: function(self: PspPhysicsConstraintDataArray; value: PspPhysicsConstraintData): Integer; cdecl;
  spPhysicsConstraintDataArray_pop: function(self: PspPhysicsConstraintDataArray): PspPhysicsConstraintData; cdecl;
  spPhysicsConstraintDataArray_peek: function(self: PspPhysicsConstraintDataArray): PspPhysicsConstraintData; cdecl;
  spSkin_create: function(const name: PUTF8Char): PspSkin; cdecl;
  spSkin_dispose: procedure(self: PspSkin); cdecl;
  spSkin_setAttachment: procedure(self: PspSkin; slotIndex: Integer; const name: PUTF8Char; attachment: PspAttachment); cdecl;
  spSkin_getAttachment: function(const self: PspSkin; slotIndex: Integer; const name: PUTF8Char): PspAttachment; cdecl;
  spSkin_getAttachmentName: function(const self: PspSkin; slotIndex: Integer; attachmentIndex: Integer): PUTF8Char; cdecl;
  spSkin_attachAll: procedure(const self: PspSkin; skeleton: PspSkeleton; const oldspSkin: PspSkin); cdecl;
  spSkin_addSkin: procedure(self: PspSkin; const other: PspSkin); cdecl;
  spSkin_copySkin: procedure(self: PspSkin; const other: PspSkin); cdecl;
  spSkin_getAttachments: function(const self: PspSkin): PspSkinEntry; cdecl;
  spSkin_clear: procedure(self: PspSkin); cdecl;
  spSkeletonData_create: function(): PspSkeletonData; cdecl;
  spSkeletonData_dispose: procedure(self: PspSkeletonData); cdecl;
  spSkeletonData_findBone: function(const self: PspSkeletonData; const boneName: PUTF8Char): PspBoneData; cdecl;
  spSkeletonData_findSlot: function(const self: PspSkeletonData; const slotName: PUTF8Char): PspSlotData; cdecl;
  spSkeletonData_findSkin: function(const self: PspSkeletonData; const skinName: PUTF8Char): PspSkin; cdecl;
  spSkeletonData_findEvent: function(const self: PspSkeletonData; const eventName: PUTF8Char): PspEventData; cdecl;
  spSkeletonData_findAnimation: function(const self: PspSkeletonData; const animationName: PUTF8Char): PspAnimation; cdecl;
  spSkeletonData_findIkConstraint: function(const self: PspSkeletonData; const constraintName: PUTF8Char): PspIkConstraintData; cdecl;
  spSkeletonData_findTransformConstraint: function(const self: PspSkeletonData; const constraintName: PUTF8Char): PspTransformConstraintData; cdecl;
  spSkeletonData_findPathConstraint: function(const self: PspSkeletonData; const constraintName: PUTF8Char): PspPathConstraintData; cdecl;
  spSkeletonData_findPhysicsConstraint: function(const self: PspSkeletonData; const constraintName: PUTF8Char): PspPhysicsConstraintData; cdecl;
  spAnimationStateData_create: function(skeletonData: PspSkeletonData): PspAnimationStateData; cdecl;
  spAnimationStateData_dispose: procedure(self: PspAnimationStateData); cdecl;
  spAnimationStateData_setMixByName: procedure(self: PspAnimationStateData; const fromName: PUTF8Char; const toName: PUTF8Char; duration: Single); cdecl;
  spAnimationStateData_setMix: procedure(self: PspAnimationStateData; from: PspAnimation; &to: PspAnimation; duration: Single); cdecl;
  spAnimationStateData_getMix: function(self: PspAnimationStateData; from: PspAnimation; &to: PspAnimation): Single; cdecl;
  spTrackEntryArray_create: function(initialCapacity: Integer): PspTrackEntryArray; cdecl;
  spTrackEntryArray_dispose: procedure(self: PspTrackEntryArray); cdecl;
  spTrackEntryArray_clear: procedure(self: PspTrackEntryArray); cdecl;
  spTrackEntryArray_setSize: function(self: PspTrackEntryArray; newSize: Integer): PspTrackEntryArray; cdecl;
  spTrackEntryArray_ensureCapacity: procedure(self: PspTrackEntryArray; newCapacity: Integer); cdecl;
  spTrackEntryArray_add: procedure(self: PspTrackEntryArray; value: PspTrackEntry); cdecl;
  spTrackEntryArray_addAll: procedure(self: PspTrackEntryArray; other: PspTrackEntryArray); cdecl;
  spTrackEntryArray_addAllValues: procedure(self: PspTrackEntryArray; values: PPspTrackEntry; offset: Integer; count: Integer); cdecl;
  spTrackEntryArray_removeAt: procedure(self: PspTrackEntryArray; index: Integer); cdecl;
  spTrackEntryArray_contains: function(self: PspTrackEntryArray; value: PspTrackEntry): Integer; cdecl;
  spTrackEntryArray_pop: function(self: PspTrackEntryArray): PspTrackEntry; cdecl;
  spTrackEntryArray_peek: function(self: PspTrackEntryArray): PspTrackEntry; cdecl;
  spAnimationState_create: function(data: PspAnimationStateData): PspAnimationState; cdecl;
  spAnimationState_dispose: procedure(self: PspAnimationState); cdecl;
  spAnimationState_update: procedure(self: PspAnimationState; delta: Single); cdecl;
  spAnimationState_apply: function(self: PspAnimationState; skeleton: PspSkeleton): Integer; cdecl;
  spAnimationState_clearTracks: procedure(self: PspAnimationState); cdecl;
  spAnimationState_clearTrack: procedure(self: PspAnimationState; trackIndex: Integer); cdecl;
  spAnimationState_setAnimationByName: function(self: PspAnimationState; trackIndex: Integer; const animationName: PUTF8Char; loop: Integer): PspTrackEntry; cdecl;
  spAnimationState_setAnimation: function(self: PspAnimationState; trackIndex: Integer; animation: PspAnimation; loop: Integer): PspTrackEntry; cdecl;
  spAnimationState_addAnimationByName: function(self: PspAnimationState; trackIndex: Integer; const animationName: PUTF8Char; loop: Integer; delay: Single): PspTrackEntry; cdecl;
  spAnimationState_addAnimation: function(self: PspAnimationState; trackIndex: Integer; animation: PspAnimation; loop: Integer; delay: Single): PspTrackEntry; cdecl;
  spAnimationState_setEmptyAnimation: function(self: PspAnimationState; trackIndex: Integer; mixDuration: Single): PspTrackEntry; cdecl;
  spAnimationState_addEmptyAnimation: function(self: PspAnimationState; trackIndex: Integer; mixDuration: Single; delay: Single): PspTrackEntry; cdecl;
  spAnimationState_setEmptyAnimations: procedure(self: PspAnimationState; mixDuration: Single); cdecl;
  spAnimationState_getCurrent: function(self: PspAnimationState; trackIndex: Integer): PspTrackEntry; cdecl;
  spAnimationState_clearListenerNotifications: procedure(self: PspAnimationState); cdecl;
  spTrackEntry_getAnimationTime: function(entry: PspTrackEntry): Single; cdecl;
  spTrackEntry_resetRotationDirections: procedure(entry: PspTrackEntry); cdecl;
  spTrackEntry_getTrackComplete: function(entry: PspTrackEntry): Single; cdecl;
  spTrackEntry_setMixDuration: procedure(entry: PspTrackEntry; mixDuration: Single; delay: Single); cdecl;
  spTrackEntry_wasApplied: function(entry: PspTrackEntry): Integer; cdecl;
  spTrackEntry_isNextReady: function(entry: PspTrackEntry): Integer; cdecl;
  spAnimationState_clearNext: procedure(self: PspAnimationState; entry: PspTrackEntry); cdecl;
  spAnimationState_disposeStatics: procedure(); cdecl;
  spAttachmentLoader_dispose: procedure(self: PspAttachmentLoader); cdecl;
  spAttachmentLoader_createAttachment: function(self: PspAttachmentLoader; skin: PspSkin; &type: spAttachmentType; const name: PUTF8Char; const path: PUTF8Char; sequence: PspSequence): PspAttachment; cdecl;
  spAttachmentLoader_configureAttachment: procedure(self: PspAttachmentLoader; attachment: PspAttachment); cdecl;
  spAttachmentLoader_disposeAttachment: procedure(self: PspAttachmentLoader; attachment: PspAttachment); cdecl;
  spAtlasAttachmentLoader_create: function(atlas: PspAtlas): PspAtlasAttachmentLoader; cdecl;
  spRegionAttachment_create: function(const name: PUTF8Char): PspRegionAttachment; cdecl;
  spRegionAttachment_updateRegion: procedure(self: PspRegionAttachment); cdecl;
  spRegionAttachment_computeWorldVertices: procedure(self: PspRegionAttachment; slot: PspSlot; vertices: PSingle; offset: Integer; stride: Integer); cdecl;
  spMeshAttachment_create: function(const name: PUTF8Char): PspMeshAttachment; cdecl;
  spMeshAttachment_updateRegion: procedure(self: PspMeshAttachment); cdecl;
  spMeshAttachment_setParentMesh: procedure(self: PspMeshAttachment; parentMesh: PspMeshAttachment); cdecl;
  spMeshAttachment_newLinkedMesh: function(self: PspMeshAttachment): PspMeshAttachment; cdecl;
  spBoundingBoxAttachment_create: function(const name: PUTF8Char): PspBoundingBoxAttachment; cdecl;
  _spClippingAttachment_dispose: procedure(self: PspAttachment); cdecl;
  spClippingAttachment_create: function(const name: PUTF8Char): PspClippingAttachment; cdecl;
  spPointAttachment_create: function(const name: PUTF8Char): PspPointAttachment; cdecl;
  spPointAttachment_computeWorldPosition: procedure(self: PspPointAttachment; bone: PspBone; x: PSingle; y: PSingle); cdecl;
  spPointAttachment_computeWorldRotation: function(self: PspPointAttachment; bone: PspBone): Single; cdecl;
  spIkConstraint_create: function(data: PspIkConstraintData; const skeleton: PspSkeleton): PspIkConstraint; cdecl;
  spIkConstraint_dispose: procedure(self: PspIkConstraint); cdecl;
  spIkConstraint_update: procedure(self: PspIkConstraint); cdecl;
  spIkConstraint_setToSetupPose: procedure(self: PspIkConstraint); cdecl;
  spIkConstraint_apply1: procedure(bone: PspBone; targetX: Single; targetY: Single; compress: Integer; stretch: Integer; uniform: Integer; alpha: Single); cdecl;
  spIkConstraint_apply2: procedure(parent: PspBone; child: PspBone; targetX: Single; targetY: Single; bendDirection: Integer; stretch: Integer; uniform: Integer; softness: Single; alpha: Single); cdecl;
  spTransformConstraint_create: function(data: PspTransformConstraintData; const skeleton: PspSkeleton): PspTransformConstraint; cdecl;
  spTransformConstraint_dispose: procedure(self: PspTransformConstraint); cdecl;
  spTransformConstraint_update: procedure(self: PspTransformConstraint); cdecl;
  spTransformConstraint_setToSetupPose: procedure(self: PspTransformConstraint); cdecl;
  spPathAttachment_create: function(const name: PUTF8Char): PspPathAttachment; cdecl;
  spPathConstraint_create: function(data: PspPathConstraintData; const skeleton: PspSkeleton): PspPathConstraint; cdecl;
  spPathConstraint_dispose: procedure(self: PspPathConstraint); cdecl;
  spPathConstraint_update: procedure(self: PspPathConstraint); cdecl;
  spPathConstraint_setToSetupPose: procedure(self: PspPathConstraint); cdecl;
  spPathConstraint_computeWorldPositions: function(self: PspPathConstraint; path: PspPathAttachment; spacesCount: Integer; tangents: Integer): PSingle; cdecl;
  spPhysicsConstraint_create: function(data: PspPhysicsConstraintData; skeleton: PspSkeleton): PspPhysicsConstraint; cdecl;
  spPhysicsConstraint_dispose: procedure(self: PspPhysicsConstraint); cdecl;
  spPhysicsConstraint_reset: procedure(self: PspPhysicsConstraint); cdecl;
  spPhysicsConstraint_setToSetupPose: procedure(self: PspPhysicsConstraint); cdecl;
  spPhysicsConstraint_update: procedure(self: PspPhysicsConstraint; physics: spPhysics); cdecl;
  spPhysicsConstraint_rotate: procedure(self: PspPhysicsConstraint; x: Single; y: Single; degrees: Single); cdecl;
  spPhysicsConstraint_translate: procedure(self: PspPhysicsConstraint; x: Single; y: Single); cdecl;
  spSkeleton_create: function(data: PspSkeletonData): PspSkeleton; cdecl;
  spSkeleton_dispose: procedure(self: PspSkeleton); cdecl;
  spSkeleton_updateCache: procedure(self: PspSkeleton); cdecl;
  spSkeleton_updateWorldTransform: procedure(const self: PspSkeleton; physics: spPhysics); cdecl;
  spSkeleton_update: procedure(self: PspSkeleton; delta: Single); cdecl;
  spSkeleton_setToSetupPose: procedure(const self: PspSkeleton); cdecl;
  spSkeleton_setBonesToSetupPose: procedure(const self: PspSkeleton); cdecl;
  spSkeleton_setSlotsToSetupPose: procedure(const self: PspSkeleton); cdecl;
  spSkeleton_findBone: function(const self: PspSkeleton; const boneName: PUTF8Char): PspBone; cdecl;
  spSkeleton_findSlot: function(const self: PspSkeleton; const slotName: PUTF8Char): PspSlot; cdecl;
  spSkeleton_setSkin: procedure(self: PspSkeleton; skin: PspSkin); cdecl;
  spSkeleton_setSkinByName: function(self: PspSkeleton; const skinName: PUTF8Char): Integer; cdecl;
  spSkeleton_getAttachmentForSlotName: function(const self: PspSkeleton; const slotName: PUTF8Char; const attachmentName: PUTF8Char): PspAttachment; cdecl;
  spSkeleton_getAttachmentForSlotIndex: function(const self: PspSkeleton; slotIndex: Integer; const attachmentName: PUTF8Char): PspAttachment; cdecl;
  spSkeleton_setAttachment: function(self: PspSkeleton; const slotName: PUTF8Char; const attachmentName: PUTF8Char): Integer; cdecl;
  spSkeleton_findIkConstraint: function(const self: PspSkeleton; const constraintName: PUTF8Char): PspIkConstraint; cdecl;
  spSkeleton_findTransformConstraint: function(const self: PspSkeleton; const constraintName: PUTF8Char): PspTransformConstraint; cdecl;
  spSkeleton_findPathConstraint: function(const self: PspSkeleton; const constraintName: PUTF8Char): PspPathConstraint; cdecl;
  spSkeleton_findPhysicsConstraint: function(const self: PspSkeleton; const constraintName: PUTF8Char): PspPhysicsConstraint; cdecl;
  spSkeleton_physicsTranslate: procedure(self: PspSkeleton; x: Single; y: Single); cdecl;
  spSkeleton_physicsRotate: procedure(self: PspSkeleton; x: Single; y: Single; degrees: Single); cdecl;
  spPolygon_create: function(capacity: Integer): PspPolygon; cdecl;
  spPolygon_dispose: procedure(self: PspPolygon); cdecl;
  spPolygon_containsPoint: function(polygon: PspPolygon; x: Single; y: Single): Integer; cdecl;
  spPolygon_intersectsSegment: function(polygon: PspPolygon; x1: Single; y1: Single; x2: Single; y2: Single): Integer; cdecl;
  spSkeletonBounds_create: function(): PspSkeletonBounds; cdecl;
  spSkeletonBounds_dispose: procedure(self: PspSkeletonBounds); cdecl;
  spSkeletonBounds_update: procedure(self: PspSkeletonBounds; skeleton: PspSkeleton; updateAabb: Integer); cdecl;
  spSkeletonBounds_aabbContainsPoint: function(self: PspSkeletonBounds; x: Single; y: Single): Integer; cdecl;
  spSkeletonBounds_aabbIntersectsSegment: function(self: PspSkeletonBounds; x1: Single; y1: Single; x2: Single; y2: Single): Integer; cdecl;
  spSkeletonBounds_aabbIntersectsSkeleton: function(self: PspSkeletonBounds; bounds: PspSkeletonBounds): Integer; cdecl;
  spSkeletonBounds_containsPoint: function(self: PspSkeletonBounds; x: Single; y: Single): PspBoundingBoxAttachment; cdecl;
  spSkeletonBounds_intersectsSegment: function(self: PspSkeletonBounds; x1: Single; y1: Single; x2: Single; y2: Single): PspBoundingBoxAttachment; cdecl;
  spSkeletonBounds_getPolygon: function(self: PspSkeletonBounds; boundingBox: PspBoundingBoxAttachment): PspPolygon; cdecl;
  spSkeletonBinary_createWithLoader: function(attachmentLoader: PspAttachmentLoader): PspSkeletonBinary; cdecl;
  spSkeletonBinary_create: function(atlas: PspAtlas): PspSkeletonBinary; cdecl;
  spSkeletonBinary_dispose: procedure(self: PspSkeletonBinary); cdecl;
  spSkeletonBinary_readSkeletonData: function(self: PspSkeletonBinary; const binary: PByte; const length: Integer): PspSkeletonData; cdecl;
  spSkeletonBinary_readSkeletonDataFile: function(self: PspSkeletonBinary; const path: PUTF8Char): PspSkeletonData; cdecl;
  spSkeletonJson_createWithLoader: function(attachmentLoader: PspAttachmentLoader): PspSkeletonJson; cdecl;
  spSkeletonJson_create: function(atlas: PspAtlas): PspSkeletonJson; cdecl;
  spSkeletonJson_dispose: procedure(self: PspSkeletonJson); cdecl;
  spSkeletonJson_readSkeletonData: function(self: PspSkeletonJson; const json: PUTF8Char): PspSkeletonData; cdecl;
  spSkeletonJson_readSkeletonDataFile: function(self: PspSkeletonJson; const path: PUTF8Char): PspSkeletonData; cdecl;
  spTriangulator_create: function(): PspTriangulator; cdecl;
  spTriangulator_triangulate: function(self: PspTriangulator; verticesArray: PspFloatArray): PspShortArray; cdecl;
  spTriangulator_decompose: function(self: PspTriangulator; verticesArray: PspFloatArray; triangles: PspShortArray): PspArrayFloatArray; cdecl;
  spTriangulator_dispose: procedure(self: PspTriangulator); cdecl;
  spSkeletonClipping_create: function(): PspSkeletonClipping; cdecl;
  spSkeletonClipping_clipStart: function(self: PspSkeletonClipping; slot: PspSlot; clip: PspClippingAttachment): Integer; cdecl;
  spSkeletonClipping_clipEnd: procedure(self: PspSkeletonClipping; slot: PspSlot); cdecl;
  spSkeletonClipping_clipEnd2: procedure(self: PspSkeletonClipping); cdecl;
  spSkeletonClipping_isClipping: function(self: PspSkeletonClipping): Integer; cdecl;
  spSkeletonClipping_clipTriangles: procedure(self: PspSkeletonClipping; vertices: PSingle; verticesLength: Integer; triangles: PWord; trianglesLength: Integer; uvs: PSingle; stride: Integer); cdecl;
  spSkeletonClipping_dispose: procedure(self: PspSkeletonClipping); cdecl;
  spSdlVertexArray_create: function(initialCapacity: Integer): PspSdlVertexArray; cdecl;
  spSdlVertexArray_dispose: procedure(self: PspSdlVertexArray); cdecl;
  spSdlVertexArray_clear: procedure(self: PspSdlVertexArray); cdecl;
  spSdlVertexArray_setSize: function(self: PspSdlVertexArray; newSize: Integer): PspSdlVertexArray; cdecl;
  spSdlVertexArray_ensureCapacity: procedure(self: PspSdlVertexArray; newCapacity: Integer); cdecl;
  spSdlVertexArray_add: procedure(self: PspSdlVertexArray; value: SDL_Vertex); cdecl;
  spSdlVertexArray_addAll: procedure(self: PspSdlVertexArray; other: PspSdlVertexArray); cdecl;
  spSdlVertexArray_addAllValues: procedure(self: PspSdlVertexArray; values: PSDL_Vertex; offset: Integer; count: Integer); cdecl;
  spSdlVertexArray_removeAt: procedure(self: PspSdlVertexArray; index: Integer); cdecl;
  spSdlVertexArray_contains: function(self: PspSdlVertexArray; value: SDL_Vertex): Integer; cdecl;
  spSdlVertexArray_pop: function(self: PspSdlVertexArray): SDL_Vertex; cdecl;
  spSdlVertexArray_peek: function(self: PspSdlVertexArray): SDL_Vertex; cdecl;
  spSkeletonDrawable_create: function(skeletonData: PspSkeletonData; animationStateData: PspAnimationStateData): PspSkeletonDrawable; cdecl;
  spSkeletonDrawable_dispose: procedure(self: PspSkeletonDrawable); cdecl;
  spSkeletonDrawable_update: procedure(self: PspSkeletonDrawable; delta: Single; physics: spPhysics); cdecl;
  spSkeletonDrawable_draw: procedure(self: PspSkeletonDrawable; renderer: PSDL_Renderer); cdecl;
  _spAtlasPage_createTexture: procedure(self: PspAtlasPage; const path: PUTF8Char); cdecl;
  _spAtlasPage_disposeTexture: procedure(self: PspAtlasPage); cdecl;
  _spUtil_readFile: function(const path: PUTF8Char; length: PInteger): PUTF8Char; cdecl;
{$ENDREGION}  

implementation

{$REGION ' COMMON '}

var
  Marshaller: TMarshaller;

function EnableVirtualTerminalProcessing(): DWORD;
var
  HOut: THandle;
  LMode: DWORD;
begin
  HOut := GetStdHandle(STD_OUTPUT_HANDLE);
  if HOut = INVALID_HANDLE_VALUE then
  begin
    Result := GetLastError;
    Exit;
  end;

  if not GetConsoleMode(HOut, LMode) then
  begin
    Result := GetLastError;
    Exit;
  end;

  LMode := LMode or ENABLE_VIRTUAL_TERMINAL_PROCESSING;
  if not SetConsoleMode(HOut, LMode) then
  begin
    Result := GetLastError;
    Exit;
  end;

  Result := 0;  // Success
end;

function HasConsoleOutput: Boolean;
var
  Stdout: THandle;
begin
  Stdout := GetStdHandle(Std_Output_Handle);
  Win32Check(Stdout <> Invalid_Handle_Value);
  Result := Stdout <> 0;
end;

function IsValidWin64PE(const AFilePath: string): Boolean;
var
  LFile: TFileStream;
  LDosHeader: TImageDosHeader;
  LPEHeaderOffset: DWORD;
  LPEHeaderSignature: DWORD;
  LFileHeader: TImageFileHeader;
begin
  Result := False;

  if not FileExists(AFilePath) then
    Exit;

  LFile := TFileStream.Create(AFilePath, fmOpenRead or fmShareDenyWrite);
  try
    // Check if file is large enough for DOS header
    if LFile.Size < SizeOf(TImageDosHeader) then
      Exit;

    // Read DOS header
    LFile.ReadBuffer(LDosHeader, SizeOf(TImageDosHeader));

    // Check DOS signature
    if LDosHeader.e_magic <> IMAGE_DOS_SIGNATURE then // 'MZ'
      Exit;

      // Validate PE header offset
    LPEHeaderOffset := LDosHeader._lfanew;
    if LFile.Size < LPEHeaderOffset + SizeOf(DWORD) + SizeOf(TImageFileHeader) then
      Exit;

    // Seek to the PE header
    LFile.Position := LPEHeaderOffset;

    // Read and validate the PE signature
    LFile.ReadBuffer(LPEHeaderSignature, SizeOf(DWORD));
    if LPEHeaderSignature <> IMAGE_NT_SIGNATURE then // 'PE\0\0'
      Exit;

   // Read the file header
    LFile.ReadBuffer(LFileHeader, SizeOf(TImageFileHeader));

    // Check if it is a 64-bit executable
    if LFileHeader.Machine <> IMAGE_FILE_MACHINE_AMD64 then   Exit;

    // If all checks pass, it's a valid Win64 PE file
    Result := True;
  finally
    LFile.Free;
  end;
end;

function AddResFromMemory(const aModuleFile: string; const aName: string; aData: Pointer; aSize: Cardinal): Boolean;
var
  LHandle: THandle;
begin
  Result := False;
  if not TFile.Exists(aModuleFile) then Exit;
  LHandle := WinApi.Windows.BeginUpdateResourceW(PWideChar(aModuleFile), False);
  if LHandle <> 0 then
  begin
    WinApi.Windows.UpdateResourceW(LHandle, RT_RCDATA, PChar(aName), 1033 {ENGLISH, ENGLISH_US}, aData, aSize);
    Result := WinApi.Windows.EndUpdateResourceW(LHandle, False);
  end;
end;

function ResourceExists(aInstance: THandle; const aResName: string): Boolean;
begin
  Result := Boolean((FindResource(aInstance, PChar(aResName), RT_RCDATA) <> 0));
end;

function RemoveBOM(const AString: string): string; overload;
const
  UTF8BOM: array[0..2] of Byte = ($EF, $BB, $BF);
var
  LBytes: TBytes;
begin
  // Convert the input string to a byte array
  LBytes := TEncoding.UTF8.GetBytes(AString);

  // Check for UTF-8 BOM at the beginning
  if (Length(LBytes) >= 3) and
     (LBytes[0] = UTF8BOM[0]) and
     (LBytes[1] = UTF8BOM[1]) and
     (LBytes[2] = UTF8BOM[2]) then
  begin
    // Remove the BOM by copying the bytes after it
    Result := TEncoding.UTF8.GetString(LBytes, 3, Length(LBytes) - 3);
  end
  else
  begin
    // Return the original string if no BOM is detected
    Result := AString;
  end;
end;

function RemoveBOM(const ABytes: TBytes): TBytes; overload;
const
  UTF8BOM: array[0..2] of Byte = ($EF, $BB, $BF);
  UTF16LEBOM: array[0..1] of Byte = ($FF, $FE);
  UTF16BEBOM: array[0..1] of Byte = ($FE, $FF);
var
  LStartIndex: Integer;
begin
  Result := ABytes;

  // Check for UTF-8 BOM
  if (Length(ABytes) >= 3) and
     (ABytes[0] = UTF8BOM[0]) and
     (ABytes[1] = UTF8BOM[1]) and
     (ABytes[2] = UTF8BOM[2]) then
  begin
    LStartIndex := 3; // Skip the UTF-8 BOM
  end
  // Check for UTF-16 LE BOM
  else if (Length(ABytes) >= 2) and
          (ABytes[0] = UTF16LEBOM[0]) and
          (ABytes[1] = UTF16LEBOM[1]) then
  begin
    LStartIndex := 2; // Skip the UTF-16 LE BOM
  end
  // Check for UTF-16 BE BOM
  else if (Length(ABytes) >= 2) and
          (ABytes[0] = UTF16BEBOM[0]) and
          (ABytes[1] = UTF16BEBOM[1]) then
  begin
    LStartIndex := 2; // Skip the UTF-16 BE BOM
  end
  else
  begin
    Exit; // No BOM found, return the original array
  end;

  // Create a new array without the BOM
  Result := Copy(ABytes, LStartIndex, Length(ABytes) - LStartIndex);
end;

function AsUTF8(const AText: string; const ARemoveBOM: Boolean=False): Pointer;
var
  LText: string;
begin
  if ARemoveBOM then
    LText := RemoveBOM(AText)
  else
    LText := AText;
  Result := Marshaller.AsUtf8(LText).ToPointer;
end;

procedure UpdateIconResource(const AExeFilePath, AIconFilePath: string);
type
  TIconDir = packed record
    idReserved: Word;  // Reserved, must be 0
    idType: Word;      // Resource type, 1 for icons
    idCount: Word;     // Number of images in the file
  end;
  PIconDir = ^TIconDir;

  TGroupIconDirEntry = packed record
    bWidth: Byte;            // Width of the icon (0 means 256)
    bHeight: Byte;           // Height of the icon (0 means 256)
    bColorCount: Byte;       // Number of colors in the palette (0 if more than 256)
    bReserved: Byte;         // Reserved, must be 0
    wPlanes: Word;           // Color planes
    wBitCount: Word;         // Bits per pixel
    dwBytesInRes: Cardinal;  // Size of the image data
    nID: Word;               // Resource ID of the icon
  end;

  TGroupIconDir = packed record
    idReserved: Word;  // Reserved, must be 0
    idType: Word;      // Resource type, 1 for icons
    idCount: Word;     // Number of images in the file
    Entries: array[0..0] of TGroupIconDirEntry; // Variable-length array
  end;

  TIconResInfo = packed record
    bWidth: Byte;            // Width of the icon (0 means 256)
    bHeight: Byte;           // Height of the icon (0 means 256)
    bColorCount: Byte;       // Number of colors in the palette (0 if more than 256)
    bReserved: Byte;         // Reserved, must be 0
    wPlanes: Word;           // Color planes (should be 1)
    wBitCount: Word;         // Bits per pixel
    dwBytesInRes: Cardinal;  // Size of the image data
    dwImageOffset: Cardinal; // Offset of the image data in the file
  end;
  PIconResInfo = ^TIconResInfo;

var
  LUpdateHandle: THandle;
  LIconStream: TMemoryStream;
  LIconDir: PIconDir;
  LIconGroup: TMemoryStream;
  LIconRes: PByte;
  LIconID: Word;
  I: Integer;
  LGroupEntry: TGroupIconDirEntry;
begin

  if not FileExists(AExeFilePath) then
    raise Exception.Create('The specified executable file does not exist.');

  if not FileExists(AIconFilePath) then
    raise Exception.Create('The specified icon file does not exist.');

  LIconStream := TMemoryStream.Create;
  LIconGroup := TMemoryStream.Create;
  try
    // Load the icon file
    LIconStream.LoadFromFile(AIconFilePath);

    // Read the ICONDIR structure from the icon file
    LIconDir := PIconDir(LIconStream.Memory);
    if LIconDir^.idReserved <> 0 then
      raise Exception.Create('Invalid icon file format.');

    // Begin updating the executable's resources
    LUpdateHandle := BeginUpdateResource(PChar(AExeFilePath), False);
    if LUpdateHandle = 0 then
      raise Exception.Create('Failed to begin resource update.');

    try
      // Process each icon image in the .ico file
      LIconRes := PByte(LIconStream.Memory) + SizeOf(TIconDir);
      for I := 0 to LIconDir^.idCount - 1 do
      begin
        // Assign a unique resource ID for the RT_ICON
        LIconID := I + 1;

        // Add the icon image data as an RT_ICON resource
        if not UpdateResource(LUpdateHandle, RT_ICON, PChar(LIconID), LANG_NEUTRAL,
          Pointer(PByte(LIconStream.Memory) + PIconResInfo(LIconRes)^.dwImageOffset),
          PIconResInfo(LIconRes)^.dwBytesInRes) then
          raise Exception.CreateFmt('Failed to add RT_ICON resource for image %d.', [I]);

        // Move to the next icon entry
        Inc(LIconRes, SizeOf(TIconResInfo));
      end;

      // Create the GROUP_ICON resource
      LIconGroup.Clear;
      LIconGroup.Write(LIconDir^, SizeOf(TIconDir)); // Write ICONDIR header

      LIconRes := PByte(LIconStream.Memory) + SizeOf(TIconDir);
      // Write each GROUP_ICON entry
      for I := 0 to LIconDir^.idCount - 1 do
      begin
        // Populate the GROUP_ICON entry
        LGroupEntry.bWidth := PIconResInfo(LIconRes)^.bWidth;
        LGroupEntry.bHeight := PIconResInfo(LIconRes)^.bHeight;
        LGroupEntry.bColorCount := PIconResInfo(LIconRes)^.bColorCount;
        LGroupEntry.bReserved := 0;
        LGroupEntry.wPlanes := PIconResInfo(LIconRes)^.wPlanes;
        LGroupEntry.wBitCount := PIconResInfo(LIconRes)^.wBitCount;
        LGroupEntry.dwBytesInRes := PIconResInfo(LIconRes)^.dwBytesInRes;
        LGroupEntry.nID := I + 1; // Match resource ID for RT_ICON

        // Write the populated GROUP_ICON entry to the stream
        LIconGroup.Write(LGroupEntry, SizeOf(TGroupIconDirEntry));

        // Move to the next ICONDIRENTRY
        Inc(LIconRes, SizeOf(TIconResInfo));
      end;

      // Add the GROUP_ICON resource to the executable
      if not UpdateResource(LUpdateHandle, RT_GROUP_ICON, 'MAINICON', LANG_NEUTRAL,
        LIconGroup.Memory, LIconGroup.Size) then
        raise Exception.Create('Failed to add RT_GROUP_ICON resource.');

      // Commit the resource updates
      if not EndUpdateResource(LUpdateHandle, False) then
        raise Exception.Create('Failed to commit resource updates.');
    except
      EndUpdateResource(LUpdateHandle, True); // Discard changes on failure
      raise;
    end;
  finally
    LIconStream.Free;
    LIconGroup.Free;
  end;
end;

procedure UpdateVersionInfoResource(const PEFilePath: string; const AMajor, AMinor, APatch: Word; const AProductName, ADescription, AFilename, ACompanyName, ACopyright: string);
type
  { TVSFixedFileInfo }
  TVSFixedFileInfo = packed record
    dwSignature: DWORD;        // e.g. $FEEF04BD
    dwStrucVersion: DWORD;     // e.g. $00010000 for version 1.0
    dwFileVersionMS: DWORD;    // e.g. $00030075 for version 3.75
    dwFileVersionLS: DWORD;    // e.g. $00000031 for version 0.31
    dwProductVersionMS: DWORD; // Same format as dwFileVersionMS
    dwProductVersionLS: DWORD; // Same format as dwFileVersionLS
    dwFileFlagsMask: DWORD;    // = $3F for version "0011 1111"
    dwFileFlags: DWORD;        // e.g. VFF_DEBUG | VFF_PRERELEASE
    dwFileOS: DWORD;           // e.g. VOS_NT_WINDOWS32
    dwFileType: DWORD;         // e.g. VFT_APP
    dwFileSubtype: DWORD;      // e.g. VFT2_UNKNOWN
    dwFileDateMS: DWORD;       // file date
    dwFileDateLS: DWORD;       // file date
  end;

  { TStringPair }
  TStringPair = record
    Key: string;
    Value: string;
  end;

var
  LHandleUpdate: THandle;
  LVersionInfoStream: TMemoryStream;
  LFixedInfo: TVSFixedFileInfo;
  LDataPtr: Pointer;
  LDataSize: Integer;
  LStringFileInfoStart, LStringTableStart, LVarFileInfoStart: Int64;
  LStringPairs: array of TStringPair;
  LVErsion: string;
  LMajor, LMinor,LPatch: Word;
  LVSVersionInfoStart: Int64;
  LPair: TStringPair;
  LStringInfoEnd, LStringStart: Int64;
  LStringEnd, LFinalPos: Int64;
  LTranslationStart: Int64;

  procedure AlignStream(const AStream: TMemoryStream; const AAlignment: Integer);
  var
    LPadding: Integer;
    LPadByte: Byte;
  begin
    LPadding := (AAlignment - (AStream.Position mod AAlignment)) mod AAlignment;
    LPadByte := 0;
    while LPadding > 0 do
    begin
      AStream.WriteBuffer(LPadByte, 1);
      Dec(LPadding);
    end;
  end;

  procedure WriteWideString(const AStream: TMemoryStream; const AText: string);
  var
    LWideText: WideString;
  begin
    LWideText := WideString(AText);
    AStream.WriteBuffer(PWideChar(LWideText)^, (Length(LWideText) + 1) * SizeOf(WideChar));
  end;

  procedure SetFileVersionFromString(const AVersion: string; out AFileVersionMS, AFileVersionLS: DWORD);
  var
    LVersionParts: TArray<string>;
    LMajor, LMinor, LBuild, LRevision: Word;
  begin
    // Split the version string into its components
    LVersionParts := AVersion.Split(['.']);
    if Length(LVersionParts) <> 4 then
      raise Exception.Create('Invalid version string format. Expected "Major.Minor.Build.Revision".');

    // Parse each part into a Word
    LMajor := StrToIntDef(LVersionParts[0], 0);
    LMinor := StrToIntDef(LVersionParts[1], 0);
    LBuild := StrToIntDef(LVersionParts[2], 0);
    LRevision := StrToIntDef(LVersionParts[3], 0);

    // Set the high and low DWORD values
    AFileVersionMS := (DWORD(LMajor) shl 16) or DWORD(LMinor);
    AFileVersionLS := (DWORD(LBuild) shl 16) or DWORD(LRevision);
  end;

begin
  LMajor := EnsureRange(AMajor, 0, MaxWord);
  LMinor := EnsureRange(AMinor, 0, MaxWord);
  LPatch := EnsureRange(APatch, 0, MaxWord);
  LVersion := Format('%d.%d.%d.0', [LMajor, LMinor, LPatch]);

  SetLength(LStringPairs, 8);
  LStringPairs[0].Key := 'CompanyName';
  LStringPairs[0].Value := ACompanyName;
  LStringPairs[1].Key := 'FileDescription';
  LStringPairs[1].Value := ADescription;
  LStringPairs[2].Key := 'FileVersion';
  LStringPairs[2].Value := LVersion;
  LStringPairs[3].Key := 'InternalName';
  LStringPairs[3].Value := ADescription;
  LStringPairs[4].Key := 'LegalCopyright';
  LStringPairs[4].Value := ACopyright;
  LStringPairs[5].Key := 'OriginalFilename';
  LStringPairs[5].Value := AFilename;
  LStringPairs[6].Key := 'ProductName';
  LStringPairs[6].Value := AProductName;
  LStringPairs[7].Key := 'ProductVersion';
  LStringPairs[7].Value := LVersion;

  // Initialize fixed info structure
  FillChar(LFixedInfo, SizeOf(LFixedInfo), 0);
  LFixedInfo.dwSignature := $FEEF04BD;
  LFixedInfo.dwStrucVersion := $00010000;
  LFixedInfo.dwFileVersionMS := $00010000;
  LFixedInfo.dwFileVersionLS := $00000000;
  LFixedInfo.dwProductVersionMS := $00010000;
  LFixedInfo.dwProductVersionLS := $00000000;
  LFixedInfo.dwFileFlagsMask := $3F;
  LFixedInfo.dwFileFlags := 0;
  LFixedInfo.dwFileOS := VOS_NT_WINDOWS32;
  LFixedInfo.dwFileType := VFT_APP;
  LFixedInfo.dwFileSubtype := 0;
  LFixedInfo.dwFileDateMS := 0;
  LFixedInfo.dwFileDateLS := 0;

  // SEt MS and LS for FileVersion and ProductVersion
  SetFileVersionFromString(LVersion, LFixedInfo.dwFileVersionMS, LFixedInfo.dwFileVersionLS);
  SetFileVersionFromString(LVersion, LFixedInfo.dwProductVersionMS, LFixedInfo.dwProductVersionLS);

  LVersionInfoStream := TMemoryStream.Create;
  try
    // VS_VERSION_INFO
    LVSVersionInfoStart := LVersionInfoStream.Position;

    LVersionInfoStream.WriteData<Word>(0);  // Length placeholder
    LVersionInfoStream.WriteData<Word>(SizeOf(TVSFixedFileInfo));  // Value length
    LVersionInfoStream.WriteData<Word>(0);  // Type = 0
    WriteWideString(LVersionInfoStream, 'VS_VERSION_INFO');
    AlignStream(LVersionInfoStream, 4);

    // VS_FIXEDFILEINFO
    LVersionInfoStream.WriteBuffer(LFixedInfo, SizeOf(TVSFixedFileInfo));
    AlignStream(LVersionInfoStream, 4);

    // StringFileInfo
    LStringFileInfoStart := LVersionInfoStream.Position;
    LVersionInfoStream.WriteData<Word>(0);  // Length placeholder
    LVersionInfoStream.WriteData<Word>(0);  // Value length = 0
    LVersionInfoStream.WriteData<Word>(1);  // Type = 1
    WriteWideString(LVersionInfoStream, 'StringFileInfo');
    AlignStream(LVersionInfoStream, 4);

    // StringTable
    LStringTableStart := LVersionInfoStream.Position;
    LVersionInfoStream.WriteData<Word>(0);  // Length placeholder
    LVersionInfoStream.WriteData<Word>(0);  // Value length = 0
    LVersionInfoStream.WriteData<Word>(1);  // Type = 1
    WriteWideString(LVersionInfoStream, '040904B0'); // Match Delphi's default code page
    AlignStream(LVersionInfoStream, 4);

    // Write string pairs
    for LPair in LStringPairs do
    begin
      LStringStart := LVersionInfoStream.Position;

      LVersionInfoStream.WriteData<Word>(0);  // Length placeholder
      LVersionInfoStream.WriteData<Word>((Length(LPair.Value) + 1) * 2);  // Value length
      LVersionInfoStream.WriteData<Word>(1);  // Type = 1
      WriteWideString(LVersionInfoStream, LPair.Key);
      AlignStream(LVersionInfoStream, 4);
      WriteWideString(LVersionInfoStream, LPair.Value);
      AlignStream(LVersionInfoStream, 4);

      LStringEnd := LVersionInfoStream.Position;
      LVersionInfoStream.Position := LStringStart;
      LVersionInfoStream.WriteData<Word>(LStringEnd - LStringStart);
      LVersionInfoStream.Position := LStringEnd;
    end;

    LStringInfoEnd := LVersionInfoStream.Position;

    // Write StringTable length
    LVersionInfoStream.Position := LStringTableStart;
    LVersionInfoStream.WriteData<Word>(LStringInfoEnd - LStringTableStart);

    // Write StringFileInfo length
    LVersionInfoStream.Position := LStringFileInfoStart;
    LVersionInfoStream.WriteData<Word>(LStringInfoEnd - LStringFileInfoStart);

    // Start VarFileInfo where StringFileInfo ended
    LVarFileInfoStart := LStringInfoEnd;
    LVersionInfoStream.Position := LVarFileInfoStart;

    // VarFileInfo header
    LVersionInfoStream.WriteData<Word>(0);  // Length placeholder
    LVersionInfoStream.WriteData<Word>(0);  // Value length = 0
    LVersionInfoStream.WriteData<Word>(1);  // Type = 1 (text)
    WriteWideString(LVersionInfoStream, 'VarFileInfo');
    AlignStream(LVersionInfoStream, 4);

    // Translation value block
    LTranslationStart := LVersionInfoStream.Position;
    LVersionInfoStream.WriteData<Word>(0);  // Length placeholder
    LVersionInfoStream.WriteData<Word>(4);  // Value length = 4 (size of translation value)
    LVersionInfoStream.WriteData<Word>(0);  // Type = 0 (binary)
    WriteWideString(LVersionInfoStream, 'Translation');
    AlignStream(LVersionInfoStream, 4);

    // Write translation value
    LVersionInfoStream.WriteData<Word>($0409);  // Language ID (US English)
    LVersionInfoStream.WriteData<Word>($04B0);  // Unicode code page

    LFinalPos := LVersionInfoStream.Position;

    // Update VarFileInfo block length
    LVersionInfoStream.Position := LVarFileInfoStart;
    LVersionInfoStream.WriteData<Word>(LFinalPos - LVarFileInfoStart);

    // Update translation block length
    LVersionInfoStream.Position := LTranslationStart;
    LVersionInfoStream.WriteData<Word>(LFinalPos - LTranslationStart);

    // Update total version info length
    LVersionInfoStream.Position := LVSVersionInfoStart;
    LVersionInfoStream.WriteData<Word>(LFinalPos);

    LDataPtr := LVersionInfoStream.Memory;
    LDataSize := LVersionInfoStream.Size;

    // Update the resource
    LHandleUpdate := BeginUpdateResource(PChar(PEFilePath), False);
    if LHandleUpdate = 0 then
      RaiseLastOSError;

    try
      if not UpdateResourceW(LHandleUpdate, RT_VERSION, MAKEINTRESOURCE(1),
         MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), LDataPtr, LDataSize) then
        RaiseLastOSError;

      if not EndUpdateResource(LHandleUpdate, False) then
        RaiseLastOSError;
    except
      EndUpdateResource(LHandleUpdate, True);
      raise;
    end;
  finally
    LVersionInfoStream.Free;
  end;
end;

{$ENDREGION}

{$REGION ' GET EXPORTS '}
procedure GetExports(const aDLLHandle: THandle);
begin
  if aDllHandle = 0 then Exit;
  _spAtlasPage_createTexture := GetProcAddress(aDLLHandle, '_spAtlasPage_createTexture');
  _spAtlasPage_disposeTexture := GetProcAddress(aDLLHandle, '_spAtlasPage_disposeTexture');
  _spClippingAttachment_dispose := GetProcAddress(aDLLHandle, '_spClippingAttachment_dispose');
  _spUtil_readFile := GetProcAddress(aDLLHandle, '_spUtil_readFile');
  crc32 := GetProcAddress(aDLLHandle, 'crc32');
  IMG_FreeAnimation := GetProcAddress(aDLLHandle, 'IMG_FreeAnimation');
  IMG_isAVIF := GetProcAddress(aDLLHandle, 'IMG_isAVIF');
  IMG_isBMP := GetProcAddress(aDLLHandle, 'IMG_isBMP');
  IMG_isCUR := GetProcAddress(aDLLHandle, 'IMG_isCUR');
  IMG_isGIF := GetProcAddress(aDLLHandle, 'IMG_isGIF');
  IMG_isICO := GetProcAddress(aDLLHandle, 'IMG_isICO');
  IMG_isJPG := GetProcAddress(aDLLHandle, 'IMG_isJPG');
  IMG_isJXL := GetProcAddress(aDLLHandle, 'IMG_isJXL');
  IMG_isLBM := GetProcAddress(aDLLHandle, 'IMG_isLBM');
  IMG_isPCX := GetProcAddress(aDLLHandle, 'IMG_isPCX');
  IMG_isPNG := GetProcAddress(aDLLHandle, 'IMG_isPNG');
  IMG_isPNM := GetProcAddress(aDLLHandle, 'IMG_isPNM');
  IMG_isQOI := GetProcAddress(aDLLHandle, 'IMG_isQOI');
  IMG_isSVG := GetProcAddress(aDLLHandle, 'IMG_isSVG');
  IMG_isTIF := GetProcAddress(aDLLHandle, 'IMG_isTIF');
  IMG_isWEBP := GetProcAddress(aDLLHandle, 'IMG_isWEBP');
  IMG_isXCF := GetProcAddress(aDLLHandle, 'IMG_isXCF');
  IMG_isXPM := GetProcAddress(aDLLHandle, 'IMG_isXPM');
  IMG_isXV := GetProcAddress(aDLLHandle, 'IMG_isXV');
  IMG_Load := GetProcAddress(aDLLHandle, 'IMG_Load');
  IMG_Load_IO := GetProcAddress(aDLLHandle, 'IMG_Load_IO');
  IMG_LoadAnimation := GetProcAddress(aDLLHandle, 'IMG_LoadAnimation');
  IMG_LoadAnimation_IO := GetProcAddress(aDLLHandle, 'IMG_LoadAnimation_IO');
  IMG_LoadAnimationTyped_IO := GetProcAddress(aDLLHandle, 'IMG_LoadAnimationTyped_IO');
  IMG_LoadAVIF_IO := GetProcAddress(aDLLHandle, 'IMG_LoadAVIF_IO');
  IMG_LoadBMP_IO := GetProcAddress(aDLLHandle, 'IMG_LoadBMP_IO');
  IMG_LoadCUR_IO := GetProcAddress(aDLLHandle, 'IMG_LoadCUR_IO');
  IMG_LoadGIF_IO := GetProcAddress(aDLLHandle, 'IMG_LoadGIF_IO');
  IMG_LoadGIFAnimation_IO := GetProcAddress(aDLLHandle, 'IMG_LoadGIFAnimation_IO');
  IMG_LoadICO_IO := GetProcAddress(aDLLHandle, 'IMG_LoadICO_IO');
  IMG_LoadJPG_IO := GetProcAddress(aDLLHandle, 'IMG_LoadJPG_IO');
  IMG_LoadJXL_IO := GetProcAddress(aDLLHandle, 'IMG_LoadJXL_IO');
  IMG_LoadLBM_IO := GetProcAddress(aDLLHandle, 'IMG_LoadLBM_IO');
  IMG_LoadPCX_IO := GetProcAddress(aDLLHandle, 'IMG_LoadPCX_IO');
  IMG_LoadPNG_IO := GetProcAddress(aDLLHandle, 'IMG_LoadPNG_IO');
  IMG_LoadPNM_IO := GetProcAddress(aDLLHandle, 'IMG_LoadPNM_IO');
  IMG_LoadQOI_IO := GetProcAddress(aDLLHandle, 'IMG_LoadQOI_IO');
  IMG_LoadSizedSVG_IO := GetProcAddress(aDLLHandle, 'IMG_LoadSizedSVG_IO');
  IMG_LoadSVG_IO := GetProcAddress(aDLLHandle, 'IMG_LoadSVG_IO');
  IMG_LoadTexture := GetProcAddress(aDLLHandle, 'IMG_LoadTexture');
  IMG_LoadTexture_IO := GetProcAddress(aDLLHandle, 'IMG_LoadTexture_IO');
  IMG_LoadTextureTyped_IO := GetProcAddress(aDLLHandle, 'IMG_LoadTextureTyped_IO');
  IMG_LoadTGA_IO := GetProcAddress(aDLLHandle, 'IMG_LoadTGA_IO');
  IMG_LoadTIF_IO := GetProcAddress(aDLLHandle, 'IMG_LoadTIF_IO');
  IMG_LoadTyped_IO := GetProcAddress(aDLLHandle, 'IMG_LoadTyped_IO');
  IMG_LoadWEBP_IO := GetProcAddress(aDLLHandle, 'IMG_LoadWEBP_IO');
  IMG_LoadWEBPAnimation_IO := GetProcAddress(aDLLHandle, 'IMG_LoadWEBPAnimation_IO');
  IMG_LoadXCF_IO := GetProcAddress(aDLLHandle, 'IMG_LoadXCF_IO');
  IMG_LoadXPM_IO := GetProcAddress(aDLLHandle, 'IMG_LoadXPM_IO');
  IMG_LoadXV_IO := GetProcAddress(aDLLHandle, 'IMG_LoadXV_IO');
  IMG_ReadXPMFromArray := GetProcAddress(aDLLHandle, 'IMG_ReadXPMFromArray');
  IMG_ReadXPMFromArrayToRGB888 := GetProcAddress(aDLLHandle, 'IMG_ReadXPMFromArrayToRGB888');
  IMG_SaveAVIF := GetProcAddress(aDLLHandle, 'IMG_SaveAVIF');
  IMG_SaveAVIF_IO := GetProcAddress(aDLLHandle, 'IMG_SaveAVIF_IO');
  IMG_SaveJPG := GetProcAddress(aDLLHandle, 'IMG_SaveJPG');
  IMG_SaveJPG_IO := GetProcAddress(aDLLHandle, 'IMG_SaveJPG_IO');
  IMG_SavePNG := GetProcAddress(aDLLHandle, 'IMG_SavePNG');
  IMG_SavePNG_IO := GetProcAddress(aDLLHandle, 'IMG_SavePNG_IO');
  IMG_Version := GetProcAddress(aDLLHandle, 'IMG_Version');
  Mix_AllocateChannels := GetProcAddress(aDLLHandle, 'Mix_AllocateChannels');
  Mix_ChannelFinished := GetProcAddress(aDLLHandle, 'Mix_ChannelFinished');
  Mix_CloseAudio := GetProcAddress(aDLLHandle, 'Mix_CloseAudio');
  Mix_EachSoundFont := GetProcAddress(aDLLHandle, 'Mix_EachSoundFont');
  Mix_ExpireChannel := GetProcAddress(aDLLHandle, 'Mix_ExpireChannel');
  Mix_FadeInChannel := GetProcAddress(aDLLHandle, 'Mix_FadeInChannel');
  Mix_FadeInChannelTimed := GetProcAddress(aDLLHandle, 'Mix_FadeInChannelTimed');
  Mix_FadeInMusic := GetProcAddress(aDLLHandle, 'Mix_FadeInMusic');
  Mix_FadeInMusicPos := GetProcAddress(aDLLHandle, 'Mix_FadeInMusicPos');
  Mix_FadeOutChannel := GetProcAddress(aDLLHandle, 'Mix_FadeOutChannel');
  Mix_FadeOutGroup := GetProcAddress(aDLLHandle, 'Mix_FadeOutGroup');
  Mix_FadeOutMusic := GetProcAddress(aDLLHandle, 'Mix_FadeOutMusic');
  Mix_FadingChannel := GetProcAddress(aDLLHandle, 'Mix_FadingChannel');
  Mix_FadingMusic := GetProcAddress(aDLLHandle, 'Mix_FadingMusic');
  Mix_FreeChunk := GetProcAddress(aDLLHandle, 'Mix_FreeChunk');
  Mix_FreeMusic := GetProcAddress(aDLLHandle, 'Mix_FreeMusic');
  Mix_GetChunk := GetProcAddress(aDLLHandle, 'Mix_GetChunk');
  Mix_GetChunkDecoder := GetProcAddress(aDLLHandle, 'Mix_GetChunkDecoder');
  Mix_GetMusicAlbumTag := GetProcAddress(aDLLHandle, 'Mix_GetMusicAlbumTag');
  Mix_GetMusicArtistTag := GetProcAddress(aDLLHandle, 'Mix_GetMusicArtistTag');
  Mix_GetMusicCopyrightTag := GetProcAddress(aDLLHandle, 'Mix_GetMusicCopyrightTag');
  Mix_GetMusicDecoder := GetProcAddress(aDLLHandle, 'Mix_GetMusicDecoder');
  Mix_GetMusicHookData := GetProcAddress(aDLLHandle, 'Mix_GetMusicHookData');
  Mix_GetMusicLoopEndTime := GetProcAddress(aDLLHandle, 'Mix_GetMusicLoopEndTime');
  Mix_GetMusicLoopLengthTime := GetProcAddress(aDLLHandle, 'Mix_GetMusicLoopLengthTime');
  Mix_GetMusicLoopStartTime := GetProcAddress(aDLLHandle, 'Mix_GetMusicLoopStartTime');
  Mix_GetMusicPosition := GetProcAddress(aDLLHandle, 'Mix_GetMusicPosition');
  Mix_GetMusicTitle := GetProcAddress(aDLLHandle, 'Mix_GetMusicTitle');
  Mix_GetMusicTitleTag := GetProcAddress(aDLLHandle, 'Mix_GetMusicTitleTag');
  Mix_GetMusicType := GetProcAddress(aDLLHandle, 'Mix_GetMusicType');
  Mix_GetMusicVolume := GetProcAddress(aDLLHandle, 'Mix_GetMusicVolume');
  Mix_GetNumChunkDecoders := GetProcAddress(aDLLHandle, 'Mix_GetNumChunkDecoders');
  Mix_GetNumMusicDecoders := GetProcAddress(aDLLHandle, 'Mix_GetNumMusicDecoders');
  Mix_GetNumTracks := GetProcAddress(aDLLHandle, 'Mix_GetNumTracks');
  Mix_GetSoundFonts := GetProcAddress(aDLLHandle, 'Mix_GetSoundFonts');
  Mix_GetTimidityCfg := GetProcAddress(aDLLHandle, 'Mix_GetTimidityCfg');
  Mix_GroupAvailable := GetProcAddress(aDLLHandle, 'Mix_GroupAvailable');
  Mix_GroupChannel := GetProcAddress(aDLLHandle, 'Mix_GroupChannel');
  Mix_GroupChannels := GetProcAddress(aDLLHandle, 'Mix_GroupChannels');
  Mix_GroupCount := GetProcAddress(aDLLHandle, 'Mix_GroupCount');
  Mix_GroupNewer := GetProcAddress(aDLLHandle, 'Mix_GroupNewer');
  Mix_GroupOldest := GetProcAddress(aDLLHandle, 'Mix_GroupOldest');
  Mix_HaltChannel := GetProcAddress(aDLLHandle, 'Mix_HaltChannel');
  Mix_HaltGroup := GetProcAddress(aDLLHandle, 'Mix_HaltGroup');
  Mix_HaltMusic := GetProcAddress(aDLLHandle, 'Mix_HaltMusic');
  Mix_HasChunkDecoder := GetProcAddress(aDLLHandle, 'Mix_HasChunkDecoder');
  Mix_HasMusicDecoder := GetProcAddress(aDLLHandle, 'Mix_HasMusicDecoder');
  Mix_HookMusic := GetProcAddress(aDLLHandle, 'Mix_HookMusic');
  Mix_HookMusicFinished := GetProcAddress(aDLLHandle, 'Mix_HookMusicFinished');
  Mix_Init := GetProcAddress(aDLLHandle, 'Mix_Init');
  Mix_LoadMUS := GetProcAddress(aDLLHandle, 'Mix_LoadMUS');
  Mix_LoadMUS_IO := GetProcAddress(aDLLHandle, 'Mix_LoadMUS_IO');
  Mix_LoadMUSType_IO := GetProcAddress(aDLLHandle, 'Mix_LoadMUSType_IO');
  Mix_LoadWAV := GetProcAddress(aDLLHandle, 'Mix_LoadWAV');
  Mix_LoadWAV_IO := GetProcAddress(aDLLHandle, 'Mix_LoadWAV_IO');
  Mix_MasterVolume := GetProcAddress(aDLLHandle, 'Mix_MasterVolume');
  Mix_ModMusicJumpToOrder := GetProcAddress(aDLLHandle, 'Mix_ModMusicJumpToOrder');
  Mix_MusicDuration := GetProcAddress(aDLLHandle, 'Mix_MusicDuration');
  Mix_OpenAudio := GetProcAddress(aDLLHandle, 'Mix_OpenAudio');
  Mix_Pause := GetProcAddress(aDLLHandle, 'Mix_Pause');
  Mix_PauseAudio := GetProcAddress(aDLLHandle, 'Mix_PauseAudio');
  Mix_Paused := GetProcAddress(aDLLHandle, 'Mix_Paused');
  Mix_PausedMusic := GetProcAddress(aDLLHandle, 'Mix_PausedMusic');
  Mix_PauseGroup := GetProcAddress(aDLLHandle, 'Mix_PauseGroup');
  Mix_PauseMusic := GetProcAddress(aDLLHandle, 'Mix_PauseMusic');
  Mix_PlayChannel := GetProcAddress(aDLLHandle, 'Mix_PlayChannel');
  Mix_PlayChannelTimed := GetProcAddress(aDLLHandle, 'Mix_PlayChannelTimed');
  Mix_Playing := GetProcAddress(aDLLHandle, 'Mix_Playing');
  Mix_PlayingMusic := GetProcAddress(aDLLHandle, 'Mix_PlayingMusic');
  Mix_PlayMusic := GetProcAddress(aDLLHandle, 'Mix_PlayMusic');
  Mix_QuerySpec := GetProcAddress(aDLLHandle, 'Mix_QuerySpec');
  Mix_QuickLoad_RAW := GetProcAddress(aDLLHandle, 'Mix_QuickLoad_RAW');
  Mix_QuickLoad_WAV := GetProcAddress(aDLLHandle, 'Mix_QuickLoad_WAV');
  Mix_Quit := GetProcAddress(aDLLHandle, 'Mix_Quit');
  Mix_RegisterEffect := GetProcAddress(aDLLHandle, 'Mix_RegisterEffect');
  Mix_ReserveChannels := GetProcAddress(aDLLHandle, 'Mix_ReserveChannels');
  Mix_Resume := GetProcAddress(aDLLHandle, 'Mix_Resume');
  Mix_ResumeGroup := GetProcAddress(aDLLHandle, 'Mix_ResumeGroup');
  Mix_ResumeMusic := GetProcAddress(aDLLHandle, 'Mix_ResumeMusic');
  Mix_RewindMusic := GetProcAddress(aDLLHandle, 'Mix_RewindMusic');
  Mix_SetDistance := GetProcAddress(aDLLHandle, 'Mix_SetDistance');
  Mix_SetMusicPosition := GetProcAddress(aDLLHandle, 'Mix_SetMusicPosition');
  Mix_SetPanning := GetProcAddress(aDLLHandle, 'Mix_SetPanning');
  Mix_SetPosition := GetProcAddress(aDLLHandle, 'Mix_SetPosition');
  Mix_SetPostMix := GetProcAddress(aDLLHandle, 'Mix_SetPostMix');
  Mix_SetReverseStereo := GetProcAddress(aDLLHandle, 'Mix_SetReverseStereo');
  Mix_SetSoundFonts := GetProcAddress(aDLLHandle, 'Mix_SetSoundFonts');
  Mix_SetTimidityCfg := GetProcAddress(aDLLHandle, 'Mix_SetTimidityCfg');
  Mix_StartTrack := GetProcAddress(aDLLHandle, 'Mix_StartTrack');
  Mix_UnregisterAllEffects := GetProcAddress(aDLLHandle, 'Mix_UnregisterAllEffects');
  Mix_UnregisterEffect := GetProcAddress(aDLLHandle, 'Mix_UnregisterEffect');
  Mix_Version := GetProcAddress(aDLLHandle, 'Mix_Version');
  Mix_Volume := GetProcAddress(aDLLHandle, 'Mix_Volume');
  Mix_VolumeChunk := GetProcAddress(aDLLHandle, 'Mix_VolumeChunk');
  Mix_VolumeMusic := GetProcAddress(aDLLHandle, 'Mix_VolumeMusic');
  plm_audio_create_with_buffer := GetProcAddress(aDLLHandle, 'plm_audio_create_with_buffer');
  plm_audio_decode := GetProcAddress(aDLLHandle, 'plm_audio_decode');
  plm_audio_destroy := GetProcAddress(aDLLHandle, 'plm_audio_destroy');
  plm_audio_get_samplerate := GetProcAddress(aDLLHandle, 'plm_audio_get_samplerate');
  plm_audio_get_time := GetProcAddress(aDLLHandle, 'plm_audio_get_time');
  plm_audio_has_ended := GetProcAddress(aDLLHandle, 'plm_audio_has_ended');
  plm_audio_has_header := GetProcAddress(aDLLHandle, 'plm_audio_has_header');
  plm_audio_rewind := GetProcAddress(aDLLHandle, 'plm_audio_rewind');
  plm_audio_set_time := GetProcAddress(aDLLHandle, 'plm_audio_set_time');
  plm_buffer_create_for_appending := GetProcAddress(aDLLHandle, 'plm_buffer_create_for_appending');
  plm_buffer_create_with_capacity := GetProcAddress(aDLLHandle, 'plm_buffer_create_with_capacity');
  plm_buffer_create_with_file := GetProcAddress(aDLLHandle, 'plm_buffer_create_with_file');
  plm_buffer_create_with_filename := GetProcAddress(aDLLHandle, 'plm_buffer_create_with_filename');
  plm_buffer_create_with_memory := GetProcAddress(aDLLHandle, 'plm_buffer_create_with_memory');
  plm_buffer_destroy := GetProcAddress(aDLLHandle, 'plm_buffer_destroy');
  plm_buffer_get_remaining := GetProcAddress(aDLLHandle, 'plm_buffer_get_remaining');
  plm_buffer_get_size := GetProcAddress(aDLLHandle, 'plm_buffer_get_size');
  plm_buffer_has_ended := GetProcAddress(aDLLHandle, 'plm_buffer_has_ended');
  plm_buffer_rewind := GetProcAddress(aDLLHandle, 'plm_buffer_rewind');
  plm_buffer_set_load_callback := GetProcAddress(aDLLHandle, 'plm_buffer_set_load_callback');
  plm_buffer_signal_end := GetProcAddress(aDLLHandle, 'plm_buffer_signal_end');
  plm_buffer_write := GetProcAddress(aDLLHandle, 'plm_buffer_write');
  plm_create_with_buffer := GetProcAddress(aDLLHandle, 'plm_create_with_buffer');
  plm_create_with_file := GetProcAddress(aDLLHandle, 'plm_create_with_file');
  plm_create_with_filename := GetProcAddress(aDLLHandle, 'plm_create_with_filename');
  plm_create_with_memory := GetProcAddress(aDLLHandle, 'plm_create_with_memory');
  plm_decode := GetProcAddress(aDLLHandle, 'plm_decode');
  plm_decode_audio := GetProcAddress(aDLLHandle, 'plm_decode_audio');
  plm_decode_video := GetProcAddress(aDLLHandle, 'plm_decode_video');
  plm_demux_create := GetProcAddress(aDLLHandle, 'plm_demux_create');
  plm_demux_decode := GetProcAddress(aDLLHandle, 'plm_demux_decode');
  plm_demux_destroy := GetProcAddress(aDLLHandle, 'plm_demux_destroy');
  plm_demux_get_duration := GetProcAddress(aDLLHandle, 'plm_demux_get_duration');
  plm_demux_get_num_audio_streams := GetProcAddress(aDLLHandle, 'plm_demux_get_num_audio_streams');
  plm_demux_get_num_video_streams := GetProcAddress(aDLLHandle, 'plm_demux_get_num_video_streams');
  plm_demux_get_start_time := GetProcAddress(aDLLHandle, 'plm_demux_get_start_time');
  plm_demux_has_ended := GetProcAddress(aDLLHandle, 'plm_demux_has_ended');
  plm_demux_has_headers := GetProcAddress(aDLLHandle, 'plm_demux_has_headers');
  plm_demux_probe := GetProcAddress(aDLLHandle, 'plm_demux_probe');
  plm_demux_rewind := GetProcAddress(aDLLHandle, 'plm_demux_rewind');
  plm_demux_seek := GetProcAddress(aDLLHandle, 'plm_demux_seek');
  plm_destroy := GetProcAddress(aDLLHandle, 'plm_destroy');
  plm_frame_to_abgr := GetProcAddress(aDLLHandle, 'plm_frame_to_abgr');
  plm_frame_to_argb := GetProcAddress(aDLLHandle, 'plm_frame_to_argb');
  plm_frame_to_bgr := GetProcAddress(aDLLHandle, 'plm_frame_to_bgr');
  plm_frame_to_bgra := GetProcAddress(aDLLHandle, 'plm_frame_to_bgra');
  plm_frame_to_rgb := GetProcAddress(aDLLHandle, 'plm_frame_to_rgb');
  plm_frame_to_rgba := GetProcAddress(aDLLHandle, 'plm_frame_to_rgba');
  plm_get_audio_enabled := GetProcAddress(aDLLHandle, 'plm_get_audio_enabled');
  plm_get_audio_lead_time := GetProcAddress(aDLLHandle, 'plm_get_audio_lead_time');
  plm_get_duration := GetProcAddress(aDLLHandle, 'plm_get_duration');
  plm_get_framerate := GetProcAddress(aDLLHandle, 'plm_get_framerate');
  plm_get_height := GetProcAddress(aDLLHandle, 'plm_get_height');
  plm_get_loop := GetProcAddress(aDLLHandle, 'plm_get_loop');
  plm_get_num_audio_streams := GetProcAddress(aDLLHandle, 'plm_get_num_audio_streams');
  plm_get_num_video_streams := GetProcAddress(aDLLHandle, 'plm_get_num_video_streams');
  plm_get_pixel_aspect_ratio := GetProcAddress(aDLLHandle, 'plm_get_pixel_aspect_ratio');
  plm_get_samplerate := GetProcAddress(aDLLHandle, 'plm_get_samplerate');
  plm_get_time := GetProcAddress(aDLLHandle, 'plm_get_time');
  plm_get_video_enabled := GetProcAddress(aDLLHandle, 'plm_get_video_enabled');
  plm_get_width := GetProcAddress(aDLLHandle, 'plm_get_width');
  plm_has_ended := GetProcAddress(aDLLHandle, 'plm_has_ended');
  plm_has_headers := GetProcAddress(aDLLHandle, 'plm_has_headers');
  plm_probe := GetProcAddress(aDLLHandle, 'plm_probe');
  plm_rewind := GetProcAddress(aDLLHandle, 'plm_rewind');
  plm_seek := GetProcAddress(aDLLHandle, 'plm_seek');
  plm_seek_frame := GetProcAddress(aDLLHandle, 'plm_seek_frame');
  plm_set_audio_decode_callback := GetProcAddress(aDLLHandle, 'plm_set_audio_decode_callback');
  plm_set_audio_enabled := GetProcAddress(aDLLHandle, 'plm_set_audio_enabled');
  plm_set_audio_lead_time := GetProcAddress(aDLLHandle, 'plm_set_audio_lead_time');
  plm_set_audio_stream := GetProcAddress(aDLLHandle, 'plm_set_audio_stream');
  plm_set_loop := GetProcAddress(aDLLHandle, 'plm_set_loop');
  plm_set_video_decode_callback := GetProcAddress(aDLLHandle, 'plm_set_video_decode_callback');
  plm_set_video_enabled := GetProcAddress(aDLLHandle, 'plm_set_video_enabled');
  plm_video_create_with_buffer := GetProcAddress(aDLLHandle, 'plm_video_create_with_buffer');
  plm_video_decode := GetProcAddress(aDLLHandle, 'plm_video_decode');
  plm_video_destroy := GetProcAddress(aDLLHandle, 'plm_video_destroy');
  plm_video_get_framerate := GetProcAddress(aDLLHandle, 'plm_video_get_framerate');
  plm_video_get_height := GetProcAddress(aDLLHandle, 'plm_video_get_height');
  plm_video_get_pixel_aspect_ratio := GetProcAddress(aDLLHandle, 'plm_video_get_pixel_aspect_ratio');
  plm_video_get_time := GetProcAddress(aDLLHandle, 'plm_video_get_time');
  plm_video_get_width := GetProcAddress(aDLLHandle, 'plm_video_get_width');
  plm_video_has_ended := GetProcAddress(aDLLHandle, 'plm_video_has_ended');
  plm_video_has_header := GetProcAddress(aDLLHandle, 'plm_video_has_header');
  plm_video_rewind := GetProcAddress(aDLLHandle, 'plm_video_rewind');
  plm_video_set_no_delay := GetProcAddress(aDLLHandle, 'plm_video_set_no_delay');
  plm_video_set_time := GetProcAddress(aDLLHandle, 'plm_video_set_time');
  SDL_abs := GetProcAddress(aDLLHandle, 'SDL_abs');
  SDL_acos := GetProcAddress(aDLLHandle, 'SDL_acos');
  SDL_acosf := GetProcAddress(aDLLHandle, 'SDL_acosf');
  SDL_AcquireCameraFrame := GetProcAddress(aDLLHandle, 'SDL_AcquireCameraFrame');
  SDL_AcquireGPUCommandBuffer := GetProcAddress(aDLLHandle, 'SDL_AcquireGPUCommandBuffer');
  SDL_AcquireGPUSwapchainTexture := GetProcAddress(aDLLHandle, 'SDL_AcquireGPUSwapchainTexture');
  SDL_AddAtomicInt := GetProcAddress(aDLLHandle, 'SDL_AddAtomicInt');
  SDL_AddEventWatch := GetProcAddress(aDLLHandle, 'SDL_AddEventWatch');
  SDL_AddGamepadMapping := GetProcAddress(aDLLHandle, 'SDL_AddGamepadMapping');
  SDL_AddGamepadMappingsFromFile := GetProcAddress(aDLLHandle, 'SDL_AddGamepadMappingsFromFile');
  SDL_AddGamepadMappingsFromIO := GetProcAddress(aDLLHandle, 'SDL_AddGamepadMappingsFromIO');
  SDL_AddHintCallback := GetProcAddress(aDLLHandle, 'SDL_AddHintCallback');
  SDL_AddSurfaceAlternateImage := GetProcAddress(aDLLHandle, 'SDL_AddSurfaceAlternateImage');
  SDL_AddTimer := GetProcAddress(aDLLHandle, 'SDL_AddTimer');
  SDL_AddTimerNS := GetProcAddress(aDLLHandle, 'SDL_AddTimerNS');
  SDL_AddVulkanRenderSemaphores := GetProcAddress(aDLLHandle, 'SDL_AddVulkanRenderSemaphores');
  SDL_aligned_alloc := GetProcAddress(aDLLHandle, 'SDL_aligned_alloc');
  SDL_aligned_free := GetProcAddress(aDLLHandle, 'SDL_aligned_free');
  SDL_asin := GetProcAddress(aDLLHandle, 'SDL_asin');
  SDL_asinf := GetProcAddress(aDLLHandle, 'SDL_asinf');
  SDL_asprintf := GetProcAddress(aDLLHandle, 'SDL_asprintf');
  SDL_AsyncIOFromFile := GetProcAddress(aDLLHandle, 'SDL_AsyncIOFromFile');
  SDL_atan := GetProcAddress(aDLLHandle, 'SDL_atan');
  SDL_atan2 := GetProcAddress(aDLLHandle, 'SDL_atan2');
  SDL_atan2f := GetProcAddress(aDLLHandle, 'SDL_atan2f');
  SDL_atanf := GetProcAddress(aDLLHandle, 'SDL_atanf');
  SDL_atof := GetProcAddress(aDLLHandle, 'SDL_atof');
  SDL_atoi := GetProcAddress(aDLLHandle, 'SDL_atoi');
  SDL_AttachVirtualJoystick := GetProcAddress(aDLLHandle, 'SDL_AttachVirtualJoystick');
  SDL_AudioDevicePaused := GetProcAddress(aDLLHandle, 'SDL_AudioDevicePaused');
  SDL_BeginGPUComputePass := GetProcAddress(aDLLHandle, 'SDL_BeginGPUComputePass');
  SDL_BeginGPUCopyPass := GetProcAddress(aDLLHandle, 'SDL_BeginGPUCopyPass');
  SDL_BeginGPURenderPass := GetProcAddress(aDLLHandle, 'SDL_BeginGPURenderPass');
  SDL_BindAudioStream := GetProcAddress(aDLLHandle, 'SDL_BindAudioStream');
  SDL_BindAudioStreams := GetProcAddress(aDLLHandle, 'SDL_BindAudioStreams');
  SDL_BindGPUComputePipeline := GetProcAddress(aDLLHandle, 'SDL_BindGPUComputePipeline');
  SDL_BindGPUComputeSamplers := GetProcAddress(aDLLHandle, 'SDL_BindGPUComputeSamplers');
  SDL_BindGPUComputeStorageBuffers := GetProcAddress(aDLLHandle, 'SDL_BindGPUComputeStorageBuffers');
  SDL_BindGPUComputeStorageTextures := GetProcAddress(aDLLHandle, 'SDL_BindGPUComputeStorageTextures');
  SDL_BindGPUFragmentSamplers := GetProcAddress(aDLLHandle, 'SDL_BindGPUFragmentSamplers');
  SDL_BindGPUFragmentStorageBuffers := GetProcAddress(aDLLHandle, 'SDL_BindGPUFragmentStorageBuffers');
  SDL_BindGPUFragmentStorageTextures := GetProcAddress(aDLLHandle, 'SDL_BindGPUFragmentStorageTextures');
  SDL_BindGPUGraphicsPipeline := GetProcAddress(aDLLHandle, 'SDL_BindGPUGraphicsPipeline');
  SDL_BindGPUIndexBuffer := GetProcAddress(aDLLHandle, 'SDL_BindGPUIndexBuffer');
  SDL_BindGPUVertexBuffers := GetProcAddress(aDLLHandle, 'SDL_BindGPUVertexBuffers');
  SDL_BindGPUVertexSamplers := GetProcAddress(aDLLHandle, 'SDL_BindGPUVertexSamplers');
  SDL_BindGPUVertexStorageBuffers := GetProcAddress(aDLLHandle, 'SDL_BindGPUVertexStorageBuffers');
  SDL_BindGPUVertexStorageTextures := GetProcAddress(aDLLHandle, 'SDL_BindGPUVertexStorageTextures');
  SDL_BlitGPUTexture := GetProcAddress(aDLLHandle, 'SDL_BlitGPUTexture');
  SDL_BlitSurface := GetProcAddress(aDLLHandle, 'SDL_BlitSurface');
  SDL_BlitSurface9Grid := GetProcAddress(aDLLHandle, 'SDL_BlitSurface9Grid');
  SDL_BlitSurfaceScaled := GetProcAddress(aDLLHandle, 'SDL_BlitSurfaceScaled');
  SDL_BlitSurfaceTiled := GetProcAddress(aDLLHandle, 'SDL_BlitSurfaceTiled');
  SDL_BlitSurfaceTiledWithScale := GetProcAddress(aDLLHandle, 'SDL_BlitSurfaceTiledWithScale');
  SDL_BlitSurfaceUnchecked := GetProcAddress(aDLLHandle, 'SDL_BlitSurfaceUnchecked');
  SDL_BlitSurfaceUncheckedScaled := GetProcAddress(aDLLHandle, 'SDL_BlitSurfaceUncheckedScaled');
  SDL_BroadcastCondition := GetProcAddress(aDLLHandle, 'SDL_BroadcastCondition');
  SDL_bsearch := GetProcAddress(aDLLHandle, 'SDL_bsearch');
  SDL_bsearch_r := GetProcAddress(aDLLHandle, 'SDL_bsearch_r');
  SDL_CalculateGPUTextureFormatSize := GetProcAddress(aDLLHandle, 'SDL_CalculateGPUTextureFormatSize');
  SDL_calloc := GetProcAddress(aDLLHandle, 'SDL_calloc');
  SDL_CancelGPUCommandBuffer := GetProcAddress(aDLLHandle, 'SDL_CancelGPUCommandBuffer');
  SDL_CaptureMouse := GetProcAddress(aDLLHandle, 'SDL_CaptureMouse');
  SDL_ceil := GetProcAddress(aDLLHandle, 'SDL_ceil');
  SDL_ceilf := GetProcAddress(aDLLHandle, 'SDL_ceilf');
  SDL_ClaimWindowForGPUDevice := GetProcAddress(aDLLHandle, 'SDL_ClaimWindowForGPUDevice');
  SDL_CleanupTLS := GetProcAddress(aDLLHandle, 'SDL_CleanupTLS');
  SDL_ClearAudioStream := GetProcAddress(aDLLHandle, 'SDL_ClearAudioStream');
  SDL_ClearClipboardData := GetProcAddress(aDLLHandle, 'SDL_ClearClipboardData');
  SDL_ClearComposition := GetProcAddress(aDLLHandle, 'SDL_ClearComposition');
  SDL_ClearError := GetProcAddress(aDLLHandle, 'SDL_ClearError');
  SDL_ClearProperty := GetProcAddress(aDLLHandle, 'SDL_ClearProperty');
  SDL_ClearSurface := GetProcAddress(aDLLHandle, 'SDL_ClearSurface');
  SDL_CloseAsyncIO := GetProcAddress(aDLLHandle, 'SDL_CloseAsyncIO');
  SDL_CloseAudioDevice := GetProcAddress(aDLLHandle, 'SDL_CloseAudioDevice');
  SDL_CloseCamera := GetProcAddress(aDLLHandle, 'SDL_CloseCamera');
  SDL_CloseGamepad := GetProcAddress(aDLLHandle, 'SDL_CloseGamepad');
  SDL_CloseHaptic := GetProcAddress(aDLLHandle, 'SDL_CloseHaptic');
  SDL_CloseIO := GetProcAddress(aDLLHandle, 'SDL_CloseIO');
  SDL_CloseJoystick := GetProcAddress(aDLLHandle, 'SDL_CloseJoystick');
  SDL_CloseSensor := GetProcAddress(aDLLHandle, 'SDL_CloseSensor');
  SDL_CloseStorage := GetProcAddress(aDLLHandle, 'SDL_CloseStorage');
  SDL_CompareAndSwapAtomicInt := GetProcAddress(aDLLHandle, 'SDL_CompareAndSwapAtomicInt');
  SDL_CompareAndSwapAtomicPointer := GetProcAddress(aDLLHandle, 'SDL_CompareAndSwapAtomicPointer');
  SDL_CompareAndSwapAtomicU32 := GetProcAddress(aDLLHandle, 'SDL_CompareAndSwapAtomicU32');
  SDL_ComposeCustomBlendMode := GetProcAddress(aDLLHandle, 'SDL_ComposeCustomBlendMode');
  SDL_ConvertAudioSamples := GetProcAddress(aDLLHandle, 'SDL_ConvertAudioSamples');
  SDL_ConvertEventToRenderCoordinates := GetProcAddress(aDLLHandle, 'SDL_ConvertEventToRenderCoordinates');
  SDL_ConvertPixels := GetProcAddress(aDLLHandle, 'SDL_ConvertPixels');
  SDL_ConvertPixelsAndColorspace := GetProcAddress(aDLLHandle, 'SDL_ConvertPixelsAndColorspace');
  SDL_ConvertSurface := GetProcAddress(aDLLHandle, 'SDL_ConvertSurface');
  SDL_ConvertSurfaceAndColorspace := GetProcAddress(aDLLHandle, 'SDL_ConvertSurfaceAndColorspace');
  SDL_CopyFile := GetProcAddress(aDLLHandle, 'SDL_CopyFile');
  SDL_CopyGPUBufferToBuffer := GetProcAddress(aDLLHandle, 'SDL_CopyGPUBufferToBuffer');
  SDL_CopyGPUTextureToTexture := GetProcAddress(aDLLHandle, 'SDL_CopyGPUTextureToTexture');
  SDL_CopyProperties := GetProcAddress(aDLLHandle, 'SDL_CopyProperties');
  SDL_copysign := GetProcAddress(aDLLHandle, 'SDL_copysign');
  SDL_copysignf := GetProcAddress(aDLLHandle, 'SDL_copysignf');
  SDL_CopyStorageFile := GetProcAddress(aDLLHandle, 'SDL_CopyStorageFile');
  SDL_cos := GetProcAddress(aDLLHandle, 'SDL_cos');
  SDL_cosf := GetProcAddress(aDLLHandle, 'SDL_cosf');
  SDL_crc16 := GetProcAddress(aDLLHandle, 'SDL_crc16');
  SDL_crc32 := GetProcAddress(aDLLHandle, 'SDL_crc32');
  SDL_CreateAsyncIOQueue := GetProcAddress(aDLLHandle, 'SDL_CreateAsyncIOQueue');
  SDL_CreateAudioStream := GetProcAddress(aDLLHandle, 'SDL_CreateAudioStream');
  SDL_CreateColorCursor := GetProcAddress(aDLLHandle, 'SDL_CreateColorCursor');
  SDL_CreateCondition := GetProcAddress(aDLLHandle, 'SDL_CreateCondition');
  SDL_CreateCursor := GetProcAddress(aDLLHandle, 'SDL_CreateCursor');
  SDL_CreateDirectory := GetProcAddress(aDLLHandle, 'SDL_CreateDirectory');
  SDL_CreateEnvironment := GetProcAddress(aDLLHandle, 'SDL_CreateEnvironment');
  SDL_CreateGPUBuffer := GetProcAddress(aDLLHandle, 'SDL_CreateGPUBuffer');
  SDL_CreateGPUComputePipeline := GetProcAddress(aDLLHandle, 'SDL_CreateGPUComputePipeline');
  SDL_CreateGPUDevice := GetProcAddress(aDLLHandle, 'SDL_CreateGPUDevice');
  SDL_CreateGPUDeviceWithProperties := GetProcAddress(aDLLHandle, 'SDL_CreateGPUDeviceWithProperties');
  SDL_CreateGPUGraphicsPipeline := GetProcAddress(aDLLHandle, 'SDL_CreateGPUGraphicsPipeline');
  SDL_CreateGPUSampler := GetProcAddress(aDLLHandle, 'SDL_CreateGPUSampler');
  SDL_CreateGPUShader := GetProcAddress(aDLLHandle, 'SDL_CreateGPUShader');
  SDL_CreateGPUTexture := GetProcAddress(aDLLHandle, 'SDL_CreateGPUTexture');
  SDL_CreateGPUTransferBuffer := GetProcAddress(aDLLHandle, 'SDL_CreateGPUTransferBuffer');
  SDL_CreateHapticEffect := GetProcAddress(aDLLHandle, 'SDL_CreateHapticEffect');
  SDL_CreateMutex := GetProcAddress(aDLLHandle, 'SDL_CreateMutex');
  SDL_CreatePalette := GetProcAddress(aDLLHandle, 'SDL_CreatePalette');
  SDL_CreatePopupWindow := GetProcAddress(aDLLHandle, 'SDL_CreatePopupWindow');
  SDL_CreateProcess := GetProcAddress(aDLLHandle, 'SDL_CreateProcess');
  SDL_CreateProcessWithProperties := GetProcAddress(aDLLHandle, 'SDL_CreateProcessWithProperties');
  SDL_CreateProperties := GetProcAddress(aDLLHandle, 'SDL_CreateProperties');
  SDL_CreateRenderer := GetProcAddress(aDLLHandle, 'SDL_CreateRenderer');
  SDL_CreateRendererWithProperties := GetProcAddress(aDLLHandle, 'SDL_CreateRendererWithProperties');
  SDL_CreateRWLock := GetProcAddress(aDLLHandle, 'SDL_CreateRWLock');
  SDL_CreateSemaphore := GetProcAddress(aDLLHandle, 'SDL_CreateSemaphore');
  SDL_CreateSoftwareRenderer := GetProcAddress(aDLLHandle, 'SDL_CreateSoftwareRenderer');
  SDL_CreateStorageDirectory := GetProcAddress(aDLLHandle, 'SDL_CreateStorageDirectory');
  SDL_CreateSurface := GetProcAddress(aDLLHandle, 'SDL_CreateSurface');
  SDL_CreateSurfaceFrom := GetProcAddress(aDLLHandle, 'SDL_CreateSurfaceFrom');
  SDL_CreateSurfacePalette := GetProcAddress(aDLLHandle, 'SDL_CreateSurfacePalette');
  SDL_CreateSystemCursor := GetProcAddress(aDLLHandle, 'SDL_CreateSystemCursor');
  SDL_CreateTexture := GetProcAddress(aDLLHandle, 'SDL_CreateTexture');
  SDL_CreateTextureFromSurface := GetProcAddress(aDLLHandle, 'SDL_CreateTextureFromSurface');
  SDL_CreateTextureWithProperties := GetProcAddress(aDLLHandle, 'SDL_CreateTextureWithProperties');
  SDL_CreateThreadRuntime := GetProcAddress(aDLLHandle, 'SDL_CreateThreadRuntime');
  SDL_CreateThreadWithPropertiesRuntime := GetProcAddress(aDLLHandle, 'SDL_CreateThreadWithPropertiesRuntime');
  SDL_CreateWindow := GetProcAddress(aDLLHandle, 'SDL_CreateWindow');
  SDL_CreateWindowAndRenderer := GetProcAddress(aDLLHandle, 'SDL_CreateWindowAndRenderer');
  SDL_CreateWindowWithProperties := GetProcAddress(aDLLHandle, 'SDL_CreateWindowWithProperties');
  SDL_CursorVisible := GetProcAddress(aDLLHandle, 'SDL_CursorVisible');
  SDL_DateTimeToTime := GetProcAddress(aDLLHandle, 'SDL_DateTimeToTime');
  SDL_Delay := GetProcAddress(aDLLHandle, 'SDL_Delay');
  SDL_DelayNS := GetProcAddress(aDLLHandle, 'SDL_DelayNS');
  SDL_DelayPrecise := GetProcAddress(aDLLHandle, 'SDL_DelayPrecise');
  SDL_DestroyAsyncIOQueue := GetProcAddress(aDLLHandle, 'SDL_DestroyAsyncIOQueue');
  SDL_DestroyAudioStream := GetProcAddress(aDLLHandle, 'SDL_DestroyAudioStream');
  SDL_DestroyCondition := GetProcAddress(aDLLHandle, 'SDL_DestroyCondition');
  SDL_DestroyCursor := GetProcAddress(aDLLHandle, 'SDL_DestroyCursor');
  SDL_DestroyEnvironment := GetProcAddress(aDLLHandle, 'SDL_DestroyEnvironment');
  SDL_DestroyGPUDevice := GetProcAddress(aDLLHandle, 'SDL_DestroyGPUDevice');
  SDL_DestroyHapticEffect := GetProcAddress(aDLLHandle, 'SDL_DestroyHapticEffect');
  SDL_DestroyMutex := GetProcAddress(aDLLHandle, 'SDL_DestroyMutex');
  SDL_DestroyPalette := GetProcAddress(aDLLHandle, 'SDL_DestroyPalette');
  SDL_DestroyProcess := GetProcAddress(aDLLHandle, 'SDL_DestroyProcess');
  SDL_DestroyProperties := GetProcAddress(aDLLHandle, 'SDL_DestroyProperties');
  SDL_DestroyRenderer := GetProcAddress(aDLLHandle, 'SDL_DestroyRenderer');
  SDL_DestroyRWLock := GetProcAddress(aDLLHandle, 'SDL_DestroyRWLock');
  SDL_DestroySemaphore := GetProcAddress(aDLLHandle, 'SDL_DestroySemaphore');
  SDL_DestroySurface := GetProcAddress(aDLLHandle, 'SDL_DestroySurface');
  SDL_DestroyTexture := GetProcAddress(aDLLHandle, 'SDL_DestroyTexture');
  SDL_DestroyWindow := GetProcAddress(aDLLHandle, 'SDL_DestroyWindow');
  SDL_DestroyWindowSurface := GetProcAddress(aDLLHandle, 'SDL_DestroyWindowSurface');
  SDL_DetachThread := GetProcAddress(aDLLHandle, 'SDL_DetachThread');
  SDL_DetachVirtualJoystick := GetProcAddress(aDLLHandle, 'SDL_DetachVirtualJoystick');
  SDL_DisableScreenSaver := GetProcAddress(aDLLHandle, 'SDL_DisableScreenSaver');
  SDL_DispatchGPUCompute := GetProcAddress(aDLLHandle, 'SDL_DispatchGPUCompute');
  SDL_DispatchGPUComputeIndirect := GetProcAddress(aDLLHandle, 'SDL_DispatchGPUComputeIndirect');
  SDL_DownloadFromGPUBuffer := GetProcAddress(aDLLHandle, 'SDL_DownloadFromGPUBuffer');
  SDL_DownloadFromGPUTexture := GetProcAddress(aDLLHandle, 'SDL_DownloadFromGPUTexture');
  SDL_DrawGPUIndexedPrimitives := GetProcAddress(aDLLHandle, 'SDL_DrawGPUIndexedPrimitives');
  SDL_DrawGPUIndexedPrimitivesIndirect := GetProcAddress(aDLLHandle, 'SDL_DrawGPUIndexedPrimitivesIndirect');
  SDL_DrawGPUPrimitives := GetProcAddress(aDLLHandle, 'SDL_DrawGPUPrimitives');
  SDL_DrawGPUPrimitivesIndirect := GetProcAddress(aDLLHandle, 'SDL_DrawGPUPrimitivesIndirect');
  SDL_DuplicateSurface := GetProcAddress(aDLLHandle, 'SDL_DuplicateSurface');
  SDL_EGL_GetCurrentConfig := GetProcAddress(aDLLHandle, 'SDL_EGL_GetCurrentConfig');
  SDL_EGL_GetCurrentDisplay := GetProcAddress(aDLLHandle, 'SDL_EGL_GetCurrentDisplay');
  SDL_EGL_GetProcAddress := GetProcAddress(aDLLHandle, 'SDL_EGL_GetProcAddress');
  SDL_EGL_GetWindowSurface := GetProcAddress(aDLLHandle, 'SDL_EGL_GetWindowSurface');
  SDL_EGL_SetAttributeCallbacks := GetProcAddress(aDLLHandle, 'SDL_EGL_SetAttributeCallbacks');
  SDL_EnableScreenSaver := GetProcAddress(aDLLHandle, 'SDL_EnableScreenSaver');
  SDL_EndGPUComputePass := GetProcAddress(aDLLHandle, 'SDL_EndGPUComputePass');
  SDL_EndGPUCopyPass := GetProcAddress(aDLLHandle, 'SDL_EndGPUCopyPass');
  SDL_EndGPURenderPass := GetProcAddress(aDLLHandle, 'SDL_EndGPURenderPass');
  SDL_EnumerateDirectory := GetProcAddress(aDLLHandle, 'SDL_EnumerateDirectory');
  SDL_EnumerateProperties := GetProcAddress(aDLLHandle, 'SDL_EnumerateProperties');
  SDL_EnumerateStorageDirectory := GetProcAddress(aDLLHandle, 'SDL_EnumerateStorageDirectory');
  SDL_EventEnabled := GetProcAddress(aDLLHandle, 'SDL_EventEnabled');
  SDL_exp := GetProcAddress(aDLLHandle, 'SDL_exp');
  SDL_expf := GetProcAddress(aDLLHandle, 'SDL_expf');
  SDL_fabs := GetProcAddress(aDLLHandle, 'SDL_fabs');
  SDL_fabsf := GetProcAddress(aDLLHandle, 'SDL_fabsf');
  SDL_FillSurfaceRect := GetProcAddress(aDLLHandle, 'SDL_FillSurfaceRect');
  SDL_FillSurfaceRects := GetProcAddress(aDLLHandle, 'SDL_FillSurfaceRects');
  SDL_FilterEvents := GetProcAddress(aDLLHandle, 'SDL_FilterEvents');
  SDL_FlashWindow := GetProcAddress(aDLLHandle, 'SDL_FlashWindow');
  SDL_FlipSurface := GetProcAddress(aDLLHandle, 'SDL_FlipSurface');
  SDL_floor := GetProcAddress(aDLLHandle, 'SDL_floor');
  SDL_floorf := GetProcAddress(aDLLHandle, 'SDL_floorf');
  SDL_FlushAudioStream := GetProcAddress(aDLLHandle, 'SDL_FlushAudioStream');
  SDL_FlushEvent := GetProcAddress(aDLLHandle, 'SDL_FlushEvent');
  SDL_FlushEvents := GetProcAddress(aDLLHandle, 'SDL_FlushEvents');
  SDL_FlushIO := GetProcAddress(aDLLHandle, 'SDL_FlushIO');
  SDL_FlushRenderer := GetProcAddress(aDLLHandle, 'SDL_FlushRenderer');
  SDL_fmod := GetProcAddress(aDLLHandle, 'SDL_fmod');
  SDL_fmodf := GetProcAddress(aDLLHandle, 'SDL_fmodf');
  SDL_free := GetProcAddress(aDLLHandle, 'SDL_free');
  SDL_GamepadConnected := GetProcAddress(aDLLHandle, 'SDL_GamepadConnected');
  SDL_GamepadEventsEnabled := GetProcAddress(aDLLHandle, 'SDL_GamepadEventsEnabled');
  SDL_GamepadHasAxis := GetProcAddress(aDLLHandle, 'SDL_GamepadHasAxis');
  SDL_GamepadHasButton := GetProcAddress(aDLLHandle, 'SDL_GamepadHasButton');
  SDL_GamepadHasSensor := GetProcAddress(aDLLHandle, 'SDL_GamepadHasSensor');
  SDL_GamepadSensorEnabled := GetProcAddress(aDLLHandle, 'SDL_GamepadSensorEnabled');
  SDL_GenerateMipmapsForGPUTexture := GetProcAddress(aDLLHandle, 'SDL_GenerateMipmapsForGPUTexture');
  SDL_GetAppMetadataProperty := GetProcAddress(aDLLHandle, 'SDL_GetAppMetadataProperty');
  SDL_GetAssertionHandler := GetProcAddress(aDLLHandle, 'SDL_GetAssertionHandler');
  SDL_GetAssertionReport := GetProcAddress(aDLLHandle, 'SDL_GetAssertionReport');
  SDL_GetAsyncIOResult := GetProcAddress(aDLLHandle, 'SDL_GetAsyncIOResult');
  SDL_GetAsyncIOSize := GetProcAddress(aDLLHandle, 'SDL_GetAsyncIOSize');
  SDL_GetAtomicInt := GetProcAddress(aDLLHandle, 'SDL_GetAtomicInt');
  SDL_GetAtomicPointer := GetProcAddress(aDLLHandle, 'SDL_GetAtomicPointer');
  SDL_GetAtomicU32 := GetProcAddress(aDLLHandle, 'SDL_GetAtomicU32');
  SDL_GetAudioDeviceChannelMap := GetProcAddress(aDLLHandle, 'SDL_GetAudioDeviceChannelMap');
  SDL_GetAudioDeviceFormat := GetProcAddress(aDLLHandle, 'SDL_GetAudioDeviceFormat');
  SDL_GetAudioDeviceGain := GetProcAddress(aDLLHandle, 'SDL_GetAudioDeviceGain');
  SDL_GetAudioDeviceName := GetProcAddress(aDLLHandle, 'SDL_GetAudioDeviceName');
  SDL_GetAudioDriver := GetProcAddress(aDLLHandle, 'SDL_GetAudioDriver');
  SDL_GetAudioFormatName := GetProcAddress(aDLLHandle, 'SDL_GetAudioFormatName');
  SDL_GetAudioPlaybackDevices := GetProcAddress(aDLLHandle, 'SDL_GetAudioPlaybackDevices');
  SDL_GetAudioRecordingDevices := GetProcAddress(aDLLHandle, 'SDL_GetAudioRecordingDevices');
  SDL_GetAudioStreamAvailable := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamAvailable');
  SDL_GetAudioStreamData := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamData');
  SDL_GetAudioStreamDevice := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamDevice');
  SDL_GetAudioStreamFormat := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamFormat');
  SDL_GetAudioStreamFrequencyRatio := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamFrequencyRatio');
  SDL_GetAudioStreamGain := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamGain');
  SDL_GetAudioStreamInputChannelMap := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamInputChannelMap');
  SDL_GetAudioStreamOutputChannelMap := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamOutputChannelMap');
  SDL_GetAudioStreamProperties := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamProperties');
  SDL_GetAudioStreamQueued := GetProcAddress(aDLLHandle, 'SDL_GetAudioStreamQueued');
  SDL_GetBasePath := GetProcAddress(aDLLHandle, 'SDL_GetBasePath');
  SDL_GetBooleanProperty := GetProcAddress(aDLLHandle, 'SDL_GetBooleanProperty');
  SDL_GetCameraDriver := GetProcAddress(aDLLHandle, 'SDL_GetCameraDriver');
  SDL_GetCameraFormat := GetProcAddress(aDLLHandle, 'SDL_GetCameraFormat');
  SDL_GetCameraID := GetProcAddress(aDLLHandle, 'SDL_GetCameraID');
  SDL_GetCameraName := GetProcAddress(aDLLHandle, 'SDL_GetCameraName');
  SDL_GetCameraPermissionState := GetProcAddress(aDLLHandle, 'SDL_GetCameraPermissionState');
  SDL_GetCameraPosition := GetProcAddress(aDLLHandle, 'SDL_GetCameraPosition');
  SDL_GetCameraProperties := GetProcAddress(aDLLHandle, 'SDL_GetCameraProperties');
  SDL_GetCameras := GetProcAddress(aDLLHandle, 'SDL_GetCameras');
  SDL_GetCameraSupportedFormats := GetProcAddress(aDLLHandle, 'SDL_GetCameraSupportedFormats');
  SDL_GetClipboardData := GetProcAddress(aDLLHandle, 'SDL_GetClipboardData');
  SDL_GetClipboardMimeTypes := GetProcAddress(aDLLHandle, 'SDL_GetClipboardMimeTypes');
  SDL_GetClipboardText := GetProcAddress(aDLLHandle, 'SDL_GetClipboardText');
  SDL_GetClosestFullscreenDisplayMode := GetProcAddress(aDLLHandle, 'SDL_GetClosestFullscreenDisplayMode');
  SDL_GetCPUCacheLineSize := GetProcAddress(aDLLHandle, 'SDL_GetCPUCacheLineSize');
  SDL_GetCurrentAudioDriver := GetProcAddress(aDLLHandle, 'SDL_GetCurrentAudioDriver');
  SDL_GetCurrentCameraDriver := GetProcAddress(aDLLHandle, 'SDL_GetCurrentCameraDriver');
  SDL_GetCurrentDirectory := GetProcAddress(aDLLHandle, 'SDL_GetCurrentDirectory');
  SDL_GetCurrentDisplayMode := GetProcAddress(aDLLHandle, 'SDL_GetCurrentDisplayMode');
  SDL_GetCurrentDisplayOrientation := GetProcAddress(aDLLHandle, 'SDL_GetCurrentDisplayOrientation');
  SDL_GetCurrentRenderOutputSize := GetProcAddress(aDLLHandle, 'SDL_GetCurrentRenderOutputSize');
  SDL_GetCurrentThreadID := GetProcAddress(aDLLHandle, 'SDL_GetCurrentThreadID');
  SDL_GetCurrentTime := GetProcAddress(aDLLHandle, 'SDL_GetCurrentTime');
  SDL_GetCurrentVideoDriver := GetProcAddress(aDLLHandle, 'SDL_GetCurrentVideoDriver');
  SDL_GetCursor := GetProcAddress(aDLLHandle, 'SDL_GetCursor');
  SDL_GetDateTimeLocalePreferences := GetProcAddress(aDLLHandle, 'SDL_GetDateTimeLocalePreferences');
  SDL_GetDayOfWeek := GetProcAddress(aDLLHandle, 'SDL_GetDayOfWeek');
  SDL_GetDayOfYear := GetProcAddress(aDLLHandle, 'SDL_GetDayOfYear');
  SDL_GetDaysInMonth := GetProcAddress(aDLLHandle, 'SDL_GetDaysInMonth');
  SDL_GetDefaultAssertionHandler := GetProcAddress(aDLLHandle, 'SDL_GetDefaultAssertionHandler');
  SDL_GetDefaultCursor := GetProcAddress(aDLLHandle, 'SDL_GetDefaultCursor');
  SDL_GetDefaultLogOutputFunction := GetProcAddress(aDLLHandle, 'SDL_GetDefaultLogOutputFunction');
  SDL_GetDesktopDisplayMode := GetProcAddress(aDLLHandle, 'SDL_GetDesktopDisplayMode');
  SDL_GetDirect3D9AdapterIndex := GetProcAddress(aDLLHandle, 'SDL_GetDirect3D9AdapterIndex');
  SDL_GetDisplayBounds := GetProcAddress(aDLLHandle, 'SDL_GetDisplayBounds');
  SDL_GetDisplayContentScale := GetProcAddress(aDLLHandle, 'SDL_GetDisplayContentScale');
  SDL_GetDisplayForPoint := GetProcAddress(aDLLHandle, 'SDL_GetDisplayForPoint');
  SDL_GetDisplayForRect := GetProcAddress(aDLLHandle, 'SDL_GetDisplayForRect');
  SDL_GetDisplayForWindow := GetProcAddress(aDLLHandle, 'SDL_GetDisplayForWindow');
  SDL_GetDisplayName := GetProcAddress(aDLLHandle, 'SDL_GetDisplayName');
  SDL_GetDisplayProperties := GetProcAddress(aDLLHandle, 'SDL_GetDisplayProperties');
  SDL_GetDisplays := GetProcAddress(aDLLHandle, 'SDL_GetDisplays');
  SDL_GetDisplayUsableBounds := GetProcAddress(aDLLHandle, 'SDL_GetDisplayUsableBounds');
  SDL_GetDXGIOutputInfo := GetProcAddress(aDLLHandle, 'SDL_GetDXGIOutputInfo');
  SDL_getenv := GetProcAddress(aDLLHandle, 'SDL_getenv');
  SDL_getenv_unsafe := GetProcAddress(aDLLHandle, 'SDL_getenv_unsafe');
  SDL_GetEnvironment := GetProcAddress(aDLLHandle, 'SDL_GetEnvironment');
  SDL_GetEnvironmentVariable := GetProcAddress(aDLLHandle, 'SDL_GetEnvironmentVariable');
  SDL_GetEnvironmentVariables := GetProcAddress(aDLLHandle, 'SDL_GetEnvironmentVariables');
  SDL_GetError := GetProcAddress(aDLLHandle, 'SDL_GetError');
  SDL_GetEventFilter := GetProcAddress(aDLLHandle, 'SDL_GetEventFilter');
  SDL_GetFloatProperty := GetProcAddress(aDLLHandle, 'SDL_GetFloatProperty');
  SDL_GetFullscreenDisplayModes := GetProcAddress(aDLLHandle, 'SDL_GetFullscreenDisplayModes');
  SDL_GetGamepadAppleSFSymbolsNameForAxis := GetProcAddress(aDLLHandle, 'SDL_GetGamepadAppleSFSymbolsNameForAxis');
  SDL_GetGamepadAppleSFSymbolsNameForButton := GetProcAddress(aDLLHandle, 'SDL_GetGamepadAppleSFSymbolsNameForButton');
  SDL_GetGamepadAxis := GetProcAddress(aDLLHandle, 'SDL_GetGamepadAxis');
  SDL_GetGamepadAxisFromString := GetProcAddress(aDLLHandle, 'SDL_GetGamepadAxisFromString');
  SDL_GetGamepadBindings := GetProcAddress(aDLLHandle, 'SDL_GetGamepadBindings');
  SDL_GetGamepadButton := GetProcAddress(aDLLHandle, 'SDL_GetGamepadButton');
  SDL_GetGamepadButtonFromString := GetProcAddress(aDLLHandle, 'SDL_GetGamepadButtonFromString');
  SDL_GetGamepadButtonLabel := GetProcAddress(aDLLHandle, 'SDL_GetGamepadButtonLabel');
  SDL_GetGamepadButtonLabelForType := GetProcAddress(aDLLHandle, 'SDL_GetGamepadButtonLabelForType');
  SDL_GetGamepadConnectionState := GetProcAddress(aDLLHandle, 'SDL_GetGamepadConnectionState');
  SDL_GetGamepadFirmwareVersion := GetProcAddress(aDLLHandle, 'SDL_GetGamepadFirmwareVersion');
  SDL_GetGamepadFromID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadFromID');
  SDL_GetGamepadFromPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_GetGamepadFromPlayerIndex');
  SDL_GetGamepadGUIDForID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadGUIDForID');
  SDL_GetGamepadID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadID');
  SDL_GetGamepadJoystick := GetProcAddress(aDLLHandle, 'SDL_GetGamepadJoystick');
  SDL_GetGamepadMapping := GetProcAddress(aDLLHandle, 'SDL_GetGamepadMapping');
  SDL_GetGamepadMappingForGUID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadMappingForGUID');
  SDL_GetGamepadMappingForID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadMappingForID');
  SDL_GetGamepadMappings := GetProcAddress(aDLLHandle, 'SDL_GetGamepadMappings');
  SDL_GetGamepadName := GetProcAddress(aDLLHandle, 'SDL_GetGamepadName');
  SDL_GetGamepadNameForID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadNameForID');
  SDL_GetGamepadPath := GetProcAddress(aDLLHandle, 'SDL_GetGamepadPath');
  SDL_GetGamepadPathForID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadPathForID');
  SDL_GetGamepadPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_GetGamepadPlayerIndex');
  SDL_GetGamepadPlayerIndexForID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadPlayerIndexForID');
  SDL_GetGamepadPowerInfo := GetProcAddress(aDLLHandle, 'SDL_GetGamepadPowerInfo');
  SDL_GetGamepadProduct := GetProcAddress(aDLLHandle, 'SDL_GetGamepadProduct');
  SDL_GetGamepadProductForID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadProductForID');
  SDL_GetGamepadProductVersion := GetProcAddress(aDLLHandle, 'SDL_GetGamepadProductVersion');
  SDL_GetGamepadProductVersionForID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadProductVersionForID');
  SDL_GetGamepadProperties := GetProcAddress(aDLLHandle, 'SDL_GetGamepadProperties');
  SDL_GetGamepads := GetProcAddress(aDLLHandle, 'SDL_GetGamepads');
  SDL_GetGamepadSensorData := GetProcAddress(aDLLHandle, 'SDL_GetGamepadSensorData');
  SDL_GetGamepadSensorDataRate := GetProcAddress(aDLLHandle, 'SDL_GetGamepadSensorDataRate');
  SDL_GetGamepadSerial := GetProcAddress(aDLLHandle, 'SDL_GetGamepadSerial');
  SDL_GetGamepadSteamHandle := GetProcAddress(aDLLHandle, 'SDL_GetGamepadSteamHandle');
  SDL_GetGamepadStringForAxis := GetProcAddress(aDLLHandle, 'SDL_GetGamepadStringForAxis');
  SDL_GetGamepadStringForButton := GetProcAddress(aDLLHandle, 'SDL_GetGamepadStringForButton');
  SDL_GetGamepadStringForType := GetProcAddress(aDLLHandle, 'SDL_GetGamepadStringForType');
  SDL_GetGamepadTouchpadFinger := GetProcAddress(aDLLHandle, 'SDL_GetGamepadTouchpadFinger');
  SDL_GetGamepadType := GetProcAddress(aDLLHandle, 'SDL_GetGamepadType');
  SDL_GetGamepadTypeForID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadTypeForID');
  SDL_GetGamepadTypeFromString := GetProcAddress(aDLLHandle, 'SDL_GetGamepadTypeFromString');
  SDL_GetGamepadVendor := GetProcAddress(aDLLHandle, 'SDL_GetGamepadVendor');
  SDL_GetGamepadVendorForID := GetProcAddress(aDLLHandle, 'SDL_GetGamepadVendorForID');
  SDL_GetGlobalMouseState := GetProcAddress(aDLLHandle, 'SDL_GetGlobalMouseState');
  SDL_GetGlobalProperties := GetProcAddress(aDLLHandle, 'SDL_GetGlobalProperties');
  SDL_GetGPUDeviceDriver := GetProcAddress(aDLLHandle, 'SDL_GetGPUDeviceDriver');
  SDL_GetGPUDriver := GetProcAddress(aDLLHandle, 'SDL_GetGPUDriver');
  SDL_GetGPUShaderFormats := GetProcAddress(aDLLHandle, 'SDL_GetGPUShaderFormats');
  SDL_GetGPUSwapchainTextureFormat := GetProcAddress(aDLLHandle, 'SDL_GetGPUSwapchainTextureFormat');
  SDL_GetGrabbedWindow := GetProcAddress(aDLLHandle, 'SDL_GetGrabbedWindow');
  SDL_GetHapticEffectStatus := GetProcAddress(aDLLHandle, 'SDL_GetHapticEffectStatus');
  SDL_GetHapticFeatures := GetProcAddress(aDLLHandle, 'SDL_GetHapticFeatures');
  SDL_GetHapticFromID := GetProcAddress(aDLLHandle, 'SDL_GetHapticFromID');
  SDL_GetHapticID := GetProcAddress(aDLLHandle, 'SDL_GetHapticID');
  SDL_GetHapticName := GetProcAddress(aDLLHandle, 'SDL_GetHapticName');
  SDL_GetHapticNameForID := GetProcAddress(aDLLHandle, 'SDL_GetHapticNameForID');
  SDL_GetHaptics := GetProcAddress(aDLLHandle, 'SDL_GetHaptics');
  SDL_GetHint := GetProcAddress(aDLLHandle, 'SDL_GetHint');
  SDL_GetHintBoolean := GetProcAddress(aDLLHandle, 'SDL_GetHintBoolean');
  SDL_GetIOProperties := GetProcAddress(aDLLHandle, 'SDL_GetIOProperties');
  SDL_GetIOSize := GetProcAddress(aDLLHandle, 'SDL_GetIOSize');
  SDL_GetIOStatus := GetProcAddress(aDLLHandle, 'SDL_GetIOStatus');
  SDL_GetJoystickAxis := GetProcAddress(aDLLHandle, 'SDL_GetJoystickAxis');
  SDL_GetJoystickAxisInitialState := GetProcAddress(aDLLHandle, 'SDL_GetJoystickAxisInitialState');
  SDL_GetJoystickBall := GetProcAddress(aDLLHandle, 'SDL_GetJoystickBall');
  SDL_GetJoystickButton := GetProcAddress(aDLLHandle, 'SDL_GetJoystickButton');
  SDL_GetJoystickConnectionState := GetProcAddress(aDLLHandle, 'SDL_GetJoystickConnectionState');
  SDL_GetJoystickFirmwareVersion := GetProcAddress(aDLLHandle, 'SDL_GetJoystickFirmwareVersion');
  SDL_GetJoystickFromID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickFromID');
  SDL_GetJoystickFromPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_GetJoystickFromPlayerIndex');
  SDL_GetJoystickGUID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickGUID');
  SDL_GetJoystickGUIDForID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickGUIDForID');
  SDL_GetJoystickGUIDInfo := GetProcAddress(aDLLHandle, 'SDL_GetJoystickGUIDInfo');
  SDL_GetJoystickHat := GetProcAddress(aDLLHandle, 'SDL_GetJoystickHat');
  SDL_GetJoystickID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickID');
  SDL_GetJoystickName := GetProcAddress(aDLLHandle, 'SDL_GetJoystickName');
  SDL_GetJoystickNameForID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickNameForID');
  SDL_GetJoystickPath := GetProcAddress(aDLLHandle, 'SDL_GetJoystickPath');
  SDL_GetJoystickPathForID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickPathForID');
  SDL_GetJoystickPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_GetJoystickPlayerIndex');
  SDL_GetJoystickPlayerIndexForID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickPlayerIndexForID');
  SDL_GetJoystickPowerInfo := GetProcAddress(aDLLHandle, 'SDL_GetJoystickPowerInfo');
  SDL_GetJoystickProduct := GetProcAddress(aDLLHandle, 'SDL_GetJoystickProduct');
  SDL_GetJoystickProductForID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickProductForID');
  SDL_GetJoystickProductVersion := GetProcAddress(aDLLHandle, 'SDL_GetJoystickProductVersion');
  SDL_GetJoystickProductVersionForID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickProductVersionForID');
  SDL_GetJoystickProperties := GetProcAddress(aDLLHandle, 'SDL_GetJoystickProperties');
  SDL_GetJoysticks := GetProcAddress(aDLLHandle, 'SDL_GetJoysticks');
  SDL_GetJoystickSerial := GetProcAddress(aDLLHandle, 'SDL_GetJoystickSerial');
  SDL_GetJoystickType := GetProcAddress(aDLLHandle, 'SDL_GetJoystickType');
  SDL_GetJoystickTypeForID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickTypeForID');
  SDL_GetJoystickVendor := GetProcAddress(aDLLHandle, 'SDL_GetJoystickVendor');
  SDL_GetJoystickVendorForID := GetProcAddress(aDLLHandle, 'SDL_GetJoystickVendorForID');
  SDL_GetKeyboardFocus := GetProcAddress(aDLLHandle, 'SDL_GetKeyboardFocus');
  SDL_GetKeyboardNameForID := GetProcAddress(aDLLHandle, 'SDL_GetKeyboardNameForID');
  SDL_GetKeyboards := GetProcAddress(aDLLHandle, 'SDL_GetKeyboards');
  SDL_GetKeyboardState := GetProcAddress(aDLLHandle, 'SDL_GetKeyboardState');
  SDL_GetKeyFromName := GetProcAddress(aDLLHandle, 'SDL_GetKeyFromName');
  SDL_GetKeyFromScancode := GetProcAddress(aDLLHandle, 'SDL_GetKeyFromScancode');
  SDL_GetKeyName := GetProcAddress(aDLLHandle, 'SDL_GetKeyName');
  SDL_GetLogOutputFunction := GetProcAddress(aDLLHandle, 'SDL_GetLogOutputFunction');
  SDL_GetLogPriority := GetProcAddress(aDLLHandle, 'SDL_GetLogPriority');
  SDL_GetMasksForPixelFormat := GetProcAddress(aDLLHandle, 'SDL_GetMasksForPixelFormat');
  SDL_GetMaxHapticEffects := GetProcAddress(aDLLHandle, 'SDL_GetMaxHapticEffects');
  SDL_GetMaxHapticEffectsPlaying := GetProcAddress(aDLLHandle, 'SDL_GetMaxHapticEffectsPlaying');
  SDL_GetMemoryFunctions := GetProcAddress(aDLLHandle, 'SDL_GetMemoryFunctions');
  SDL_GetMice := GetProcAddress(aDLLHandle, 'SDL_GetMice');
  SDL_GetModState := GetProcAddress(aDLLHandle, 'SDL_GetModState');
  SDL_GetMouseFocus := GetProcAddress(aDLLHandle, 'SDL_GetMouseFocus');
  SDL_GetMouseNameForID := GetProcAddress(aDLLHandle, 'SDL_GetMouseNameForID');
  SDL_GetMouseState := GetProcAddress(aDLLHandle, 'SDL_GetMouseState');
  SDL_GetNaturalDisplayOrientation := GetProcAddress(aDLLHandle, 'SDL_GetNaturalDisplayOrientation');
  SDL_GetNumAllocations := GetProcAddress(aDLLHandle, 'SDL_GetNumAllocations');
  SDL_GetNumAudioDrivers := GetProcAddress(aDLLHandle, 'SDL_GetNumAudioDrivers');
  SDL_GetNumberProperty := GetProcAddress(aDLLHandle, 'SDL_GetNumberProperty');
  SDL_GetNumCameraDrivers := GetProcAddress(aDLLHandle, 'SDL_GetNumCameraDrivers');
  SDL_GetNumGamepadTouchpadFingers := GetProcAddress(aDLLHandle, 'SDL_GetNumGamepadTouchpadFingers');
  SDL_GetNumGamepadTouchpads := GetProcAddress(aDLLHandle, 'SDL_GetNumGamepadTouchpads');
  SDL_GetNumGPUDrivers := GetProcAddress(aDLLHandle, 'SDL_GetNumGPUDrivers');
  SDL_GetNumHapticAxes := GetProcAddress(aDLLHandle, 'SDL_GetNumHapticAxes');
  SDL_GetNumJoystickAxes := GetProcAddress(aDLLHandle, 'SDL_GetNumJoystickAxes');
  SDL_GetNumJoystickBalls := GetProcAddress(aDLLHandle, 'SDL_GetNumJoystickBalls');
  SDL_GetNumJoystickButtons := GetProcAddress(aDLLHandle, 'SDL_GetNumJoystickButtons');
  SDL_GetNumJoystickHats := GetProcAddress(aDLLHandle, 'SDL_GetNumJoystickHats');
  SDL_GetNumLogicalCPUCores := GetProcAddress(aDLLHandle, 'SDL_GetNumLogicalCPUCores');
  SDL_GetNumRenderDrivers := GetProcAddress(aDLLHandle, 'SDL_GetNumRenderDrivers');
  SDL_GetNumVideoDrivers := GetProcAddress(aDLLHandle, 'SDL_GetNumVideoDrivers');
  SDL_GetOriginalMemoryFunctions := GetProcAddress(aDLLHandle, 'SDL_GetOriginalMemoryFunctions');
  SDL_GetPathInfo := GetProcAddress(aDLLHandle, 'SDL_GetPathInfo');
  SDL_GetPerformanceCounter := GetProcAddress(aDLLHandle, 'SDL_GetPerformanceCounter');
  SDL_GetPerformanceFrequency := GetProcAddress(aDLLHandle, 'SDL_GetPerformanceFrequency');
  SDL_GetPixelFormatDetails := GetProcAddress(aDLLHandle, 'SDL_GetPixelFormatDetails');
  SDL_GetPixelFormatForMasks := GetProcAddress(aDLLHandle, 'SDL_GetPixelFormatForMasks');
  SDL_GetPixelFormatName := GetProcAddress(aDLLHandle, 'SDL_GetPixelFormatName');
  SDL_GetPlatform := GetProcAddress(aDLLHandle, 'SDL_GetPlatform');
  SDL_GetPointerProperty := GetProcAddress(aDLLHandle, 'SDL_GetPointerProperty');
  SDL_GetPowerInfo := GetProcAddress(aDLLHandle, 'SDL_GetPowerInfo');
  SDL_GetPreferredLocales := GetProcAddress(aDLLHandle, 'SDL_GetPreferredLocales');
  SDL_GetPrefPath := GetProcAddress(aDLLHandle, 'SDL_GetPrefPath');
  SDL_GetPrimaryDisplay := GetProcAddress(aDLLHandle, 'SDL_GetPrimaryDisplay');
  SDL_GetPrimarySelectionText := GetProcAddress(aDLLHandle, 'SDL_GetPrimarySelectionText');
  SDL_GetProcessInput := GetProcAddress(aDLLHandle, 'SDL_GetProcessInput');
  SDL_GetProcessOutput := GetProcAddress(aDLLHandle, 'SDL_GetProcessOutput');
  SDL_GetProcessProperties := GetProcAddress(aDLLHandle, 'SDL_GetProcessProperties');
  SDL_GetPropertyType := GetProcAddress(aDLLHandle, 'SDL_GetPropertyType');
  SDL_GetRealGamepadType := GetProcAddress(aDLLHandle, 'SDL_GetRealGamepadType');
  SDL_GetRealGamepadTypeForID := GetProcAddress(aDLLHandle, 'SDL_GetRealGamepadTypeForID');
  SDL_GetRectAndLineIntersection := GetProcAddress(aDLLHandle, 'SDL_GetRectAndLineIntersection');
  SDL_GetRectAndLineIntersectionFloat := GetProcAddress(aDLLHandle, 'SDL_GetRectAndLineIntersectionFloat');
  SDL_GetRectEnclosingPoints := GetProcAddress(aDLLHandle, 'SDL_GetRectEnclosingPoints');
  SDL_GetRectEnclosingPointsFloat := GetProcAddress(aDLLHandle, 'SDL_GetRectEnclosingPointsFloat');
  SDL_GetRectIntersection := GetProcAddress(aDLLHandle, 'SDL_GetRectIntersection');
  SDL_GetRectIntersectionFloat := GetProcAddress(aDLLHandle, 'SDL_GetRectIntersectionFloat');
  SDL_GetRectUnion := GetProcAddress(aDLLHandle, 'SDL_GetRectUnion');
  SDL_GetRectUnionFloat := GetProcAddress(aDLLHandle, 'SDL_GetRectUnionFloat');
  SDL_GetRelativeMouseState := GetProcAddress(aDLLHandle, 'SDL_GetRelativeMouseState');
  SDL_GetRenderClipRect := GetProcAddress(aDLLHandle, 'SDL_GetRenderClipRect');
  SDL_GetRenderColorScale := GetProcAddress(aDLLHandle, 'SDL_GetRenderColorScale');
  SDL_GetRenderDrawBlendMode := GetProcAddress(aDLLHandle, 'SDL_GetRenderDrawBlendMode');
  SDL_GetRenderDrawColor := GetProcAddress(aDLLHandle, 'SDL_GetRenderDrawColor');
  SDL_GetRenderDrawColorFloat := GetProcAddress(aDLLHandle, 'SDL_GetRenderDrawColorFloat');
  SDL_GetRenderDriver := GetProcAddress(aDLLHandle, 'SDL_GetRenderDriver');
  SDL_GetRenderer := GetProcAddress(aDLLHandle, 'SDL_GetRenderer');
  SDL_GetRendererFromTexture := GetProcAddress(aDLLHandle, 'SDL_GetRendererFromTexture');
  SDL_GetRendererName := GetProcAddress(aDLLHandle, 'SDL_GetRendererName');
  SDL_GetRendererProperties := GetProcAddress(aDLLHandle, 'SDL_GetRendererProperties');
  SDL_GetRenderLogicalPresentation := GetProcAddress(aDLLHandle, 'SDL_GetRenderLogicalPresentation');
  SDL_GetRenderLogicalPresentationRect := GetProcAddress(aDLLHandle, 'SDL_GetRenderLogicalPresentationRect');
  SDL_GetRenderMetalCommandEncoder := GetProcAddress(aDLLHandle, 'SDL_GetRenderMetalCommandEncoder');
  SDL_GetRenderMetalLayer := GetProcAddress(aDLLHandle, 'SDL_GetRenderMetalLayer');
  SDL_GetRenderOutputSize := GetProcAddress(aDLLHandle, 'SDL_GetRenderOutputSize');
  SDL_GetRenderSafeArea := GetProcAddress(aDLLHandle, 'SDL_GetRenderSafeArea');
  SDL_GetRenderScale := GetProcAddress(aDLLHandle, 'SDL_GetRenderScale');
  SDL_GetRenderTarget := GetProcAddress(aDLLHandle, 'SDL_GetRenderTarget');
  SDL_GetRenderViewport := GetProcAddress(aDLLHandle, 'SDL_GetRenderViewport');
  SDL_GetRenderVSync := GetProcAddress(aDLLHandle, 'SDL_GetRenderVSync');
  SDL_GetRenderWindow := GetProcAddress(aDLLHandle, 'SDL_GetRenderWindow');
  SDL_GetRevision := GetProcAddress(aDLLHandle, 'SDL_GetRevision');
  SDL_GetRGB := GetProcAddress(aDLLHandle, 'SDL_GetRGB');
  SDL_GetRGBA := GetProcAddress(aDLLHandle, 'SDL_GetRGBA');
  SDL_GetSandbox := GetProcAddress(aDLLHandle, 'SDL_GetSandbox');
  SDL_GetScancodeFromKey := GetProcAddress(aDLLHandle, 'SDL_GetScancodeFromKey');
  SDL_GetScancodeFromName := GetProcAddress(aDLLHandle, 'SDL_GetScancodeFromName');
  SDL_GetScancodeName := GetProcAddress(aDLLHandle, 'SDL_GetScancodeName');
  SDL_GetSemaphoreValue := GetProcAddress(aDLLHandle, 'SDL_GetSemaphoreValue');
  SDL_GetSensorData := GetProcAddress(aDLLHandle, 'SDL_GetSensorData');
  SDL_GetSensorFromID := GetProcAddress(aDLLHandle, 'SDL_GetSensorFromID');
  SDL_GetSensorID := GetProcAddress(aDLLHandle, 'SDL_GetSensorID');
  SDL_GetSensorName := GetProcAddress(aDLLHandle, 'SDL_GetSensorName');
  SDL_GetSensorNameForID := GetProcAddress(aDLLHandle, 'SDL_GetSensorNameForID');
  SDL_GetSensorNonPortableType := GetProcAddress(aDLLHandle, 'SDL_GetSensorNonPortableType');
  SDL_GetSensorNonPortableTypeForID := GetProcAddress(aDLLHandle, 'SDL_GetSensorNonPortableTypeForID');
  SDL_GetSensorProperties := GetProcAddress(aDLLHandle, 'SDL_GetSensorProperties');
  SDL_GetSensors := GetProcAddress(aDLLHandle, 'SDL_GetSensors');
  SDL_GetSensorType := GetProcAddress(aDLLHandle, 'SDL_GetSensorType');
  SDL_GetSensorTypeForID := GetProcAddress(aDLLHandle, 'SDL_GetSensorTypeForID');
  SDL_GetSilenceValueForFormat := GetProcAddress(aDLLHandle, 'SDL_GetSilenceValueForFormat');
  SDL_GetSIMDAlignment := GetProcAddress(aDLLHandle, 'SDL_GetSIMDAlignment');
  SDL_GetStorageFileSize := GetProcAddress(aDLLHandle, 'SDL_GetStorageFileSize');
  SDL_GetStoragePathInfo := GetProcAddress(aDLLHandle, 'SDL_GetStoragePathInfo');
  SDL_GetStorageSpaceRemaining := GetProcAddress(aDLLHandle, 'SDL_GetStorageSpaceRemaining');
  SDL_GetStringProperty := GetProcAddress(aDLLHandle, 'SDL_GetStringProperty');
  SDL_GetSurfaceAlphaMod := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceAlphaMod');
  SDL_GetSurfaceBlendMode := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceBlendMode');
  SDL_GetSurfaceClipRect := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceClipRect');
  SDL_GetSurfaceColorKey := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceColorKey');
  SDL_GetSurfaceColorMod := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceColorMod');
  SDL_GetSurfaceColorspace := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceColorspace');
  SDL_GetSurfaceImages := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceImages');
  SDL_GetSurfacePalette := GetProcAddress(aDLLHandle, 'SDL_GetSurfacePalette');
  SDL_GetSurfaceProperties := GetProcAddress(aDLLHandle, 'SDL_GetSurfaceProperties');
  SDL_GetSystemRAM := GetProcAddress(aDLLHandle, 'SDL_GetSystemRAM');
  SDL_GetSystemTheme := GetProcAddress(aDLLHandle, 'SDL_GetSystemTheme');
  SDL_GetTextInputArea := GetProcAddress(aDLLHandle, 'SDL_GetTextInputArea');
  SDL_GetTextureAlphaMod := GetProcAddress(aDLLHandle, 'SDL_GetTextureAlphaMod');
  SDL_GetTextureAlphaModFloat := GetProcAddress(aDLLHandle, 'SDL_GetTextureAlphaModFloat');
  SDL_GetTextureBlendMode := GetProcAddress(aDLLHandle, 'SDL_GetTextureBlendMode');
  SDL_GetTextureColorMod := GetProcAddress(aDLLHandle, 'SDL_GetTextureColorMod');
  SDL_GetTextureColorModFloat := GetProcAddress(aDLLHandle, 'SDL_GetTextureColorModFloat');
  SDL_GetTextureProperties := GetProcAddress(aDLLHandle, 'SDL_GetTextureProperties');
  SDL_GetTextureScaleMode := GetProcAddress(aDLLHandle, 'SDL_GetTextureScaleMode');
  SDL_GetTextureSize := GetProcAddress(aDLLHandle, 'SDL_GetTextureSize');
  SDL_GetThreadID := GetProcAddress(aDLLHandle, 'SDL_GetThreadID');
  SDL_GetThreadName := GetProcAddress(aDLLHandle, 'SDL_GetThreadName');
  SDL_GetTicks := GetProcAddress(aDLLHandle, 'SDL_GetTicks');
  SDL_GetTicksNS := GetProcAddress(aDLLHandle, 'SDL_GetTicksNS');
  SDL_GetTLS := GetProcAddress(aDLLHandle, 'SDL_GetTLS');
  SDL_GetTouchDeviceName := GetProcAddress(aDLLHandle, 'SDL_GetTouchDeviceName');
  SDL_GetTouchDevices := GetProcAddress(aDLLHandle, 'SDL_GetTouchDevices');
  SDL_GetTouchDeviceType := GetProcAddress(aDLLHandle, 'SDL_GetTouchDeviceType');
  SDL_GetTouchFingers := GetProcAddress(aDLLHandle, 'SDL_GetTouchFingers');
  SDL_GetUserFolder := GetProcAddress(aDLLHandle, 'SDL_GetUserFolder');
  SDL_GetVersion := GetProcAddress(aDLLHandle, 'SDL_GetVersion');
  SDL_GetVideoDriver := GetProcAddress(aDLLHandle, 'SDL_GetVideoDriver');
  SDL_GetWindowAspectRatio := GetProcAddress(aDLLHandle, 'SDL_GetWindowAspectRatio');
  SDL_GetWindowBordersSize := GetProcAddress(aDLLHandle, 'SDL_GetWindowBordersSize');
  SDL_GetWindowDisplayScale := GetProcAddress(aDLLHandle, 'SDL_GetWindowDisplayScale');
  SDL_GetWindowFlags := GetProcAddress(aDLLHandle, 'SDL_GetWindowFlags');
  SDL_GetWindowFromEvent := GetProcAddress(aDLLHandle, 'SDL_GetWindowFromEvent');
  SDL_GetWindowFromID := GetProcAddress(aDLLHandle, 'SDL_GetWindowFromID');
  SDL_GetWindowFullscreenMode := GetProcAddress(aDLLHandle, 'SDL_GetWindowFullscreenMode');
  SDL_GetWindowICCProfile := GetProcAddress(aDLLHandle, 'SDL_GetWindowICCProfile');
  SDL_GetWindowID := GetProcAddress(aDLLHandle, 'SDL_GetWindowID');
  SDL_GetWindowKeyboardGrab := GetProcAddress(aDLLHandle, 'SDL_GetWindowKeyboardGrab');
  SDL_GetWindowMaximumSize := GetProcAddress(aDLLHandle, 'SDL_GetWindowMaximumSize');
  SDL_GetWindowMinimumSize := GetProcAddress(aDLLHandle, 'SDL_GetWindowMinimumSize');
  SDL_GetWindowMouseGrab := GetProcAddress(aDLLHandle, 'SDL_GetWindowMouseGrab');
  SDL_GetWindowMouseRect := GetProcAddress(aDLLHandle, 'SDL_GetWindowMouseRect');
  SDL_GetWindowOpacity := GetProcAddress(aDLLHandle, 'SDL_GetWindowOpacity');
  SDL_GetWindowParent := GetProcAddress(aDLLHandle, 'SDL_GetWindowParent');
  SDL_GetWindowPixelDensity := GetProcAddress(aDLLHandle, 'SDL_GetWindowPixelDensity');
  SDL_GetWindowPixelFormat := GetProcAddress(aDLLHandle, 'SDL_GetWindowPixelFormat');
  SDL_GetWindowPosition := GetProcAddress(aDLLHandle, 'SDL_GetWindowPosition');
  SDL_GetWindowProperties := GetProcAddress(aDLLHandle, 'SDL_GetWindowProperties');
  SDL_GetWindowRelativeMouseMode := GetProcAddress(aDLLHandle, 'SDL_GetWindowRelativeMouseMode');
  SDL_GetWindows := GetProcAddress(aDLLHandle, 'SDL_GetWindows');
  SDL_GetWindowSafeArea := GetProcAddress(aDLLHandle, 'SDL_GetWindowSafeArea');
  SDL_GetWindowSize := GetProcAddress(aDLLHandle, 'SDL_GetWindowSize');
  SDL_GetWindowSizeInPixels := GetProcAddress(aDLLHandle, 'SDL_GetWindowSizeInPixels');
  SDL_GetWindowSurface := GetProcAddress(aDLLHandle, 'SDL_GetWindowSurface');
  SDL_GetWindowSurfaceVSync := GetProcAddress(aDLLHandle, 'SDL_GetWindowSurfaceVSync');
  SDL_GetWindowTitle := GetProcAddress(aDLLHandle, 'SDL_GetWindowTitle');
  SDL_GL_CreateContext := GetProcAddress(aDLLHandle, 'SDL_GL_CreateContext');
  SDL_GL_DestroyContext := GetProcAddress(aDLLHandle, 'SDL_GL_DestroyContext');
  SDL_GL_ExtensionSupported := GetProcAddress(aDLLHandle, 'SDL_GL_ExtensionSupported');
  SDL_GL_GetAttribute := GetProcAddress(aDLLHandle, 'SDL_GL_GetAttribute');
  SDL_GL_GetCurrentContext := GetProcAddress(aDLLHandle, 'SDL_GL_GetCurrentContext');
  SDL_GL_GetCurrentWindow := GetProcAddress(aDLLHandle, 'SDL_GL_GetCurrentWindow');
  SDL_GL_GetProcAddress := GetProcAddress(aDLLHandle, 'SDL_GL_GetProcAddress');
  SDL_GL_GetSwapInterval := GetProcAddress(aDLLHandle, 'SDL_GL_GetSwapInterval');
  SDL_GL_LoadLibrary := GetProcAddress(aDLLHandle, 'SDL_GL_LoadLibrary');
  SDL_GL_MakeCurrent := GetProcAddress(aDLLHandle, 'SDL_GL_MakeCurrent');
  SDL_GL_ResetAttributes := GetProcAddress(aDLLHandle, 'SDL_GL_ResetAttributes');
  SDL_GL_SetAttribute := GetProcAddress(aDLLHandle, 'SDL_GL_SetAttribute');
  SDL_GL_SetSwapInterval := GetProcAddress(aDLLHandle, 'SDL_GL_SetSwapInterval');
  SDL_GL_SwapWindow := GetProcAddress(aDLLHandle, 'SDL_GL_SwapWindow');
  SDL_GL_UnloadLibrary := GetProcAddress(aDLLHandle, 'SDL_GL_UnloadLibrary');
  SDL_GlobDirectory := GetProcAddress(aDLLHandle, 'SDL_GlobDirectory');
  SDL_GlobStorageDirectory := GetProcAddress(aDLLHandle, 'SDL_GlobStorageDirectory');
  SDL_GPUSupportsProperties := GetProcAddress(aDLLHandle, 'SDL_GPUSupportsProperties');
  SDL_GPUSupportsShaderFormats := GetProcAddress(aDLLHandle, 'SDL_GPUSupportsShaderFormats');
  SDL_GPUTextureFormatTexelBlockSize := GetProcAddress(aDLLHandle, 'SDL_GPUTextureFormatTexelBlockSize');
  SDL_GPUTextureSupportsFormat := GetProcAddress(aDLLHandle, 'SDL_GPUTextureSupportsFormat');
  SDL_GPUTextureSupportsSampleCount := GetProcAddress(aDLLHandle, 'SDL_GPUTextureSupportsSampleCount');
  SDL_GUIDToString := GetProcAddress(aDLLHandle, 'SDL_GUIDToString');
  SDL_HapticEffectSupported := GetProcAddress(aDLLHandle, 'SDL_HapticEffectSupported');
  SDL_HapticRumbleSupported := GetProcAddress(aDLLHandle, 'SDL_HapticRumbleSupported');
  SDL_HasAltiVec := GetProcAddress(aDLLHandle, 'SDL_HasAltiVec');
  SDL_HasARMSIMD := GetProcAddress(aDLLHandle, 'SDL_HasARMSIMD');
  SDL_HasAVX := GetProcAddress(aDLLHandle, 'SDL_HasAVX');
  SDL_HasAVX2 := GetProcAddress(aDLLHandle, 'SDL_HasAVX2');
  SDL_HasAVX512F := GetProcAddress(aDLLHandle, 'SDL_HasAVX512F');
  SDL_HasClipboardData := GetProcAddress(aDLLHandle, 'SDL_HasClipboardData');
  SDL_HasClipboardText := GetProcAddress(aDLLHandle, 'SDL_HasClipboardText');
  SDL_HasEvent := GetProcAddress(aDLLHandle, 'SDL_HasEvent');
  SDL_HasEvents := GetProcAddress(aDLLHandle, 'SDL_HasEvents');
  SDL_HasGamepad := GetProcAddress(aDLLHandle, 'SDL_HasGamepad');
  SDL_HasJoystick := GetProcAddress(aDLLHandle, 'SDL_HasJoystick');
  SDL_HasKeyboard := GetProcAddress(aDLLHandle, 'SDL_HasKeyboard');
  SDL_HasLASX := GetProcAddress(aDLLHandle, 'SDL_HasLASX');
  SDL_HasLSX := GetProcAddress(aDLLHandle, 'SDL_HasLSX');
  SDL_HasMMX := GetProcAddress(aDLLHandle, 'SDL_HasMMX');
  SDL_HasMouse := GetProcAddress(aDLLHandle, 'SDL_HasMouse');
  SDL_HasNEON := GetProcAddress(aDLLHandle, 'SDL_HasNEON');
  SDL_HasPrimarySelectionText := GetProcAddress(aDLLHandle, 'SDL_HasPrimarySelectionText');
  SDL_HasProperty := GetProcAddress(aDLLHandle, 'SDL_HasProperty');
  SDL_HasRectIntersection := GetProcAddress(aDLLHandle, 'SDL_HasRectIntersection');
  SDL_HasRectIntersectionFloat := GetProcAddress(aDLLHandle, 'SDL_HasRectIntersectionFloat');
  SDL_HasScreenKeyboardSupport := GetProcAddress(aDLLHandle, 'SDL_HasScreenKeyboardSupport');
  SDL_HasSSE := GetProcAddress(aDLLHandle, 'SDL_HasSSE');
  SDL_HasSSE2 := GetProcAddress(aDLLHandle, 'SDL_HasSSE2');
  SDL_HasSSE3 := GetProcAddress(aDLLHandle, 'SDL_HasSSE3');
  SDL_HasSSE41 := GetProcAddress(aDLLHandle, 'SDL_HasSSE41');
  SDL_HasSSE42 := GetProcAddress(aDLLHandle, 'SDL_HasSSE42');
  SDL_hid_ble_scan := GetProcAddress(aDLLHandle, 'SDL_hid_ble_scan');
  SDL_hid_close := GetProcAddress(aDLLHandle, 'SDL_hid_close');
  SDL_hid_device_change_count := GetProcAddress(aDLLHandle, 'SDL_hid_device_change_count');
  SDL_hid_enumerate := GetProcAddress(aDLLHandle, 'SDL_hid_enumerate');
  SDL_hid_exit := GetProcAddress(aDLLHandle, 'SDL_hid_exit');
  SDL_hid_free_enumeration := GetProcAddress(aDLLHandle, 'SDL_hid_free_enumeration');
  SDL_hid_get_device_info := GetProcAddress(aDLLHandle, 'SDL_hid_get_device_info');
  SDL_hid_get_feature_report := GetProcAddress(aDLLHandle, 'SDL_hid_get_feature_report');
  SDL_hid_get_indexed_string := GetProcAddress(aDLLHandle, 'SDL_hid_get_indexed_string');
  SDL_hid_get_input_report := GetProcAddress(aDLLHandle, 'SDL_hid_get_input_report');
  SDL_hid_get_manufacturer_string := GetProcAddress(aDLLHandle, 'SDL_hid_get_manufacturer_string');
  SDL_hid_get_product_string := GetProcAddress(aDLLHandle, 'SDL_hid_get_product_string');
  SDL_hid_get_report_descriptor := GetProcAddress(aDLLHandle, 'SDL_hid_get_report_descriptor');
  SDL_hid_get_serial_number_string := GetProcAddress(aDLLHandle, 'SDL_hid_get_serial_number_string');
  SDL_hid_init := GetProcAddress(aDLLHandle, 'SDL_hid_init');
  SDL_hid_open := GetProcAddress(aDLLHandle, 'SDL_hid_open');
  SDL_hid_open_path := GetProcAddress(aDLLHandle, 'SDL_hid_open_path');
  SDL_hid_read := GetProcAddress(aDLLHandle, 'SDL_hid_read');
  SDL_hid_read_timeout := GetProcAddress(aDLLHandle, 'SDL_hid_read_timeout');
  SDL_hid_send_feature_report := GetProcAddress(aDLLHandle, 'SDL_hid_send_feature_report');
  SDL_hid_set_nonblocking := GetProcAddress(aDLLHandle, 'SDL_hid_set_nonblocking');
  SDL_hid_write := GetProcAddress(aDLLHandle, 'SDL_hid_write');
  SDL_HideCursor := GetProcAddress(aDLLHandle, 'SDL_HideCursor');
  SDL_HideWindow := GetProcAddress(aDLLHandle, 'SDL_HideWindow');
  SDL_iconv := GetProcAddress(aDLLHandle, 'SDL_iconv');
  SDL_iconv_close := GetProcAddress(aDLLHandle, 'SDL_iconv_close');
  SDL_iconv_open := GetProcAddress(aDLLHandle, 'SDL_iconv_open');
  SDL_iconv_string := GetProcAddress(aDLLHandle, 'SDL_iconv_string');
  SDL_Init := GetProcAddress(aDLLHandle, 'SDL_Init');
  SDL_InitHapticRumble := GetProcAddress(aDLLHandle, 'SDL_InitHapticRumble');
  SDL_InitSubSystem := GetProcAddress(aDLLHandle, 'SDL_InitSubSystem');
  SDL_InsertGPUDebugLabel := GetProcAddress(aDLLHandle, 'SDL_InsertGPUDebugLabel');
  SDL_IOFromConstMem := GetProcAddress(aDLLHandle, 'SDL_IOFromConstMem');
  SDL_IOFromDynamicMem := GetProcAddress(aDLLHandle, 'SDL_IOFromDynamicMem');
  SDL_IOFromFile := GetProcAddress(aDLLHandle, 'SDL_IOFromFile');
  SDL_IOFromMem := GetProcAddress(aDLLHandle, 'SDL_IOFromMem');
  SDL_IOprintf := GetProcAddress(aDLLHandle, 'SDL_IOprintf');
  SDL_IOvprintf := GetProcAddress(aDLLHandle, 'SDL_IOvprintf');
  SDL_isalnum := GetProcAddress(aDLLHandle, 'SDL_isalnum');
  SDL_isalpha := GetProcAddress(aDLLHandle, 'SDL_isalpha');
  SDL_IsAudioDevicePhysical := GetProcAddress(aDLLHandle, 'SDL_IsAudioDevicePhysical');
  SDL_IsAudioDevicePlayback := GetProcAddress(aDLLHandle, 'SDL_IsAudioDevicePlayback');
  SDL_isblank := GetProcAddress(aDLLHandle, 'SDL_isblank');
  SDL_iscntrl := GetProcAddress(aDLLHandle, 'SDL_iscntrl');
  SDL_isdigit := GetProcAddress(aDLLHandle, 'SDL_isdigit');
  SDL_IsGamepad := GetProcAddress(aDLLHandle, 'SDL_IsGamepad');
  SDL_isgraph := GetProcAddress(aDLLHandle, 'SDL_isgraph');
  SDL_isinf := GetProcAddress(aDLLHandle, 'SDL_isinf');
  SDL_isinff := GetProcAddress(aDLLHandle, 'SDL_isinff');
  SDL_IsJoystickHaptic := GetProcAddress(aDLLHandle, 'SDL_IsJoystickHaptic');
  SDL_IsJoystickVirtual := GetProcAddress(aDLLHandle, 'SDL_IsJoystickVirtual');
  SDL_islower := GetProcAddress(aDLLHandle, 'SDL_islower');
  SDL_IsMainThread := GetProcAddress(aDLLHandle, 'SDL_IsMainThread');
  SDL_IsMouseHaptic := GetProcAddress(aDLLHandle, 'SDL_IsMouseHaptic');
  SDL_isnan := GetProcAddress(aDLLHandle, 'SDL_isnan');
  SDL_isnanf := GetProcAddress(aDLLHandle, 'SDL_isnanf');
  SDL_isprint := GetProcAddress(aDLLHandle, 'SDL_isprint');
  SDL_ispunct := GetProcAddress(aDLLHandle, 'SDL_ispunct');
  SDL_isspace := GetProcAddress(aDLLHandle, 'SDL_isspace');
  SDL_IsTablet := GetProcAddress(aDLLHandle, 'SDL_IsTablet');
  SDL_IsTV := GetProcAddress(aDLLHandle, 'SDL_IsTV');
  SDL_isupper := GetProcAddress(aDLLHandle, 'SDL_isupper');
  SDL_isxdigit := GetProcAddress(aDLLHandle, 'SDL_isxdigit');
  SDL_itoa := GetProcAddress(aDLLHandle, 'SDL_itoa');
  SDL_JoystickConnected := GetProcAddress(aDLLHandle, 'SDL_JoystickConnected');
  SDL_JoystickEventsEnabled := GetProcAddress(aDLLHandle, 'SDL_JoystickEventsEnabled');
  SDL_KillProcess := GetProcAddress(aDLLHandle, 'SDL_KillProcess');
  SDL_lltoa := GetProcAddress(aDLLHandle, 'SDL_lltoa');
  SDL_LoadBMP := GetProcAddress(aDLLHandle, 'SDL_LoadBMP');
  SDL_LoadBMP_IO := GetProcAddress(aDLLHandle, 'SDL_LoadBMP_IO');
  SDL_LoadFile := GetProcAddress(aDLLHandle, 'SDL_LoadFile');
  SDL_LoadFile_IO := GetProcAddress(aDLLHandle, 'SDL_LoadFile_IO');
  SDL_LoadFileAsync := GetProcAddress(aDLLHandle, 'SDL_LoadFileAsync');
  SDL_LoadFunction := GetProcAddress(aDLLHandle, 'SDL_LoadFunction');
  SDL_LoadObject := GetProcAddress(aDLLHandle, 'SDL_LoadObject');
  SDL_LoadWAV := GetProcAddress(aDLLHandle, 'SDL_LoadWAV');
  SDL_LoadWAV_IO := GetProcAddress(aDLLHandle, 'SDL_LoadWAV_IO');
  SDL_LockAudioStream := GetProcAddress(aDLLHandle, 'SDL_LockAudioStream');
  SDL_LockJoysticks := GetProcAddress(aDLLHandle, 'SDL_LockJoysticks');
  SDL_LockMutex := GetProcAddress(aDLLHandle, 'SDL_LockMutex');
  SDL_LockProperties := GetProcAddress(aDLLHandle, 'SDL_LockProperties');
  SDL_LockRWLockForReading := GetProcAddress(aDLLHandle, 'SDL_LockRWLockForReading');
  SDL_LockRWLockForWriting := GetProcAddress(aDLLHandle, 'SDL_LockRWLockForWriting');
  SDL_LockSpinlock := GetProcAddress(aDLLHandle, 'SDL_LockSpinlock');
  SDL_LockSurface := GetProcAddress(aDLLHandle, 'SDL_LockSurface');
  SDL_LockTexture := GetProcAddress(aDLLHandle, 'SDL_LockTexture');
  SDL_LockTextureToSurface := GetProcAddress(aDLLHandle, 'SDL_LockTextureToSurface');
  SDL_log := GetProcAddress(aDLLHandle, 'SDL_log');
  SDL_Log_rtn := GetProcAddress(aDLLHandle, 'SDL_Log');
  SDL_log10 := GetProcAddress(aDLLHandle, 'SDL_log10');
  SDL_log10f := GetProcAddress(aDLLHandle, 'SDL_log10f');
  SDL_LogCritical := GetProcAddress(aDLLHandle, 'SDL_LogCritical');
  SDL_LogDebug := GetProcAddress(aDLLHandle, 'SDL_LogDebug');
  SDL_LogError := GetProcAddress(aDLLHandle, 'SDL_LogError');
  SDL_logf := GetProcAddress(aDLLHandle, 'SDL_logf');
  SDL_LogInfo := GetProcAddress(aDLLHandle, 'SDL_LogInfo');
  SDL_LogMessage := GetProcAddress(aDLLHandle, 'SDL_LogMessage');
  SDL_LogMessageV := GetProcAddress(aDLLHandle, 'SDL_LogMessageV');
  SDL_LogTrace := GetProcAddress(aDLLHandle, 'SDL_LogTrace');
  SDL_LogVerbose := GetProcAddress(aDLLHandle, 'SDL_LogVerbose');
  SDL_LogWarn := GetProcAddress(aDLLHandle, 'SDL_LogWarn');
  SDL_lround := GetProcAddress(aDLLHandle, 'SDL_lround');
  SDL_lroundf := GetProcAddress(aDLLHandle, 'SDL_lroundf');
  SDL_ltoa := GetProcAddress(aDLLHandle, 'SDL_ltoa');
  SDL_malloc := GetProcAddress(aDLLHandle, 'SDL_malloc');
  SDL_MapGPUTransferBuffer := GetProcAddress(aDLLHandle, 'SDL_MapGPUTransferBuffer');
  SDL_MapRGB := GetProcAddress(aDLLHandle, 'SDL_MapRGB');
  SDL_MapRGBA := GetProcAddress(aDLLHandle, 'SDL_MapRGBA');
  SDL_MapSurfaceRGB := GetProcAddress(aDLLHandle, 'SDL_MapSurfaceRGB');
  SDL_MapSurfaceRGBA := GetProcAddress(aDLLHandle, 'SDL_MapSurfaceRGBA');
  SDL_MaximizeWindow := GetProcAddress(aDLLHandle, 'SDL_MaximizeWindow');
  SDL_memcmp := GetProcAddress(aDLLHandle, 'SDL_memcmp');
  SDL_memcpy := GetProcAddress(aDLLHandle, 'SDL_memcpy');
  SDL_memmove := GetProcAddress(aDLLHandle, 'SDL_memmove');
  SDL_MemoryBarrierAcquireFunction := GetProcAddress(aDLLHandle, 'SDL_MemoryBarrierAcquireFunction');
  SDL_MemoryBarrierReleaseFunction := GetProcAddress(aDLLHandle, 'SDL_MemoryBarrierReleaseFunction');
  SDL_memset := GetProcAddress(aDLLHandle, 'SDL_memset');
  SDL_memset4 := GetProcAddress(aDLLHandle, 'SDL_memset4');
  SDL_Metal_CreateView := GetProcAddress(aDLLHandle, 'SDL_Metal_CreateView');
  SDL_Metal_DestroyView := GetProcAddress(aDLLHandle, 'SDL_Metal_DestroyView');
  SDL_Metal_GetLayer := GetProcAddress(aDLLHandle, 'SDL_Metal_GetLayer');
  SDL_MinimizeWindow := GetProcAddress(aDLLHandle, 'SDL_MinimizeWindow');
  SDL_MixAudio := GetProcAddress(aDLLHandle, 'SDL_MixAudio');
  SDL_modf := GetProcAddress(aDLLHandle, 'SDL_modf');
  SDL_modff := GetProcAddress(aDLLHandle, 'SDL_modff');
  SDL_murmur3_32 := GetProcAddress(aDLLHandle, 'SDL_murmur3_32');
  SDL_OnApplicationDidEnterBackground := GetProcAddress(aDLLHandle, 'SDL_OnApplicationDidEnterBackground');
  SDL_OnApplicationDidEnterForeground := GetProcAddress(aDLLHandle, 'SDL_OnApplicationDidEnterForeground');
  SDL_OnApplicationDidReceiveMemoryWarning := GetProcAddress(aDLLHandle, 'SDL_OnApplicationDidReceiveMemoryWarning');
  SDL_OnApplicationWillEnterBackground := GetProcAddress(aDLLHandle, 'SDL_OnApplicationWillEnterBackground');
  SDL_OnApplicationWillEnterForeground := GetProcAddress(aDLLHandle, 'SDL_OnApplicationWillEnterForeground');
  SDL_OnApplicationWillTerminate := GetProcAddress(aDLLHandle, 'SDL_OnApplicationWillTerminate');
  SDL_OpenAudioDevice := GetProcAddress(aDLLHandle, 'SDL_OpenAudioDevice');
  SDL_OpenAudioDeviceStream := GetProcAddress(aDLLHandle, 'SDL_OpenAudioDeviceStream');
  SDL_OpenCamera := GetProcAddress(aDLLHandle, 'SDL_OpenCamera');
  SDL_OpenFileStorage := GetProcAddress(aDLLHandle, 'SDL_OpenFileStorage');
  SDL_OpenGamepad := GetProcAddress(aDLLHandle, 'SDL_OpenGamepad');
  SDL_OpenHaptic := GetProcAddress(aDLLHandle, 'SDL_OpenHaptic');
  SDL_OpenHapticFromJoystick := GetProcAddress(aDLLHandle, 'SDL_OpenHapticFromJoystick');
  SDL_OpenHapticFromMouse := GetProcAddress(aDLLHandle, 'SDL_OpenHapticFromMouse');
  SDL_OpenIO := GetProcAddress(aDLLHandle, 'SDL_OpenIO');
  SDL_OpenJoystick := GetProcAddress(aDLLHandle, 'SDL_OpenJoystick');
  SDL_OpenSensor := GetProcAddress(aDLLHandle, 'SDL_OpenSensor');
  SDL_OpenStorage := GetProcAddress(aDLLHandle, 'SDL_OpenStorage');
  SDL_OpenTitleStorage := GetProcAddress(aDLLHandle, 'SDL_OpenTitleStorage');
  SDL_OpenURL := GetProcAddress(aDLLHandle, 'SDL_OpenURL');
  SDL_OpenUserStorage := GetProcAddress(aDLLHandle, 'SDL_OpenUserStorage');
  SDL_OutOfMemory := GetProcAddress(aDLLHandle, 'SDL_OutOfMemory');
  SDL_PauseAudioDevice := GetProcAddress(aDLLHandle, 'SDL_PauseAudioDevice');
  SDL_PauseAudioStreamDevice := GetProcAddress(aDLLHandle, 'SDL_PauseAudioStreamDevice');
  SDL_PauseHaptic := GetProcAddress(aDLLHandle, 'SDL_PauseHaptic');
  SDL_PeepEvents := GetProcAddress(aDLLHandle, 'SDL_PeepEvents');
  SDL_PlayHapticRumble := GetProcAddress(aDLLHandle, 'SDL_PlayHapticRumble');
  SDL_PollEvent := GetProcAddress(aDLLHandle, 'SDL_PollEvent');
  SDL_PopGPUDebugGroup := GetProcAddress(aDLLHandle, 'SDL_PopGPUDebugGroup');
  SDL_pow := GetProcAddress(aDLLHandle, 'SDL_pow');
  SDL_powf := GetProcAddress(aDLLHandle, 'SDL_powf');
  SDL_PremultiplyAlpha := GetProcAddress(aDLLHandle, 'SDL_PremultiplyAlpha');
  SDL_PremultiplySurfaceAlpha := GetProcAddress(aDLLHandle, 'SDL_PremultiplySurfaceAlpha');
  SDL_PumpEvents := GetProcAddress(aDLLHandle, 'SDL_PumpEvents');
  SDL_PushEvent := GetProcAddress(aDLLHandle, 'SDL_PushEvent');
  SDL_PushGPUComputeUniformData := GetProcAddress(aDLLHandle, 'SDL_PushGPUComputeUniformData');
  SDL_PushGPUDebugGroup := GetProcAddress(aDLLHandle, 'SDL_PushGPUDebugGroup');
  SDL_PushGPUFragmentUniformData := GetProcAddress(aDLLHandle, 'SDL_PushGPUFragmentUniformData');
  SDL_PushGPUVertexUniformData := GetProcAddress(aDLLHandle, 'SDL_PushGPUVertexUniformData');
  SDL_PutAudioStreamData := GetProcAddress(aDLLHandle, 'SDL_PutAudioStreamData');
  SDL_qsort := GetProcAddress(aDLLHandle, 'SDL_qsort');
  SDL_qsort_r := GetProcAddress(aDLLHandle, 'SDL_qsort_r');
  SDL_QueryGPUFence := GetProcAddress(aDLLHandle, 'SDL_QueryGPUFence');
  SDL_Quit := GetProcAddress(aDLLHandle, 'SDL_Quit');
  SDL_QuitSubSystem := GetProcAddress(aDLLHandle, 'SDL_QuitSubSystem');
  SDL_RaiseWindow := GetProcAddress(aDLLHandle, 'SDL_RaiseWindow');
  SDL_rand := GetProcAddress(aDLLHandle, 'SDL_rand');
  SDL_rand_bits := GetProcAddress(aDLLHandle, 'SDL_rand_bits');
  SDL_rand_bits_r := GetProcAddress(aDLLHandle, 'SDL_rand_bits_r');
  SDL_rand_r := GetProcAddress(aDLLHandle, 'SDL_rand_r');
  SDL_randf := GetProcAddress(aDLLHandle, 'SDL_randf');
  SDL_randf_r := GetProcAddress(aDLLHandle, 'SDL_randf_r');
  SDL_ReadAsyncIO := GetProcAddress(aDLLHandle, 'SDL_ReadAsyncIO');
  SDL_ReadIO := GetProcAddress(aDLLHandle, 'SDL_ReadIO');
  SDL_ReadProcess := GetProcAddress(aDLLHandle, 'SDL_ReadProcess');
  SDL_ReadS16BE := GetProcAddress(aDLLHandle, 'SDL_ReadS16BE');
  SDL_ReadS16LE := GetProcAddress(aDLLHandle, 'SDL_ReadS16LE');
  SDL_ReadS32BE := GetProcAddress(aDLLHandle, 'SDL_ReadS32BE');
  SDL_ReadS32LE := GetProcAddress(aDLLHandle, 'SDL_ReadS32LE');
  SDL_ReadS64BE := GetProcAddress(aDLLHandle, 'SDL_ReadS64BE');
  SDL_ReadS64LE := GetProcAddress(aDLLHandle, 'SDL_ReadS64LE');
  SDL_ReadS8 := GetProcAddress(aDLLHandle, 'SDL_ReadS8');
  SDL_ReadStorageFile := GetProcAddress(aDLLHandle, 'SDL_ReadStorageFile');
  SDL_ReadSurfacePixel := GetProcAddress(aDLLHandle, 'SDL_ReadSurfacePixel');
  SDL_ReadSurfacePixelFloat := GetProcAddress(aDLLHandle, 'SDL_ReadSurfacePixelFloat');
  SDL_ReadU16BE := GetProcAddress(aDLLHandle, 'SDL_ReadU16BE');
  SDL_ReadU16LE := GetProcAddress(aDLLHandle, 'SDL_ReadU16LE');
  SDL_ReadU32BE := GetProcAddress(aDLLHandle, 'SDL_ReadU32BE');
  SDL_ReadU32LE := GetProcAddress(aDLLHandle, 'SDL_ReadU32LE');
  SDL_ReadU64BE := GetProcAddress(aDLLHandle, 'SDL_ReadU64BE');
  SDL_ReadU64LE := GetProcAddress(aDLLHandle, 'SDL_ReadU64LE');
  SDL_ReadU8 := GetProcAddress(aDLLHandle, 'SDL_ReadU8');
  SDL_realloc := GetProcAddress(aDLLHandle, 'SDL_realloc');
  SDL_RegisterEvents := GetProcAddress(aDLLHandle, 'SDL_RegisterEvents');
  SDL_ReleaseCameraFrame := GetProcAddress(aDLLHandle, 'SDL_ReleaseCameraFrame');
  SDL_ReleaseGPUBuffer := GetProcAddress(aDLLHandle, 'SDL_ReleaseGPUBuffer');
  SDL_ReleaseGPUComputePipeline := GetProcAddress(aDLLHandle, 'SDL_ReleaseGPUComputePipeline');
  SDL_ReleaseGPUFence := GetProcAddress(aDLLHandle, 'SDL_ReleaseGPUFence');
  SDL_ReleaseGPUGraphicsPipeline := GetProcAddress(aDLLHandle, 'SDL_ReleaseGPUGraphicsPipeline');
  SDL_ReleaseGPUSampler := GetProcAddress(aDLLHandle, 'SDL_ReleaseGPUSampler');
  SDL_ReleaseGPUShader := GetProcAddress(aDLLHandle, 'SDL_ReleaseGPUShader');
  SDL_ReleaseGPUTexture := GetProcAddress(aDLLHandle, 'SDL_ReleaseGPUTexture');
  SDL_ReleaseGPUTransferBuffer := GetProcAddress(aDLLHandle, 'SDL_ReleaseGPUTransferBuffer');
  SDL_ReleaseWindowFromGPUDevice := GetProcAddress(aDLLHandle, 'SDL_ReleaseWindowFromGPUDevice');
  SDL_ReloadGamepadMappings := GetProcAddress(aDLLHandle, 'SDL_ReloadGamepadMappings');
  SDL_RemoveEventWatch := GetProcAddress(aDLLHandle, 'SDL_RemoveEventWatch');
  SDL_RemoveHintCallback := GetProcAddress(aDLLHandle, 'SDL_RemoveHintCallback');
  SDL_RemovePath := GetProcAddress(aDLLHandle, 'SDL_RemovePath');
  SDL_RemoveStoragePath := GetProcAddress(aDLLHandle, 'SDL_RemoveStoragePath');
  SDL_RemoveSurfaceAlternateImages := GetProcAddress(aDLLHandle, 'SDL_RemoveSurfaceAlternateImages');
  SDL_RemoveTimer := GetProcAddress(aDLLHandle, 'SDL_RemoveTimer');
  SDL_RenamePath := GetProcAddress(aDLLHandle, 'SDL_RenamePath');
  SDL_RenameStoragePath := GetProcAddress(aDLLHandle, 'SDL_RenameStoragePath');
  SDL_RenderClear := GetProcAddress(aDLLHandle, 'SDL_RenderClear');
  SDL_RenderClipEnabled := GetProcAddress(aDLLHandle, 'SDL_RenderClipEnabled');
  SDL_RenderCoordinatesFromWindow := GetProcAddress(aDLLHandle, 'SDL_RenderCoordinatesFromWindow');
  SDL_RenderCoordinatesToWindow := GetProcAddress(aDLLHandle, 'SDL_RenderCoordinatesToWindow');
  SDL_RenderDebugText := GetProcAddress(aDLLHandle, 'SDL_RenderDebugText');
  SDL_RenderFillRect := GetProcAddress(aDLLHandle, 'SDL_RenderFillRect');
  SDL_RenderFillRects := GetProcAddress(aDLLHandle, 'SDL_RenderFillRects');
  SDL_RenderGeometry := GetProcAddress(aDLLHandle, 'SDL_RenderGeometry');
  SDL_RenderGeometryRaw := GetProcAddress(aDLLHandle, 'SDL_RenderGeometryRaw');
  SDL_RenderLine := GetProcAddress(aDLLHandle, 'SDL_RenderLine');
  SDL_RenderLines := GetProcAddress(aDLLHandle, 'SDL_RenderLines');
  SDL_RenderPoint := GetProcAddress(aDLLHandle, 'SDL_RenderPoint');
  SDL_RenderPoints := GetProcAddress(aDLLHandle, 'SDL_RenderPoints');
  SDL_RenderPresent := GetProcAddress(aDLLHandle, 'SDL_RenderPresent');
  SDL_RenderReadPixels := GetProcAddress(aDLLHandle, 'SDL_RenderReadPixels');
  SDL_RenderRect := GetProcAddress(aDLLHandle, 'SDL_RenderRect');
  SDL_RenderRects := GetProcAddress(aDLLHandle, 'SDL_RenderRects');
  SDL_RenderTexture := GetProcAddress(aDLLHandle, 'SDL_RenderTexture');
  SDL_RenderTexture9Grid := GetProcAddress(aDLLHandle, 'SDL_RenderTexture9Grid');
  SDL_RenderTextureAffine := GetProcAddress(aDLLHandle, 'SDL_RenderTextureAffine');
  SDL_RenderTextureRotated := GetProcAddress(aDLLHandle, 'SDL_RenderTextureRotated');
  SDL_RenderTextureTiled := GetProcAddress(aDLLHandle, 'SDL_RenderTextureTiled');
  SDL_RenderViewportSet := GetProcAddress(aDLLHandle, 'SDL_RenderViewportSet');
  SDL_ReportAssertion := GetProcAddress(aDLLHandle, 'SDL_ReportAssertion');
  SDL_ResetAssertionReport := GetProcAddress(aDLLHandle, 'SDL_ResetAssertionReport');
  SDL_ResetHint := GetProcAddress(aDLLHandle, 'SDL_ResetHint');
  SDL_ResetHints := GetProcAddress(aDLLHandle, 'SDL_ResetHints');
  SDL_ResetKeyboard := GetProcAddress(aDLLHandle, 'SDL_ResetKeyboard');
  SDL_ResetLogPriorities := GetProcAddress(aDLLHandle, 'SDL_ResetLogPriorities');
  SDL_RestoreWindow := GetProcAddress(aDLLHandle, 'SDL_RestoreWindow');
  SDL_ResumeAudioDevice := GetProcAddress(aDLLHandle, 'SDL_ResumeAudioDevice');
  SDL_ResumeAudioStreamDevice := GetProcAddress(aDLLHandle, 'SDL_ResumeAudioStreamDevice');
  SDL_ResumeHaptic := GetProcAddress(aDLLHandle, 'SDL_ResumeHaptic');
  SDL_round := GetProcAddress(aDLLHandle, 'SDL_round');
  SDL_roundf := GetProcAddress(aDLLHandle, 'SDL_roundf');
  SDL_RumbleGamepad := GetProcAddress(aDLLHandle, 'SDL_RumbleGamepad');
  SDL_RumbleGamepadTriggers := GetProcAddress(aDLLHandle, 'SDL_RumbleGamepadTriggers');
  SDL_RumbleJoystick := GetProcAddress(aDLLHandle, 'SDL_RumbleJoystick');
  SDL_RumbleJoystickTriggers := GetProcAddress(aDLLHandle, 'SDL_RumbleJoystickTriggers');
  SDL_RunHapticEffect := GetProcAddress(aDLLHandle, 'SDL_RunHapticEffect');
  SDL_RunOnMainThread := GetProcAddress(aDLLHandle, 'SDL_RunOnMainThread');
  SDL_SaveBMP := GetProcAddress(aDLLHandle, 'SDL_SaveBMP');
  SDL_SaveBMP_IO := GetProcAddress(aDLLHandle, 'SDL_SaveBMP_IO');
  SDL_SaveFile := GetProcAddress(aDLLHandle, 'SDL_SaveFile');
  SDL_SaveFile_IO := GetProcAddress(aDLLHandle, 'SDL_SaveFile_IO');
  SDL_scalbn := GetProcAddress(aDLLHandle, 'SDL_scalbn');
  SDL_scalbnf := GetProcAddress(aDLLHandle, 'SDL_scalbnf');
  SDL_ScaleSurface := GetProcAddress(aDLLHandle, 'SDL_ScaleSurface');
  SDL_ScreenKeyboardShown := GetProcAddress(aDLLHandle, 'SDL_ScreenKeyboardShown');
  SDL_ScreenSaverEnabled := GetProcAddress(aDLLHandle, 'SDL_ScreenSaverEnabled');
  SDL_SeekIO := GetProcAddress(aDLLHandle, 'SDL_SeekIO');
  SDL_SendGamepadEffect := GetProcAddress(aDLLHandle, 'SDL_SendGamepadEffect');
  SDL_SendJoystickEffect := GetProcAddress(aDLLHandle, 'SDL_SendJoystickEffect');
  SDL_SendJoystickVirtualSensorData := GetProcAddress(aDLLHandle, 'SDL_SendJoystickVirtualSensorData');
  SDL_SetAppMetadata := GetProcAddress(aDLLHandle, 'SDL_SetAppMetadata');
  SDL_SetAppMetadataProperty := GetProcAddress(aDLLHandle, 'SDL_SetAppMetadataProperty');
  SDL_SetAssertionHandler := GetProcAddress(aDLLHandle, 'SDL_SetAssertionHandler');
  SDL_SetAtomicInt := GetProcAddress(aDLLHandle, 'SDL_SetAtomicInt');
  SDL_SetAtomicPointer := GetProcAddress(aDLLHandle, 'SDL_SetAtomicPointer');
  SDL_SetAtomicU32 := GetProcAddress(aDLLHandle, 'SDL_SetAtomicU32');
  SDL_SetAudioDeviceGain := GetProcAddress(aDLLHandle, 'SDL_SetAudioDeviceGain');
  SDL_SetAudioPostmixCallback := GetProcAddress(aDLLHandle, 'SDL_SetAudioPostmixCallback');
  SDL_SetAudioStreamFormat := GetProcAddress(aDLLHandle, 'SDL_SetAudioStreamFormat');
  SDL_SetAudioStreamFrequencyRatio := GetProcAddress(aDLLHandle, 'SDL_SetAudioStreamFrequencyRatio');
  SDL_SetAudioStreamGain := GetProcAddress(aDLLHandle, 'SDL_SetAudioStreamGain');
  SDL_SetAudioStreamGetCallback := GetProcAddress(aDLLHandle, 'SDL_SetAudioStreamGetCallback');
  SDL_SetAudioStreamInputChannelMap := GetProcAddress(aDLLHandle, 'SDL_SetAudioStreamInputChannelMap');
  SDL_SetAudioStreamOutputChannelMap := GetProcAddress(aDLLHandle, 'SDL_SetAudioStreamOutputChannelMap');
  SDL_SetAudioStreamPutCallback := GetProcAddress(aDLLHandle, 'SDL_SetAudioStreamPutCallback');
  SDL_SetBooleanProperty := GetProcAddress(aDLLHandle, 'SDL_SetBooleanProperty');
  SDL_SetClipboardData := GetProcAddress(aDLLHandle, 'SDL_SetClipboardData');
  SDL_SetClipboardText := GetProcAddress(aDLLHandle, 'SDL_SetClipboardText');
  SDL_SetCurrentThreadPriority := GetProcAddress(aDLLHandle, 'SDL_SetCurrentThreadPriority');
  SDL_SetCursor := GetProcAddress(aDLLHandle, 'SDL_SetCursor');
  SDL_setenv_unsafe := GetProcAddress(aDLLHandle, 'SDL_setenv_unsafe');
  SDL_SetEnvironmentVariable := GetProcAddress(aDLLHandle, 'SDL_SetEnvironmentVariable');
  SDL_SetError := GetProcAddress(aDLLHandle, 'SDL_SetError');
  SDL_SetErrorV := GetProcAddress(aDLLHandle, 'SDL_SetErrorV');
  SDL_SetEventEnabled := GetProcAddress(aDLLHandle, 'SDL_SetEventEnabled');
  SDL_SetEventFilter := GetProcAddress(aDLLHandle, 'SDL_SetEventFilter');
  SDL_SetFloatProperty := GetProcAddress(aDLLHandle, 'SDL_SetFloatProperty');
  SDL_SetGamepadEventsEnabled := GetProcAddress(aDLLHandle, 'SDL_SetGamepadEventsEnabled');
  SDL_SetGamepadLED := GetProcAddress(aDLLHandle, 'SDL_SetGamepadLED');
  SDL_SetGamepadMapping := GetProcAddress(aDLLHandle, 'SDL_SetGamepadMapping');
  SDL_SetGamepadPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_SetGamepadPlayerIndex');
  SDL_SetGamepadSensorEnabled := GetProcAddress(aDLLHandle, 'SDL_SetGamepadSensorEnabled');
  SDL_SetGPUAllowedFramesInFlight := GetProcAddress(aDLLHandle, 'SDL_SetGPUAllowedFramesInFlight');
  SDL_SetGPUBlendConstants := GetProcAddress(aDLLHandle, 'SDL_SetGPUBlendConstants');
  SDL_SetGPUBufferName := GetProcAddress(aDLLHandle, 'SDL_SetGPUBufferName');
  SDL_SetGPUScissor := GetProcAddress(aDLLHandle, 'SDL_SetGPUScissor');
  SDL_SetGPUStencilReference := GetProcAddress(aDLLHandle, 'SDL_SetGPUStencilReference');
  SDL_SetGPUSwapchainParameters := GetProcAddress(aDLLHandle, 'SDL_SetGPUSwapchainParameters');
  SDL_SetGPUTextureName := GetProcAddress(aDLLHandle, 'SDL_SetGPUTextureName');
  SDL_SetGPUViewport := GetProcAddress(aDLLHandle, 'SDL_SetGPUViewport');
  SDL_SetHapticAutocenter := GetProcAddress(aDLLHandle, 'SDL_SetHapticAutocenter');
  SDL_SetHapticGain := GetProcAddress(aDLLHandle, 'SDL_SetHapticGain');
  SDL_SetHint := GetProcAddress(aDLLHandle, 'SDL_SetHint');
  SDL_SetHintWithPriority := GetProcAddress(aDLLHandle, 'SDL_SetHintWithPriority');
  SDL_SetInitialized := GetProcAddress(aDLLHandle, 'SDL_SetInitialized');
  SDL_SetJoystickEventsEnabled := GetProcAddress(aDLLHandle, 'SDL_SetJoystickEventsEnabled');
  SDL_SetJoystickLED := GetProcAddress(aDLLHandle, 'SDL_SetJoystickLED');
  SDL_SetJoystickPlayerIndex := GetProcAddress(aDLLHandle, 'SDL_SetJoystickPlayerIndex');
  SDL_SetJoystickVirtualAxis := GetProcAddress(aDLLHandle, 'SDL_SetJoystickVirtualAxis');
  SDL_SetJoystickVirtualBall := GetProcAddress(aDLLHandle, 'SDL_SetJoystickVirtualBall');
  SDL_SetJoystickVirtualButton := GetProcAddress(aDLLHandle, 'SDL_SetJoystickVirtualButton');
  SDL_SetJoystickVirtualHat := GetProcAddress(aDLLHandle, 'SDL_SetJoystickVirtualHat');
  SDL_SetJoystickVirtualTouchpad := GetProcAddress(aDLLHandle, 'SDL_SetJoystickVirtualTouchpad');
  SDL_SetLogOutputFunction := GetProcAddress(aDLLHandle, 'SDL_SetLogOutputFunction');
  SDL_SetLogPriorities := GetProcAddress(aDLLHandle, 'SDL_SetLogPriorities');
  SDL_SetLogPriority := GetProcAddress(aDLLHandle, 'SDL_SetLogPriority');
  SDL_SetLogPriorityPrefix := GetProcAddress(aDLLHandle, 'SDL_SetLogPriorityPrefix');
  SDL_SetMemoryFunctions := GetProcAddress(aDLLHandle, 'SDL_SetMemoryFunctions');
  SDL_SetModState := GetProcAddress(aDLLHandle, 'SDL_SetModState');
  SDL_SetNumberProperty := GetProcAddress(aDLLHandle, 'SDL_SetNumberProperty');
  SDL_SetPaletteColors := GetProcAddress(aDLLHandle, 'SDL_SetPaletteColors');
  SDL_SetPointerProperty := GetProcAddress(aDLLHandle, 'SDL_SetPointerProperty');
  SDL_SetPointerPropertyWithCleanup := GetProcAddress(aDLLHandle, 'SDL_SetPointerPropertyWithCleanup');
  SDL_SetPrimarySelectionText := GetProcAddress(aDLLHandle, 'SDL_SetPrimarySelectionText');
  SDL_SetRenderClipRect := GetProcAddress(aDLLHandle, 'SDL_SetRenderClipRect');
  SDL_SetRenderColorScale := GetProcAddress(aDLLHandle, 'SDL_SetRenderColorScale');
  SDL_SetRenderDrawBlendMode := GetProcAddress(aDLLHandle, 'SDL_SetRenderDrawBlendMode');
  SDL_SetRenderDrawColor := GetProcAddress(aDLLHandle, 'SDL_SetRenderDrawColor');
  SDL_SetRenderDrawColorFloat := GetProcAddress(aDLLHandle, 'SDL_SetRenderDrawColorFloat');
  SDL_SetRenderLogicalPresentation := GetProcAddress(aDLLHandle, 'SDL_SetRenderLogicalPresentation');
  SDL_SetRenderScale := GetProcAddress(aDLLHandle, 'SDL_SetRenderScale');
  SDL_SetRenderTarget := GetProcAddress(aDLLHandle, 'SDL_SetRenderTarget');
  SDL_SetRenderViewport := GetProcAddress(aDLLHandle, 'SDL_SetRenderViewport');
  SDL_SetRenderVSync := GetProcAddress(aDLLHandle, 'SDL_SetRenderVSync');
  SDL_SetScancodeName := GetProcAddress(aDLLHandle, 'SDL_SetScancodeName');
  SDL_SetStringProperty := GetProcAddress(aDLLHandle, 'SDL_SetStringProperty');
  SDL_SetSurfaceAlphaMod := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceAlphaMod');
  SDL_SetSurfaceBlendMode := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceBlendMode');
  SDL_SetSurfaceClipRect := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceClipRect');
  SDL_SetSurfaceColorKey := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceColorKey');
  SDL_SetSurfaceColorMod := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceColorMod');
  SDL_SetSurfaceColorspace := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceColorspace');
  SDL_SetSurfacePalette := GetProcAddress(aDLLHandle, 'SDL_SetSurfacePalette');
  SDL_SetSurfaceRLE := GetProcAddress(aDLLHandle, 'SDL_SetSurfaceRLE');
  SDL_SetTextInputArea := GetProcAddress(aDLLHandle, 'SDL_SetTextInputArea');
  SDL_SetTextureAlphaMod := GetProcAddress(aDLLHandle, 'SDL_SetTextureAlphaMod');
  SDL_SetTextureAlphaModFloat := GetProcAddress(aDLLHandle, 'SDL_SetTextureAlphaModFloat');
  SDL_SetTextureBlendMode := GetProcAddress(aDLLHandle, 'SDL_SetTextureBlendMode');
  SDL_SetTextureColorMod := GetProcAddress(aDLLHandle, 'SDL_SetTextureColorMod');
  SDL_SetTextureColorModFloat := GetProcAddress(aDLLHandle, 'SDL_SetTextureColorModFloat');
  SDL_SetTextureScaleMode := GetProcAddress(aDLLHandle, 'SDL_SetTextureScaleMode');
  SDL_SetTLS := GetProcAddress(aDLLHandle, 'SDL_SetTLS');
  SDL_SetWindowAlwaysOnTop := GetProcAddress(aDLLHandle, 'SDL_SetWindowAlwaysOnTop');
  SDL_SetWindowAspectRatio := GetProcAddress(aDLLHandle, 'SDL_SetWindowAspectRatio');
  SDL_SetWindowBordered := GetProcAddress(aDLLHandle, 'SDL_SetWindowBordered');
  SDL_SetWindowFocusable := GetProcAddress(aDLLHandle, 'SDL_SetWindowFocusable');
  SDL_SetWindowFullscreen := GetProcAddress(aDLLHandle, 'SDL_SetWindowFullscreen');
  SDL_SetWindowFullscreenMode := GetProcAddress(aDLLHandle, 'SDL_SetWindowFullscreenMode');
  SDL_SetWindowHitTest := GetProcAddress(aDLLHandle, 'SDL_SetWindowHitTest');
  SDL_SetWindowIcon := GetProcAddress(aDLLHandle, 'SDL_SetWindowIcon');
  SDL_SetWindowKeyboardGrab := GetProcAddress(aDLLHandle, 'SDL_SetWindowKeyboardGrab');
  SDL_SetWindowMaximumSize := GetProcAddress(aDLLHandle, 'SDL_SetWindowMaximumSize');
  SDL_SetWindowMinimumSize := GetProcAddress(aDLLHandle, 'SDL_SetWindowMinimumSize');
  SDL_SetWindowModal := GetProcAddress(aDLLHandle, 'SDL_SetWindowModal');
  SDL_SetWindowMouseGrab := GetProcAddress(aDLLHandle, 'SDL_SetWindowMouseGrab');
  SDL_SetWindowMouseRect := GetProcAddress(aDLLHandle, 'SDL_SetWindowMouseRect');
  SDL_SetWindowOpacity := GetProcAddress(aDLLHandle, 'SDL_SetWindowOpacity');
  SDL_SetWindowParent := GetProcAddress(aDLLHandle, 'SDL_SetWindowParent');
  SDL_SetWindowPosition := GetProcAddress(aDLLHandle, 'SDL_SetWindowPosition');
  SDL_SetWindowRelativeMouseMode := GetProcAddress(aDLLHandle, 'SDL_SetWindowRelativeMouseMode');
  SDL_SetWindowResizable := GetProcAddress(aDLLHandle, 'SDL_SetWindowResizable');
  SDL_SetWindowShape := GetProcAddress(aDLLHandle, 'SDL_SetWindowShape');
  SDL_SetWindowSize := GetProcAddress(aDLLHandle, 'SDL_SetWindowSize');
  SDL_SetWindowsMessageHook := GetProcAddress(aDLLHandle, 'SDL_SetWindowsMessageHook');
  SDL_SetWindowSurfaceVSync := GetProcAddress(aDLLHandle, 'SDL_SetWindowSurfaceVSync');
  SDL_SetWindowTitle := GetProcAddress(aDLLHandle, 'SDL_SetWindowTitle');
  SDL_SetX11EventHook := GetProcAddress(aDLLHandle, 'SDL_SetX11EventHook');
  SDL_ShouldInit := GetProcAddress(aDLLHandle, 'SDL_ShouldInit');
  SDL_ShouldQuit := GetProcAddress(aDLLHandle, 'SDL_ShouldQuit');
  SDL_ShowCursor := GetProcAddress(aDLLHandle, 'SDL_ShowCursor');
  SDL_ShowFileDialogWithProperties := GetProcAddress(aDLLHandle, 'SDL_ShowFileDialogWithProperties');
  SDL_ShowMessageBox := GetProcAddress(aDLLHandle, 'SDL_ShowMessageBox');
  SDL_ShowOpenFileDialog := GetProcAddress(aDLLHandle, 'SDL_ShowOpenFileDialog');
  SDL_ShowOpenFolderDialog := GetProcAddress(aDLLHandle, 'SDL_ShowOpenFolderDialog');
  SDL_ShowSaveFileDialog := GetProcAddress(aDLLHandle, 'SDL_ShowSaveFileDialog');
  SDL_ShowSimpleMessageBox := GetProcAddress(aDLLHandle, 'SDL_ShowSimpleMessageBox');
  SDL_ShowWindow := GetProcAddress(aDLLHandle, 'SDL_ShowWindow');
  SDL_ShowWindowSystemMenu := GetProcAddress(aDLLHandle, 'SDL_ShowWindowSystemMenu');
  SDL_SignalAsyncIOQueue := GetProcAddress(aDLLHandle, 'SDL_SignalAsyncIOQueue');
  SDL_SignalCondition := GetProcAddress(aDLLHandle, 'SDL_SignalCondition');
  SDL_SignalSemaphore := GetProcAddress(aDLLHandle, 'SDL_SignalSemaphore');
  SDL_sin := GetProcAddress(aDLLHandle, 'SDL_sin');
  SDL_sinf := GetProcAddress(aDLLHandle, 'SDL_sinf');
  SDL_snprintf := GetProcAddress(aDLLHandle, 'SDL_snprintf');
  SDL_sqrt := GetProcAddress(aDLLHandle, 'SDL_sqrt');
  SDL_sqrtf := GetProcAddress(aDLLHandle, 'SDL_sqrtf');
  SDL_srand := GetProcAddress(aDLLHandle, 'SDL_srand');
  SDL_sscanf := GetProcAddress(aDLLHandle, 'SDL_sscanf');
  SDL_StartTextInput := GetProcAddress(aDLLHandle, 'SDL_StartTextInput');
  SDL_StartTextInputWithProperties := GetProcAddress(aDLLHandle, 'SDL_StartTextInputWithProperties');
  SDL_StepBackUTF8 := GetProcAddress(aDLLHandle, 'SDL_StepBackUTF8');
  SDL_StepUTF8 := GetProcAddress(aDLLHandle, 'SDL_StepUTF8');
  SDL_StopHapticEffect := GetProcAddress(aDLLHandle, 'SDL_StopHapticEffect');
  SDL_StopHapticEffects := GetProcAddress(aDLLHandle, 'SDL_StopHapticEffects');
  SDL_StopHapticRumble := GetProcAddress(aDLLHandle, 'SDL_StopHapticRumble');
  SDL_StopTextInput := GetProcAddress(aDLLHandle, 'SDL_StopTextInput');
  SDL_StorageReady := GetProcAddress(aDLLHandle, 'SDL_StorageReady');
  SDL_strcasecmp := GetProcAddress(aDLLHandle, 'SDL_strcasecmp');
  SDL_strcasestr := GetProcAddress(aDLLHandle, 'SDL_strcasestr');
  SDL_strchr := GetProcAddress(aDLLHandle, 'SDL_strchr');
  SDL_strcmp := GetProcAddress(aDLLHandle, 'SDL_strcmp');
  SDL_strdup := GetProcAddress(aDLLHandle, 'SDL_strdup');
  SDL_StringToGUID := GetProcAddress(aDLLHandle, 'SDL_StringToGUID');
  SDL_strlcat := GetProcAddress(aDLLHandle, 'SDL_strlcat');
  SDL_strlcpy := GetProcAddress(aDLLHandle, 'SDL_strlcpy');
  SDL_strlen := GetProcAddress(aDLLHandle, 'SDL_strlen');
  SDL_strlwr := GetProcAddress(aDLLHandle, 'SDL_strlwr');
  SDL_strncasecmp := GetProcAddress(aDLLHandle, 'SDL_strncasecmp');
  SDL_strncmp := GetProcAddress(aDLLHandle, 'SDL_strncmp');
  SDL_strndup := GetProcAddress(aDLLHandle, 'SDL_strndup');
  SDL_strnlen := GetProcAddress(aDLLHandle, 'SDL_strnlen');
  SDL_strnstr := GetProcAddress(aDLLHandle, 'SDL_strnstr');
  SDL_strpbrk := GetProcAddress(aDLLHandle, 'SDL_strpbrk');
  SDL_strrchr := GetProcAddress(aDLLHandle, 'SDL_strrchr');
  SDL_strrev := GetProcAddress(aDLLHandle, 'SDL_strrev');
  SDL_strstr := GetProcAddress(aDLLHandle, 'SDL_strstr');
  SDL_strtod := GetProcAddress(aDLLHandle, 'SDL_strtod');
  SDL_strtok_r := GetProcAddress(aDLLHandle, 'SDL_strtok_r');
  SDL_strtol := GetProcAddress(aDLLHandle, 'SDL_strtol');
  SDL_strtoll := GetProcAddress(aDLLHandle, 'SDL_strtoll');
  SDL_strtoul := GetProcAddress(aDLLHandle, 'SDL_strtoul');
  SDL_strtoull := GetProcAddress(aDLLHandle, 'SDL_strtoull');
  SDL_strupr := GetProcAddress(aDLLHandle, 'SDL_strupr');
  SDL_SubmitGPUCommandBuffer := GetProcAddress(aDLLHandle, 'SDL_SubmitGPUCommandBuffer');
  SDL_SubmitGPUCommandBufferAndAcquireFence := GetProcAddress(aDLLHandle, 'SDL_SubmitGPUCommandBufferAndAcquireFence');
  SDL_SurfaceHasAlternateImages := GetProcAddress(aDLLHandle, 'SDL_SurfaceHasAlternateImages');
  SDL_SurfaceHasColorKey := GetProcAddress(aDLLHandle, 'SDL_SurfaceHasColorKey');
  SDL_SurfaceHasRLE := GetProcAddress(aDLLHandle, 'SDL_SurfaceHasRLE');
  SDL_swprintf := GetProcAddress(aDLLHandle, 'SDL_swprintf');
  SDL_SyncWindow := GetProcAddress(aDLLHandle, 'SDL_SyncWindow');
  SDL_tan := GetProcAddress(aDLLHandle, 'SDL_tan');
  SDL_tanf := GetProcAddress(aDLLHandle, 'SDL_tanf');
  SDL_TellIO := GetProcAddress(aDLLHandle, 'SDL_TellIO');
  SDL_TextInputActive := GetProcAddress(aDLLHandle, 'SDL_TextInputActive');
  SDL_TimeFromWindows := GetProcAddress(aDLLHandle, 'SDL_TimeFromWindows');
  SDL_TimeToDateTime := GetProcAddress(aDLLHandle, 'SDL_TimeToDateTime');
  SDL_TimeToWindows := GetProcAddress(aDLLHandle, 'SDL_TimeToWindows');
  SDL_tolower := GetProcAddress(aDLLHandle, 'SDL_tolower');
  SDL_toupper := GetProcAddress(aDLLHandle, 'SDL_toupper');
  SDL_trunc := GetProcAddress(aDLLHandle, 'SDL_trunc');
  SDL_truncf := GetProcAddress(aDLLHandle, 'SDL_truncf');
  SDL_TryLockMutex := GetProcAddress(aDLLHandle, 'SDL_TryLockMutex');
  SDL_TryLockRWLockForReading := GetProcAddress(aDLLHandle, 'SDL_TryLockRWLockForReading');
  SDL_TryLockRWLockForWriting := GetProcAddress(aDLLHandle, 'SDL_TryLockRWLockForWriting');
  SDL_TryLockSpinlock := GetProcAddress(aDLLHandle, 'SDL_TryLockSpinlock');
  SDL_TryWaitSemaphore := GetProcAddress(aDLLHandle, 'SDL_TryWaitSemaphore');
  SDL_UCS4ToUTF8 := GetProcAddress(aDLLHandle, 'SDL_UCS4ToUTF8');
  SDL_uitoa := GetProcAddress(aDLLHandle, 'SDL_uitoa');
  SDL_ulltoa := GetProcAddress(aDLLHandle, 'SDL_ulltoa');
  SDL_ultoa := GetProcAddress(aDLLHandle, 'SDL_ultoa');
  SDL_UnbindAudioStream := GetProcAddress(aDLLHandle, 'SDL_UnbindAudioStream');
  SDL_UnbindAudioStreams := GetProcAddress(aDLLHandle, 'SDL_UnbindAudioStreams');
  SDL_UnloadObject := GetProcAddress(aDLLHandle, 'SDL_UnloadObject');
  SDL_UnlockAudioStream := GetProcAddress(aDLLHandle, 'SDL_UnlockAudioStream');
  SDL_UnlockJoysticks := GetProcAddress(aDLLHandle, 'SDL_UnlockJoysticks');
  SDL_UnlockMutex := GetProcAddress(aDLLHandle, 'SDL_UnlockMutex');
  SDL_UnlockProperties := GetProcAddress(aDLLHandle, 'SDL_UnlockProperties');
  SDL_UnlockRWLock := GetProcAddress(aDLLHandle, 'SDL_UnlockRWLock');
  SDL_UnlockSpinlock := GetProcAddress(aDLLHandle, 'SDL_UnlockSpinlock');
  SDL_UnlockSurface := GetProcAddress(aDLLHandle, 'SDL_UnlockSurface');
  SDL_UnlockTexture := GetProcAddress(aDLLHandle, 'SDL_UnlockTexture');
  SDL_UnmapGPUTransferBuffer := GetProcAddress(aDLLHandle, 'SDL_UnmapGPUTransferBuffer');
  SDL_unsetenv_unsafe := GetProcAddress(aDLLHandle, 'SDL_unsetenv_unsafe');
  SDL_UnsetEnvironmentVariable := GetProcAddress(aDLLHandle, 'SDL_UnsetEnvironmentVariable');
  SDL_UpdateGamepads := GetProcAddress(aDLLHandle, 'SDL_UpdateGamepads');
  SDL_UpdateHapticEffect := GetProcAddress(aDLLHandle, 'SDL_UpdateHapticEffect');
  SDL_UpdateJoysticks := GetProcAddress(aDLLHandle, 'SDL_UpdateJoysticks');
  SDL_UpdateNVTexture := GetProcAddress(aDLLHandle, 'SDL_UpdateNVTexture');
  SDL_UpdateSensors := GetProcAddress(aDLLHandle, 'SDL_UpdateSensors');
  SDL_UpdateTexture := GetProcAddress(aDLLHandle, 'SDL_UpdateTexture');
  SDL_UpdateWindowSurface := GetProcAddress(aDLLHandle, 'SDL_UpdateWindowSurface');
  SDL_UpdateWindowSurfaceRects := GetProcAddress(aDLLHandle, 'SDL_UpdateWindowSurfaceRects');
  SDL_UpdateYUVTexture := GetProcAddress(aDLLHandle, 'SDL_UpdateYUVTexture');
  SDL_UploadToGPUBuffer := GetProcAddress(aDLLHandle, 'SDL_UploadToGPUBuffer');
  SDL_UploadToGPUTexture := GetProcAddress(aDLLHandle, 'SDL_UploadToGPUTexture');
  SDL_utf8strlcpy := GetProcAddress(aDLLHandle, 'SDL_utf8strlcpy');
  SDL_utf8strlen := GetProcAddress(aDLLHandle, 'SDL_utf8strlen');
  SDL_utf8strnlen := GetProcAddress(aDLLHandle, 'SDL_utf8strnlen');
  SDL_vasprintf := GetProcAddress(aDLLHandle, 'SDL_vasprintf');
  SDL_vsnprintf := GetProcAddress(aDLLHandle, 'SDL_vsnprintf');
  SDL_vsscanf := GetProcAddress(aDLLHandle, 'SDL_vsscanf');
  SDL_vswprintf := GetProcAddress(aDLLHandle, 'SDL_vswprintf');
  SDL_WaitAndAcquireGPUSwapchainTexture := GetProcAddress(aDLLHandle, 'SDL_WaitAndAcquireGPUSwapchainTexture');
  SDL_WaitAsyncIOResult := GetProcAddress(aDLLHandle, 'SDL_WaitAsyncIOResult');
  SDL_WaitCondition := GetProcAddress(aDLLHandle, 'SDL_WaitCondition');
  SDL_WaitConditionTimeout := GetProcAddress(aDLLHandle, 'SDL_WaitConditionTimeout');
  SDL_WaitEvent := GetProcAddress(aDLLHandle, 'SDL_WaitEvent');
  SDL_WaitEventTimeout := GetProcAddress(aDLLHandle, 'SDL_WaitEventTimeout');
  SDL_WaitForGPUFences := GetProcAddress(aDLLHandle, 'SDL_WaitForGPUFences');
  SDL_WaitForGPUIdle := GetProcAddress(aDLLHandle, 'SDL_WaitForGPUIdle');
  SDL_WaitForGPUSwapchain := GetProcAddress(aDLLHandle, 'SDL_WaitForGPUSwapchain');
  SDL_WaitProcess := GetProcAddress(aDLLHandle, 'SDL_WaitProcess');
  SDL_WaitSemaphore := GetProcAddress(aDLLHandle, 'SDL_WaitSemaphore');
  SDL_WaitSemaphoreTimeout := GetProcAddress(aDLLHandle, 'SDL_WaitSemaphoreTimeout');
  SDL_WaitThread := GetProcAddress(aDLLHandle, 'SDL_WaitThread');
  SDL_WarpMouseGlobal := GetProcAddress(aDLLHandle, 'SDL_WarpMouseGlobal');
  SDL_WarpMouseInWindow := GetProcAddress(aDLLHandle, 'SDL_WarpMouseInWindow');
  SDL_WasInit := GetProcAddress(aDLLHandle, 'SDL_WasInit');
  SDL_wcscasecmp := GetProcAddress(aDLLHandle, 'SDL_wcscasecmp');
  SDL_wcscmp := GetProcAddress(aDLLHandle, 'SDL_wcscmp');
  SDL_wcsdup := GetProcAddress(aDLLHandle, 'SDL_wcsdup');
  SDL_wcslcat := GetProcAddress(aDLLHandle, 'SDL_wcslcat');
  SDL_wcslcpy := GetProcAddress(aDLLHandle, 'SDL_wcslcpy');
  SDL_wcslen := GetProcAddress(aDLLHandle, 'SDL_wcslen');
  SDL_wcsncasecmp := GetProcAddress(aDLLHandle, 'SDL_wcsncasecmp');
  SDL_wcsncmp := GetProcAddress(aDLLHandle, 'SDL_wcsncmp');
  SDL_wcsnlen := GetProcAddress(aDLLHandle, 'SDL_wcsnlen');
  SDL_wcsnstr := GetProcAddress(aDLLHandle, 'SDL_wcsnstr');
  SDL_wcsstr := GetProcAddress(aDLLHandle, 'SDL_wcsstr');
  SDL_wcstol := GetProcAddress(aDLLHandle, 'SDL_wcstol');
  SDL_WindowHasSurface := GetProcAddress(aDLLHandle, 'SDL_WindowHasSurface');
  SDL_WindowSupportsGPUPresentMode := GetProcAddress(aDLLHandle, 'SDL_WindowSupportsGPUPresentMode');
  SDL_WindowSupportsGPUSwapchainComposition := GetProcAddress(aDLLHandle, 'SDL_WindowSupportsGPUSwapchainComposition');
  SDL_WriteAsyncIO := GetProcAddress(aDLLHandle, 'SDL_WriteAsyncIO');
  SDL_WriteIO := GetProcAddress(aDLLHandle, 'SDL_WriteIO');
  SDL_WriteS16BE := GetProcAddress(aDLLHandle, 'SDL_WriteS16BE');
  SDL_WriteS16LE := GetProcAddress(aDLLHandle, 'SDL_WriteS16LE');
  SDL_WriteS32BE := GetProcAddress(aDLLHandle, 'SDL_WriteS32BE');
  SDL_WriteS32LE := GetProcAddress(aDLLHandle, 'SDL_WriteS32LE');
  SDL_WriteS64BE := GetProcAddress(aDLLHandle, 'SDL_WriteS64BE');
  SDL_WriteS64LE := GetProcAddress(aDLLHandle, 'SDL_WriteS64LE');
  SDL_WriteS8 := GetProcAddress(aDLLHandle, 'SDL_WriteS8');
  SDL_WriteStorageFile := GetProcAddress(aDLLHandle, 'SDL_WriteStorageFile');
  SDL_WriteSurfacePixel := GetProcAddress(aDLLHandle, 'SDL_WriteSurfacePixel');
  SDL_WriteSurfacePixelFloat := GetProcAddress(aDLLHandle, 'SDL_WriteSurfacePixelFloat');
  SDL_WriteU16BE := GetProcAddress(aDLLHandle, 'SDL_WriteU16BE');
  SDL_WriteU16LE := GetProcAddress(aDLLHandle, 'SDL_WriteU16LE');
  SDL_WriteU32BE := GetProcAddress(aDLLHandle, 'SDL_WriteU32BE');
  SDL_WriteU32LE := GetProcAddress(aDLLHandle, 'SDL_WriteU32LE');
  SDL_WriteU64BE := GetProcAddress(aDLLHandle, 'SDL_WriteU64BE');
  SDL_WriteU64LE := GetProcAddress(aDLLHandle, 'SDL_WriteU64LE');
  SDL_WriteU8 := GetProcAddress(aDLLHandle, 'SDL_WriteU8');
  SDLNet_AcceptClient := GetProcAddress(aDLLHandle, 'SDLNet_AcceptClient');
  SDLNet_CompareAddresses := GetProcAddress(aDLLHandle, 'SDLNet_CompareAddresses');
  SDLNet_CreateClient := GetProcAddress(aDLLHandle, 'SDLNet_CreateClient');
  SDLNet_CreateDatagramSocket := GetProcAddress(aDLLHandle, 'SDLNet_CreateDatagramSocket');
  SDLNet_CreateServer := GetProcAddress(aDLLHandle, 'SDLNet_CreateServer');
  SDLNet_DestroyDatagram := GetProcAddress(aDLLHandle, 'SDLNet_DestroyDatagram');
  SDLNet_DestroyDatagramSocket := GetProcAddress(aDLLHandle, 'SDLNet_DestroyDatagramSocket');
  SDLNet_DestroyServer := GetProcAddress(aDLLHandle, 'SDLNet_DestroyServer');
  SDLNet_DestroyStreamSocket := GetProcAddress(aDLLHandle, 'SDLNet_DestroyStreamSocket');
  SDLNet_FreeLocalAddresses := GetProcAddress(aDLLHandle, 'SDLNet_FreeLocalAddresses');
  SDLNet_GetAddressStatus := GetProcAddress(aDLLHandle, 'SDLNet_GetAddressStatus');
  SDLNet_GetAddressString := GetProcAddress(aDLLHandle, 'SDLNet_GetAddressString');
  SDLNet_GetConnectionStatus := GetProcAddress(aDLLHandle, 'SDLNet_GetConnectionStatus');
  SDLNet_GetLocalAddresses := GetProcAddress(aDLLHandle, 'SDLNet_GetLocalAddresses');
  SDLNet_GetStreamSocketAddress := GetProcAddress(aDLLHandle, 'SDLNet_GetStreamSocketAddress');
  SDLNet_GetStreamSocketPendingWrites := GetProcAddress(aDLLHandle, 'SDLNet_GetStreamSocketPendingWrites');
  SDLNet_Init := GetProcAddress(aDLLHandle, 'SDLNet_Init');
  SDLNet_Quit := GetProcAddress(aDLLHandle, 'SDLNet_Quit');
  SDLNet_ReadFromStreamSocket := GetProcAddress(aDLLHandle, 'SDLNet_ReadFromStreamSocket');
  SDLNet_ReceiveDatagram := GetProcAddress(aDLLHandle, 'SDLNet_ReceiveDatagram');
  SDLNet_RefAddress := GetProcAddress(aDLLHandle, 'SDLNet_RefAddress');
  SDLNet_ResolveHostname := GetProcAddress(aDLLHandle, 'SDLNet_ResolveHostname');
  SDLNet_SendDatagram := GetProcAddress(aDLLHandle, 'SDLNet_SendDatagram');
  SDLNet_SimulateAddressResolutionLoss := GetProcAddress(aDLLHandle, 'SDLNet_SimulateAddressResolutionLoss');
  SDLNet_SimulateDatagramPacketLoss := GetProcAddress(aDLLHandle, 'SDLNet_SimulateDatagramPacketLoss');
  SDLNet_SimulateStreamPacketLoss := GetProcAddress(aDLLHandle, 'SDLNet_SimulateStreamPacketLoss');
  SDLNet_UnrefAddress := GetProcAddress(aDLLHandle, 'SDLNet_UnrefAddress');
  SDLNet_Version := GetProcAddress(aDLLHandle, 'SDLNet_Version');
  SDLNet_WaitUntilConnected := GetProcAddress(aDLLHandle, 'SDLNet_WaitUntilConnected');
  SDLNet_WaitUntilInputAvailable := GetProcAddress(aDLLHandle, 'SDLNet_WaitUntilInputAvailable');
  SDLNet_WaitUntilResolved := GetProcAddress(aDLLHandle, 'SDLNet_WaitUntilResolved');
  SDLNet_WaitUntilStreamSocketDrained := GetProcAddress(aDLLHandle, 'SDLNet_WaitUntilStreamSocketDrained');
  SDLNet_WriteToStreamSocket := GetProcAddress(aDLLHandle, 'SDLNet_WriteToStreamSocket');
  spAlphaTimeline_create := GetProcAddress(aDLLHandle, 'spAlphaTimeline_create');
  spAlphaTimeline_setFrame := GetProcAddress(aDLLHandle, 'spAlphaTimeline_setFrame');
  spAnimation_apply := GetProcAddress(aDLLHandle, 'spAnimation_apply');
  spAnimation_create := GetProcAddress(aDLLHandle, 'spAnimation_create');
  spAnimation_dispose := GetProcAddress(aDLLHandle, 'spAnimation_dispose');
  spAnimation_hasTimeline := GetProcAddress(aDLLHandle, 'spAnimation_hasTimeline');
  spAnimationState_addAnimation := GetProcAddress(aDLLHandle, 'spAnimationState_addAnimation');
  spAnimationState_addAnimationByName := GetProcAddress(aDLLHandle, 'spAnimationState_addAnimationByName');
  spAnimationState_addEmptyAnimation := GetProcAddress(aDLLHandle, 'spAnimationState_addEmptyAnimation');
  spAnimationState_apply := GetProcAddress(aDLLHandle, 'spAnimationState_apply');
  spAnimationState_clearListenerNotifications := GetProcAddress(aDLLHandle, 'spAnimationState_clearListenerNotifications');
  spAnimationState_clearNext := GetProcAddress(aDLLHandle, 'spAnimationState_clearNext');
  spAnimationState_clearTrack := GetProcAddress(aDLLHandle, 'spAnimationState_clearTrack');
  spAnimationState_clearTracks := GetProcAddress(aDLLHandle, 'spAnimationState_clearTracks');
  spAnimationState_create := GetProcAddress(aDLLHandle, 'spAnimationState_create');
  spAnimationState_dispose := GetProcAddress(aDLLHandle, 'spAnimationState_dispose');
  spAnimationState_disposeStatics := GetProcAddress(aDLLHandle, 'spAnimationState_disposeStatics');
  spAnimationState_getCurrent := GetProcAddress(aDLLHandle, 'spAnimationState_getCurrent');
  spAnimationState_setAnimation := GetProcAddress(aDLLHandle, 'spAnimationState_setAnimation');
  spAnimationState_setAnimationByName := GetProcAddress(aDLLHandle, 'spAnimationState_setAnimationByName');
  spAnimationState_setEmptyAnimation := GetProcAddress(aDLLHandle, 'spAnimationState_setEmptyAnimation');
  spAnimationState_setEmptyAnimations := GetProcAddress(aDLLHandle, 'spAnimationState_setEmptyAnimations');
  spAnimationState_update := GetProcAddress(aDLLHandle, 'spAnimationState_update');
  spAnimationStateData_create := GetProcAddress(aDLLHandle, 'spAnimationStateData_create');
  spAnimationStateData_dispose := GetProcAddress(aDLLHandle, 'spAnimationStateData_dispose');
  spAnimationStateData_getMix := GetProcAddress(aDLLHandle, 'spAnimationStateData_getMix');
  spAnimationStateData_setMix := GetProcAddress(aDLLHandle, 'spAnimationStateData_setMix');
  spAnimationStateData_setMixByName := GetProcAddress(aDLLHandle, 'spAnimationStateData_setMixByName');
  spArrayFloatArray_add := GetProcAddress(aDLLHandle, 'spArrayFloatArray_add');
  spArrayFloatArray_addAll := GetProcAddress(aDLLHandle, 'spArrayFloatArray_addAll');
  spArrayFloatArray_addAllValues := GetProcAddress(aDLLHandle, 'spArrayFloatArray_addAllValues');
  spArrayFloatArray_clear := GetProcAddress(aDLLHandle, 'spArrayFloatArray_clear');
  spArrayFloatArray_contains := GetProcAddress(aDLLHandle, 'spArrayFloatArray_contains');
  spArrayFloatArray_create := GetProcAddress(aDLLHandle, 'spArrayFloatArray_create');
  spArrayFloatArray_dispose := GetProcAddress(aDLLHandle, 'spArrayFloatArray_dispose');
  spArrayFloatArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spArrayFloatArray_ensureCapacity');
  spArrayFloatArray_peek := GetProcAddress(aDLLHandle, 'spArrayFloatArray_peek');
  spArrayFloatArray_pop := GetProcAddress(aDLLHandle, 'spArrayFloatArray_pop');
  spArrayFloatArray_removeAt := GetProcAddress(aDLLHandle, 'spArrayFloatArray_removeAt');
  spArrayFloatArray_setSize := GetProcAddress(aDLLHandle, 'spArrayFloatArray_setSize');
  spArrayShortArray_add := GetProcAddress(aDLLHandle, 'spArrayShortArray_add');
  spArrayShortArray_addAll := GetProcAddress(aDLLHandle, 'spArrayShortArray_addAll');
  spArrayShortArray_addAllValues := GetProcAddress(aDLLHandle, 'spArrayShortArray_addAllValues');
  spArrayShortArray_clear := GetProcAddress(aDLLHandle, 'spArrayShortArray_clear');
  spArrayShortArray_contains := GetProcAddress(aDLLHandle, 'spArrayShortArray_contains');
  spArrayShortArray_create := GetProcAddress(aDLLHandle, 'spArrayShortArray_create');
  spArrayShortArray_dispose := GetProcAddress(aDLLHandle, 'spArrayShortArray_dispose');
  spArrayShortArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spArrayShortArray_ensureCapacity');
  spArrayShortArray_peek := GetProcAddress(aDLLHandle, 'spArrayShortArray_peek');
  spArrayShortArray_pop := GetProcAddress(aDLLHandle, 'spArrayShortArray_pop');
  spArrayShortArray_removeAt := GetProcAddress(aDLLHandle, 'spArrayShortArray_removeAt');
  spArrayShortArray_setSize := GetProcAddress(aDLLHandle, 'spArrayShortArray_setSize');
  spAtlas_create := GetProcAddress(aDLLHandle, 'spAtlas_create');
  spAtlas_createFromFile := GetProcAddress(aDLLHandle, 'spAtlas_createFromFile');
  spAtlas_dispose := GetProcAddress(aDLLHandle, 'spAtlas_dispose');
  spAtlas_findRegion := GetProcAddress(aDLLHandle, 'spAtlas_findRegion');
  spAtlasAttachmentLoader_create := GetProcAddress(aDLLHandle, 'spAtlasAttachmentLoader_create');
  spAtlasPage_create := GetProcAddress(aDLLHandle, 'spAtlasPage_create');
  spAtlasPage_dispose := GetProcAddress(aDLLHandle, 'spAtlasPage_dispose');
  spAtlasRegion_create := GetProcAddress(aDLLHandle, 'spAtlasRegion_create');
  spAtlasRegion_dispose := GetProcAddress(aDLLHandle, 'spAtlasRegion_dispose');
  spAttachment_copy := GetProcAddress(aDLLHandle, 'spAttachment_copy');
  spAttachment_dispose := GetProcAddress(aDLLHandle, 'spAttachment_dispose');
  spAttachmentLoader_configureAttachment := GetProcAddress(aDLLHandle, 'spAttachmentLoader_configureAttachment');
  spAttachmentLoader_createAttachment := GetProcAddress(aDLLHandle, 'spAttachmentLoader_createAttachment');
  spAttachmentLoader_dispose := GetProcAddress(aDLLHandle, 'spAttachmentLoader_dispose');
  spAttachmentLoader_disposeAttachment := GetProcAddress(aDLLHandle, 'spAttachmentLoader_disposeAttachment');
  spAttachmentTimeline_create := GetProcAddress(aDLLHandle, 'spAttachmentTimeline_create');
  spAttachmentTimeline_setFrame := GetProcAddress(aDLLHandle, 'spAttachmentTimeline_setFrame');
  spBone_create := GetProcAddress(aDLLHandle, 'spBone_create');
  spBone_dispose := GetProcAddress(aDLLHandle, 'spBone_dispose');
  spBone_getWorldRotationX := GetProcAddress(aDLLHandle, 'spBone_getWorldRotationX');
  spBone_getWorldRotationY := GetProcAddress(aDLLHandle, 'spBone_getWorldRotationY');
  spBone_getWorldScaleX := GetProcAddress(aDLLHandle, 'spBone_getWorldScaleX');
  spBone_getWorldScaleY := GetProcAddress(aDLLHandle, 'spBone_getWorldScaleY');
  spBone_isYDown := GetProcAddress(aDLLHandle, 'spBone_isYDown');
  spBone_localToParent := GetProcAddress(aDLLHandle, 'spBone_localToParent');
  spBone_localToWorld := GetProcAddress(aDLLHandle, 'spBone_localToWorld');
  spBone_localToWorldRotation := GetProcAddress(aDLLHandle, 'spBone_localToWorldRotation');
  spBone_rotateWorld := GetProcAddress(aDLLHandle, 'spBone_rotateWorld');
  spBone_setToSetupPose := GetProcAddress(aDLLHandle, 'spBone_setToSetupPose');
  spBone_setYDown := GetProcAddress(aDLLHandle, 'spBone_setYDown');
  spBone_update := GetProcAddress(aDLLHandle, 'spBone_update');
  spBone_updateAppliedTransform := GetProcAddress(aDLLHandle, 'spBone_updateAppliedTransform');
  spBone_updateWorldTransform := GetProcAddress(aDLLHandle, 'spBone_updateWorldTransform');
  spBone_updateWorldTransformWith := GetProcAddress(aDLLHandle, 'spBone_updateWorldTransformWith');
  spBone_worldToLocal := GetProcAddress(aDLLHandle, 'spBone_worldToLocal');
  spBone_worldToLocalRotation := GetProcAddress(aDLLHandle, 'spBone_worldToLocalRotation');
  spBone_worldToParent := GetProcAddress(aDLLHandle, 'spBone_worldToParent');
  spBoneData_create := GetProcAddress(aDLLHandle, 'spBoneData_create');
  spBoneData_dispose := GetProcAddress(aDLLHandle, 'spBoneData_dispose');
  spBoneDataArray_add := GetProcAddress(aDLLHandle, 'spBoneDataArray_add');
  spBoneDataArray_addAll := GetProcAddress(aDLLHandle, 'spBoneDataArray_addAll');
  spBoneDataArray_addAllValues := GetProcAddress(aDLLHandle, 'spBoneDataArray_addAllValues');
  spBoneDataArray_clear := GetProcAddress(aDLLHandle, 'spBoneDataArray_clear');
  spBoneDataArray_contains := GetProcAddress(aDLLHandle, 'spBoneDataArray_contains');
  spBoneDataArray_create := GetProcAddress(aDLLHandle, 'spBoneDataArray_create');
  spBoneDataArray_dispose := GetProcAddress(aDLLHandle, 'spBoneDataArray_dispose');
  spBoneDataArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spBoneDataArray_ensureCapacity');
  spBoneDataArray_peek := GetProcAddress(aDLLHandle, 'spBoneDataArray_peek');
  spBoneDataArray_pop := GetProcAddress(aDLLHandle, 'spBoneDataArray_pop');
  spBoneDataArray_removeAt := GetProcAddress(aDLLHandle, 'spBoneDataArray_removeAt');
  spBoneDataArray_setSize := GetProcAddress(aDLLHandle, 'spBoneDataArray_setSize');
  spBoundingBoxAttachment_create := GetProcAddress(aDLLHandle, 'spBoundingBoxAttachment_create');
  spClippingAttachment_create := GetProcAddress(aDLLHandle, 'spClippingAttachment_create');
  spColor_addColor := GetProcAddress(aDLLHandle, 'spColor_addColor');
  spColor_addFloats := GetProcAddress(aDLLHandle, 'spColor_addFloats');
  spColor_addFloats3 := GetProcAddress(aDLLHandle, 'spColor_addFloats3');
  spColor_clamp := GetProcAddress(aDLLHandle, 'spColor_clamp');
  spColor_create := GetProcAddress(aDLLHandle, 'spColor_create');
  spColor_dispose := GetProcAddress(aDLLHandle, 'spColor_dispose');
  spColor_setFromColor := GetProcAddress(aDLLHandle, 'spColor_setFromColor');
  spColor_setFromColor3 := GetProcAddress(aDLLHandle, 'spColor_setFromColor3');
  spColor_setFromFloats := GetProcAddress(aDLLHandle, 'spColor_setFromFloats');
  spColor_setFromFloats3 := GetProcAddress(aDLLHandle, 'spColor_setFromFloats3');
  spCurveTimeline_getCurvePercent := GetProcAddress(aDLLHandle, 'spCurveTimeline_getCurvePercent');
  spCurveTimeline_setCurve := GetProcAddress(aDLLHandle, 'spCurveTimeline_setCurve');
  spCurveTimeline_setLinear := GetProcAddress(aDLLHandle, 'spCurveTimeline_setLinear');
  spCurveTimeline_setStepped := GetProcAddress(aDLLHandle, 'spCurveTimeline_setStepped');
  spCurveTimeline1_getAbsoluteValue := GetProcAddress(aDLLHandle, 'spCurveTimeline1_getAbsoluteValue');
  spCurveTimeline1_getAbsoluteValue2 := GetProcAddress(aDLLHandle, 'spCurveTimeline1_getAbsoluteValue2');
  spCurveTimeline1_getCurveValue := GetProcAddress(aDLLHandle, 'spCurveTimeline1_getCurveValue');
  spCurveTimeline1_getRelativeValue := GetProcAddress(aDLLHandle, 'spCurveTimeline1_getRelativeValue');
  spCurveTimeline1_getScaleValue := GetProcAddress(aDLLHandle, 'spCurveTimeline1_getScaleValue');
  spCurveTimeline1_setFrame := GetProcAddress(aDLLHandle, 'spCurveTimeline1_setFrame');
  spCurveTimeline2_setFrame := GetProcAddress(aDLLHandle, 'spCurveTimeline2_setFrame');
  spDeformTimeline_create := GetProcAddress(aDLLHandle, 'spDeformTimeline_create');
  spDeformTimeline_setFrame := GetProcAddress(aDLLHandle, 'spDeformTimeline_setFrame');
  spDrawOrderTimeline_create := GetProcAddress(aDLLHandle, 'spDrawOrderTimeline_create');
  spDrawOrderTimeline_setFrame := GetProcAddress(aDLLHandle, 'spDrawOrderTimeline_setFrame');
  spEvent_create := GetProcAddress(aDLLHandle, 'spEvent_create');
  spEvent_dispose := GetProcAddress(aDLLHandle, 'spEvent_dispose');
  spEventData_create := GetProcAddress(aDLLHandle, 'spEventData_create');
  spEventData_dispose := GetProcAddress(aDLLHandle, 'spEventData_dispose');
  spEventTimeline_create := GetProcAddress(aDLLHandle, 'spEventTimeline_create');
  spEventTimeline_setFrame := GetProcAddress(aDLLHandle, 'spEventTimeline_setFrame');
  spFloatArray_add := GetProcAddress(aDLLHandle, 'spFloatArray_add');
  spFloatArray_addAll := GetProcAddress(aDLLHandle, 'spFloatArray_addAll');
  spFloatArray_addAllValues := GetProcAddress(aDLLHandle, 'spFloatArray_addAllValues');
  spFloatArray_clear := GetProcAddress(aDLLHandle, 'spFloatArray_clear');
  spFloatArray_contains := GetProcAddress(aDLLHandle, 'spFloatArray_contains');
  spFloatArray_create := GetProcAddress(aDLLHandle, 'spFloatArray_create');
  spFloatArray_dispose := GetProcAddress(aDLLHandle, 'spFloatArray_dispose');
  spFloatArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spFloatArray_ensureCapacity');
  spFloatArray_peek := GetProcAddress(aDLLHandle, 'spFloatArray_peek');
  spFloatArray_pop := GetProcAddress(aDLLHandle, 'spFloatArray_pop');
  spFloatArray_removeAt := GetProcAddress(aDLLHandle, 'spFloatArray_removeAt');
  spFloatArray_setSize := GetProcAddress(aDLLHandle, 'spFloatArray_setSize');
  spIkConstraint_apply1 := GetProcAddress(aDLLHandle, 'spIkConstraint_apply1');
  spIkConstraint_apply2 := GetProcAddress(aDLLHandle, 'spIkConstraint_apply2');
  spIkConstraint_create := GetProcAddress(aDLLHandle, 'spIkConstraint_create');
  spIkConstraint_dispose := GetProcAddress(aDLLHandle, 'spIkConstraint_dispose');
  spIkConstraint_setToSetupPose := GetProcAddress(aDLLHandle, 'spIkConstraint_setToSetupPose');
  spIkConstraint_update := GetProcAddress(aDLLHandle, 'spIkConstraint_update');
  spIkConstraintData_create := GetProcAddress(aDLLHandle, 'spIkConstraintData_create');
  spIkConstraintData_dispose := GetProcAddress(aDLLHandle, 'spIkConstraintData_dispose');
  spIkConstraintDataArray_add := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_add');
  spIkConstraintDataArray_addAll := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_addAll');
  spIkConstraintDataArray_addAllValues := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_addAllValues');
  spIkConstraintDataArray_clear := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_clear');
  spIkConstraintDataArray_contains := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_contains');
  spIkConstraintDataArray_create := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_create');
  spIkConstraintDataArray_dispose := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_dispose');
  spIkConstraintDataArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_ensureCapacity');
  spIkConstraintDataArray_peek := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_peek');
  spIkConstraintDataArray_pop := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_pop');
  spIkConstraintDataArray_removeAt := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_removeAt');
  spIkConstraintDataArray_setSize := GetProcAddress(aDLLHandle, 'spIkConstraintDataArray_setSize');
  spIkConstraintTimeline_create := GetProcAddress(aDLLHandle, 'spIkConstraintTimeline_create');
  spIkConstraintTimeline_setFrame := GetProcAddress(aDLLHandle, 'spIkConstraintTimeline_setFrame');
  spInheritTimeline_create := GetProcAddress(aDLLHandle, 'spInheritTimeline_create');
  spInheritTimeline_setFrame := GetProcAddress(aDLLHandle, 'spInheritTimeline_setFrame');
  spIntArray_add := GetProcAddress(aDLLHandle, 'spIntArray_add');
  spIntArray_addAll := GetProcAddress(aDLLHandle, 'spIntArray_addAll');
  spIntArray_addAllValues := GetProcAddress(aDLLHandle, 'spIntArray_addAllValues');
  spIntArray_clear := GetProcAddress(aDLLHandle, 'spIntArray_clear');
  spIntArray_contains := GetProcAddress(aDLLHandle, 'spIntArray_contains');
  spIntArray_create := GetProcAddress(aDLLHandle, 'spIntArray_create');
  spIntArray_dispose := GetProcAddress(aDLLHandle, 'spIntArray_dispose');
  spIntArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spIntArray_ensureCapacity');
  spIntArray_peek := GetProcAddress(aDLLHandle, 'spIntArray_peek');
  spIntArray_pop := GetProcAddress(aDLLHandle, 'spIntArray_pop');
  spIntArray_removeAt := GetProcAddress(aDLLHandle, 'spIntArray_removeAt');
  spIntArray_setSize := GetProcAddress(aDLLHandle, 'spIntArray_setSize');
  spKeyValueArray_add := GetProcAddress(aDLLHandle, 'spKeyValueArray_add');
  spKeyValueArray_addAll := GetProcAddress(aDLLHandle, 'spKeyValueArray_addAll');
  spKeyValueArray_addAllValues := GetProcAddress(aDLLHandle, 'spKeyValueArray_addAllValues');
  spKeyValueArray_clear := GetProcAddress(aDLLHandle, 'spKeyValueArray_clear');
  spKeyValueArray_contains := GetProcAddress(aDLLHandle, 'spKeyValueArray_contains');
  spKeyValueArray_create := GetProcAddress(aDLLHandle, 'spKeyValueArray_create');
  spKeyValueArray_dispose := GetProcAddress(aDLLHandle, 'spKeyValueArray_dispose');
  spKeyValueArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spKeyValueArray_ensureCapacity');
  spKeyValueArray_peek := GetProcAddress(aDLLHandle, 'spKeyValueArray_peek');
  spKeyValueArray_pop := GetProcAddress(aDLLHandle, 'spKeyValueArray_pop');
  spKeyValueArray_removeAt := GetProcAddress(aDLLHandle, 'spKeyValueArray_removeAt');
  spKeyValueArray_setSize := GetProcAddress(aDLLHandle, 'spKeyValueArray_setSize');
  spMeshAttachment_create := GetProcAddress(aDLLHandle, 'spMeshAttachment_create');
  spMeshAttachment_newLinkedMesh := GetProcAddress(aDLLHandle, 'spMeshAttachment_newLinkedMesh');
  spMeshAttachment_setParentMesh := GetProcAddress(aDLLHandle, 'spMeshAttachment_setParentMesh');
  spMeshAttachment_updateRegion := GetProcAddress(aDLLHandle, 'spMeshAttachment_updateRegion');
  spPathAttachment_create := GetProcAddress(aDLLHandle, 'spPathAttachment_create');
  spPathConstraint_computeWorldPositions := GetProcAddress(aDLLHandle, 'spPathConstraint_computeWorldPositions');
  spPathConstraint_create := GetProcAddress(aDLLHandle, 'spPathConstraint_create');
  spPathConstraint_dispose := GetProcAddress(aDLLHandle, 'spPathConstraint_dispose');
  spPathConstraint_setToSetupPose := GetProcAddress(aDLLHandle, 'spPathConstraint_setToSetupPose');
  spPathConstraint_update := GetProcAddress(aDLLHandle, 'spPathConstraint_update');
  spPathConstraintData_create := GetProcAddress(aDLLHandle, 'spPathConstraintData_create');
  spPathConstraintData_dispose := GetProcAddress(aDLLHandle, 'spPathConstraintData_dispose');
  spPathConstraintDataArray_add := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_add');
  spPathConstraintDataArray_addAll := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_addAll');
  spPathConstraintDataArray_addAllValues := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_addAllValues');
  spPathConstraintDataArray_clear := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_clear');
  spPathConstraintDataArray_contains := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_contains');
  spPathConstraintDataArray_create := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_create');
  spPathConstraintDataArray_dispose := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_dispose');
  spPathConstraintDataArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_ensureCapacity');
  spPathConstraintDataArray_peek := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_peek');
  spPathConstraintDataArray_pop := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_pop');
  spPathConstraintDataArray_removeAt := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_removeAt');
  spPathConstraintDataArray_setSize := GetProcAddress(aDLLHandle, 'spPathConstraintDataArray_setSize');
  spPathConstraintMixTimeline_create := GetProcAddress(aDLLHandle, 'spPathConstraintMixTimeline_create');
  spPathConstraintMixTimeline_setFrame := GetProcAddress(aDLLHandle, 'spPathConstraintMixTimeline_setFrame');
  spPathConstraintPositionTimeline_create := GetProcAddress(aDLLHandle, 'spPathConstraintPositionTimeline_create');
  spPathConstraintPositionTimeline_setFrame := GetProcAddress(aDLLHandle, 'spPathConstraintPositionTimeline_setFrame');
  spPathConstraintSpacingTimeline_create := GetProcAddress(aDLLHandle, 'spPathConstraintSpacingTimeline_create');
  spPathConstraintSpacingTimeline_setFrame := GetProcAddress(aDLLHandle, 'spPathConstraintSpacingTimeline_setFrame');
  spPhysicsConstraint_create := GetProcAddress(aDLLHandle, 'spPhysicsConstraint_create');
  spPhysicsConstraint_dispose := GetProcAddress(aDLLHandle, 'spPhysicsConstraint_dispose');
  spPhysicsConstraint_reset := GetProcAddress(aDLLHandle, 'spPhysicsConstraint_reset');
  spPhysicsConstraint_rotate := GetProcAddress(aDLLHandle, 'spPhysicsConstraint_rotate');
  spPhysicsConstraint_setToSetupPose := GetProcAddress(aDLLHandle, 'spPhysicsConstraint_setToSetupPose');
  spPhysicsConstraint_translate := GetProcAddress(aDLLHandle, 'spPhysicsConstraint_translate');
  spPhysicsConstraint_update := GetProcAddress(aDLLHandle, 'spPhysicsConstraint_update');
  spPhysicsConstraintData_create := GetProcAddress(aDLLHandle, 'spPhysicsConstraintData_create');
  spPhysicsConstraintData_dispose := GetProcAddress(aDLLHandle, 'spPhysicsConstraintData_dispose');
  spPhysicsConstraintDataArray_add := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_add');
  spPhysicsConstraintDataArray_addAll := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_addAll');
  spPhysicsConstraintDataArray_addAllValues := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_addAllValues');
  spPhysicsConstraintDataArray_clear := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_clear');
  spPhysicsConstraintDataArray_contains := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_contains');
  spPhysicsConstraintDataArray_create := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_create');
  spPhysicsConstraintDataArray_dispose := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_dispose');
  spPhysicsConstraintDataArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_ensureCapacity');
  spPhysicsConstraintDataArray_peek := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_peek');
  spPhysicsConstraintDataArray_pop := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_pop');
  spPhysicsConstraintDataArray_removeAt := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_removeAt');
  spPhysicsConstraintDataArray_setSize := GetProcAddress(aDLLHandle, 'spPhysicsConstraintDataArray_setSize');
  spPhysicsConstraintResetTimeline_create := GetProcAddress(aDLLHandle, 'spPhysicsConstraintResetTimeline_create');
  spPhysicsConstraintResetTimeline_setFrame := GetProcAddress(aDLLHandle, 'spPhysicsConstraintResetTimeline_setFrame');
  spPhysicsConstraintTimeline_create := GetProcAddress(aDLLHandle, 'spPhysicsConstraintTimeline_create');
  spPhysicsConstraintTimeline_setFrame := GetProcAddress(aDLLHandle, 'spPhysicsConstraintTimeline_setFrame');
  spPointAttachment_computeWorldPosition := GetProcAddress(aDLLHandle, 'spPointAttachment_computeWorldPosition');
  spPointAttachment_computeWorldRotation := GetProcAddress(aDLLHandle, 'spPointAttachment_computeWorldRotation');
  spPointAttachment_create := GetProcAddress(aDLLHandle, 'spPointAttachment_create');
  spPolygon_containsPoint := GetProcAddress(aDLLHandle, 'spPolygon_containsPoint');
  spPolygon_create := GetProcAddress(aDLLHandle, 'spPolygon_create');
  spPolygon_dispose := GetProcAddress(aDLLHandle, 'spPolygon_dispose');
  spPolygon_intersectsSegment := GetProcAddress(aDLLHandle, 'spPolygon_intersectsSegment');
  spPropertyIdArray_add := GetProcAddress(aDLLHandle, 'spPropertyIdArray_add');
  spPropertyIdArray_addAll := GetProcAddress(aDLLHandle, 'spPropertyIdArray_addAll');
  spPropertyIdArray_addAllValues := GetProcAddress(aDLLHandle, 'spPropertyIdArray_addAllValues');
  spPropertyIdArray_clear := GetProcAddress(aDLLHandle, 'spPropertyIdArray_clear');
  spPropertyIdArray_contains := GetProcAddress(aDLLHandle, 'spPropertyIdArray_contains');
  spPropertyIdArray_create := GetProcAddress(aDLLHandle, 'spPropertyIdArray_create');
  spPropertyIdArray_dispose := GetProcAddress(aDLLHandle, 'spPropertyIdArray_dispose');
  spPropertyIdArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spPropertyIdArray_ensureCapacity');
  spPropertyIdArray_peek := GetProcAddress(aDLLHandle, 'spPropertyIdArray_peek');
  spPropertyIdArray_pop := GetProcAddress(aDLLHandle, 'spPropertyIdArray_pop');
  spPropertyIdArray_removeAt := GetProcAddress(aDLLHandle, 'spPropertyIdArray_removeAt');
  spPropertyIdArray_setSize := GetProcAddress(aDLLHandle, 'spPropertyIdArray_setSize');
  spRegionAttachment_computeWorldVertices := GetProcAddress(aDLLHandle, 'spRegionAttachment_computeWorldVertices');
  spRegionAttachment_create := GetProcAddress(aDLLHandle, 'spRegionAttachment_create');
  spRegionAttachment_updateRegion := GetProcAddress(aDLLHandle, 'spRegionAttachment_updateRegion');
  spRGB2Timeline_create := GetProcAddress(aDLLHandle, 'spRGB2Timeline_create');
  spRGB2Timeline_setFrame := GetProcAddress(aDLLHandle, 'spRGB2Timeline_setFrame');
  spRGBA2Timeline_create := GetProcAddress(aDLLHandle, 'spRGBA2Timeline_create');
  spRGBA2Timeline_setFrame := GetProcAddress(aDLLHandle, 'spRGBA2Timeline_setFrame');
  spRGBATimeline_create := GetProcAddress(aDLLHandle, 'spRGBATimeline_create');
  spRGBATimeline_setFrame := GetProcAddress(aDLLHandle, 'spRGBATimeline_setFrame');
  spRGBTimeline_create := GetProcAddress(aDLLHandle, 'spRGBTimeline_create');
  spRGBTimeline_setFrame := GetProcAddress(aDLLHandle, 'spRGBTimeline_setFrame');
  spRotateTimeline_create := GetProcAddress(aDLLHandle, 'spRotateTimeline_create');
  spRotateTimeline_setFrame := GetProcAddress(aDLLHandle, 'spRotateTimeline_setFrame');
  spScaleTimeline_create := GetProcAddress(aDLLHandle, 'spScaleTimeline_create');
  spScaleTimeline_setFrame := GetProcAddress(aDLLHandle, 'spScaleTimeline_setFrame');
  spScaleXTimeline_create := GetProcAddress(aDLLHandle, 'spScaleXTimeline_create');
  spScaleXTimeline_setFrame := GetProcAddress(aDLLHandle, 'spScaleXTimeline_setFrame');
  spScaleYTimeline_create := GetProcAddress(aDLLHandle, 'spScaleYTimeline_create');
  spScaleYTimeline_setFrame := GetProcAddress(aDLLHandle, 'spScaleYTimeline_setFrame');
  spSdlVertexArray_add := GetProcAddress(aDLLHandle, 'spSdlVertexArray_add');
  spSdlVertexArray_addAll := GetProcAddress(aDLLHandle, 'spSdlVertexArray_addAll');
  spSdlVertexArray_addAllValues := GetProcAddress(aDLLHandle, 'spSdlVertexArray_addAllValues');
  spSdlVertexArray_clear := GetProcAddress(aDLLHandle, 'spSdlVertexArray_clear');
  spSdlVertexArray_contains := GetProcAddress(aDLLHandle, 'spSdlVertexArray_contains');
  spSdlVertexArray_create := GetProcAddress(aDLLHandle, 'spSdlVertexArray_create');
  spSdlVertexArray_dispose := GetProcAddress(aDLLHandle, 'spSdlVertexArray_dispose');
  spSdlVertexArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spSdlVertexArray_ensureCapacity');
  spSdlVertexArray_peek := GetProcAddress(aDLLHandle, 'spSdlVertexArray_peek');
  spSdlVertexArray_pop := GetProcAddress(aDLLHandle, 'spSdlVertexArray_pop');
  spSdlVertexArray_removeAt := GetProcAddress(aDLLHandle, 'spSdlVertexArray_removeAt');
  spSdlVertexArray_setSize := GetProcAddress(aDLLHandle, 'spSdlVertexArray_setSize');
  spSequence_apply := GetProcAddress(aDLLHandle, 'spSequence_apply');
  spSequence_copy := GetProcAddress(aDLLHandle, 'spSequence_copy');
  spSequence_create := GetProcAddress(aDLLHandle, 'spSequence_create');
  spSequence_dispose := GetProcAddress(aDLLHandle, 'spSequence_dispose');
  spSequence_getPath := GetProcAddress(aDLLHandle, 'spSequence_getPath');
  spSequenceTimeline_create := GetProcAddress(aDLLHandle, 'spSequenceTimeline_create');
  spSequenceTimeline_setFrame := GetProcAddress(aDLLHandle, 'spSequenceTimeline_setFrame');
  spShearTimeline_create := GetProcAddress(aDLLHandle, 'spShearTimeline_create');
  spShearTimeline_setFrame := GetProcAddress(aDLLHandle, 'spShearTimeline_setFrame');
  spShearXTimeline_create := GetProcAddress(aDLLHandle, 'spShearXTimeline_create');
  spShearXTimeline_setFrame := GetProcAddress(aDLLHandle, 'spShearXTimeline_setFrame');
  spShearYTimeline_create := GetProcAddress(aDLLHandle, 'spShearYTimeline_create');
  spShearYTimeline_setFrame := GetProcAddress(aDLLHandle, 'spShearYTimeline_setFrame');
  spShortArray_add := GetProcAddress(aDLLHandle, 'spShortArray_add');
  spShortArray_addAll := GetProcAddress(aDLLHandle, 'spShortArray_addAll');
  spShortArray_addAllValues := GetProcAddress(aDLLHandle, 'spShortArray_addAllValues');
  spShortArray_clear := GetProcAddress(aDLLHandle, 'spShortArray_clear');
  spShortArray_contains := GetProcAddress(aDLLHandle, 'spShortArray_contains');
  spShortArray_create := GetProcAddress(aDLLHandle, 'spShortArray_create');
  spShortArray_dispose := GetProcAddress(aDLLHandle, 'spShortArray_dispose');
  spShortArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spShortArray_ensureCapacity');
  spShortArray_peek := GetProcAddress(aDLLHandle, 'spShortArray_peek');
  spShortArray_pop := GetProcAddress(aDLLHandle, 'spShortArray_pop');
  spShortArray_removeAt := GetProcAddress(aDLLHandle, 'spShortArray_removeAt');
  spShortArray_setSize := GetProcAddress(aDLLHandle, 'spShortArray_setSize');
  spSkeleton_create := GetProcAddress(aDLLHandle, 'spSkeleton_create');
  spSkeleton_dispose := GetProcAddress(aDLLHandle, 'spSkeleton_dispose');
  spSkeleton_findBone := GetProcAddress(aDLLHandle, 'spSkeleton_findBone');
  spSkeleton_findIkConstraint := GetProcAddress(aDLLHandle, 'spSkeleton_findIkConstraint');
  spSkeleton_findPathConstraint := GetProcAddress(aDLLHandle, 'spSkeleton_findPathConstraint');
  spSkeleton_findPhysicsConstraint := GetProcAddress(aDLLHandle, 'spSkeleton_findPhysicsConstraint');
  spSkeleton_findSlot := GetProcAddress(aDLLHandle, 'spSkeleton_findSlot');
  spSkeleton_findTransformConstraint := GetProcAddress(aDLLHandle, 'spSkeleton_findTransformConstraint');
  spSkeleton_getAttachmentForSlotIndex := GetProcAddress(aDLLHandle, 'spSkeleton_getAttachmentForSlotIndex');
  spSkeleton_getAttachmentForSlotName := GetProcAddress(aDLLHandle, 'spSkeleton_getAttachmentForSlotName');
  spSkeleton_physicsRotate := GetProcAddress(aDLLHandle, 'spSkeleton_physicsRotate');
  spSkeleton_physicsTranslate := GetProcAddress(aDLLHandle, 'spSkeleton_physicsTranslate');
  spSkeleton_setAttachment := GetProcAddress(aDLLHandle, 'spSkeleton_setAttachment');
  spSkeleton_setBonesToSetupPose := GetProcAddress(aDLLHandle, 'spSkeleton_setBonesToSetupPose');
  spSkeleton_setSkin := GetProcAddress(aDLLHandle, 'spSkeleton_setSkin');
  spSkeleton_setSkinByName := GetProcAddress(aDLLHandle, 'spSkeleton_setSkinByName');
  spSkeleton_setSlotsToSetupPose := GetProcAddress(aDLLHandle, 'spSkeleton_setSlotsToSetupPose');
  spSkeleton_setToSetupPose := GetProcAddress(aDLLHandle, 'spSkeleton_setToSetupPose');
  spSkeleton_update := GetProcAddress(aDLLHandle, 'spSkeleton_update');
  spSkeleton_updateCache := GetProcAddress(aDLLHandle, 'spSkeleton_updateCache');
  spSkeleton_updateWorldTransform := GetProcAddress(aDLLHandle, 'spSkeleton_updateWorldTransform');
  spSkeletonBinary_create := GetProcAddress(aDLLHandle, 'spSkeletonBinary_create');
  spSkeletonBinary_createWithLoader := GetProcAddress(aDLLHandle, 'spSkeletonBinary_createWithLoader');
  spSkeletonBinary_dispose := GetProcAddress(aDLLHandle, 'spSkeletonBinary_dispose');
  spSkeletonBinary_readSkeletonData := GetProcAddress(aDLLHandle, 'spSkeletonBinary_readSkeletonData');
  spSkeletonBinary_readSkeletonDataFile := GetProcAddress(aDLLHandle, 'spSkeletonBinary_readSkeletonDataFile');
  spSkeletonBounds_aabbContainsPoint := GetProcAddress(aDLLHandle, 'spSkeletonBounds_aabbContainsPoint');
  spSkeletonBounds_aabbIntersectsSegment := GetProcAddress(aDLLHandle, 'spSkeletonBounds_aabbIntersectsSegment');
  spSkeletonBounds_aabbIntersectsSkeleton := GetProcAddress(aDLLHandle, 'spSkeletonBounds_aabbIntersectsSkeleton');
  spSkeletonBounds_containsPoint := GetProcAddress(aDLLHandle, 'spSkeletonBounds_containsPoint');
  spSkeletonBounds_create := GetProcAddress(aDLLHandle, 'spSkeletonBounds_create');
  spSkeletonBounds_dispose := GetProcAddress(aDLLHandle, 'spSkeletonBounds_dispose');
  spSkeletonBounds_getPolygon := GetProcAddress(aDLLHandle, 'spSkeletonBounds_getPolygon');
  spSkeletonBounds_intersectsSegment := GetProcAddress(aDLLHandle, 'spSkeletonBounds_intersectsSegment');
  spSkeletonBounds_update := GetProcAddress(aDLLHandle, 'spSkeletonBounds_update');
  spSkeletonClipping_clipEnd := GetProcAddress(aDLLHandle, 'spSkeletonClipping_clipEnd');
  spSkeletonClipping_clipEnd2 := GetProcAddress(aDLLHandle, 'spSkeletonClipping_clipEnd2');
  spSkeletonClipping_clipStart := GetProcAddress(aDLLHandle, 'spSkeletonClipping_clipStart');
  spSkeletonClipping_clipTriangles := GetProcAddress(aDLLHandle, 'spSkeletonClipping_clipTriangles');
  spSkeletonClipping_create := GetProcAddress(aDLLHandle, 'spSkeletonClipping_create');
  spSkeletonClipping_dispose := GetProcAddress(aDLLHandle, 'spSkeletonClipping_dispose');
  spSkeletonClipping_isClipping := GetProcAddress(aDLLHandle, 'spSkeletonClipping_isClipping');
  spSkeletonData_create := GetProcAddress(aDLLHandle, 'spSkeletonData_create');
  spSkeletonData_dispose := GetProcAddress(aDLLHandle, 'spSkeletonData_dispose');
  spSkeletonData_findAnimation := GetProcAddress(aDLLHandle, 'spSkeletonData_findAnimation');
  spSkeletonData_findBone := GetProcAddress(aDLLHandle, 'spSkeletonData_findBone');
  spSkeletonData_findEvent := GetProcAddress(aDLLHandle, 'spSkeletonData_findEvent');
  spSkeletonData_findIkConstraint := GetProcAddress(aDLLHandle, 'spSkeletonData_findIkConstraint');
  spSkeletonData_findPathConstraint := GetProcAddress(aDLLHandle, 'spSkeletonData_findPathConstraint');
  spSkeletonData_findPhysicsConstraint := GetProcAddress(aDLLHandle, 'spSkeletonData_findPhysicsConstraint');
  spSkeletonData_findSkin := GetProcAddress(aDLLHandle, 'spSkeletonData_findSkin');
  spSkeletonData_findSlot := GetProcAddress(aDLLHandle, 'spSkeletonData_findSlot');
  spSkeletonData_findTransformConstraint := GetProcAddress(aDLLHandle, 'spSkeletonData_findTransformConstraint');
  spSkeletonDrawable_create := GetProcAddress(aDLLHandle, 'spSkeletonDrawable_create');
  spSkeletonDrawable_dispose := GetProcAddress(aDLLHandle, 'spSkeletonDrawable_dispose');
  spSkeletonDrawable_draw := GetProcAddress(aDLLHandle, 'spSkeletonDrawable_draw');
  spSkeletonDrawable_update := GetProcAddress(aDLLHandle, 'spSkeletonDrawable_update');
  spSkeletonJson_create := GetProcAddress(aDLLHandle, 'spSkeletonJson_create');
  spSkeletonJson_createWithLoader := GetProcAddress(aDLLHandle, 'spSkeletonJson_createWithLoader');
  spSkeletonJson_dispose := GetProcAddress(aDLLHandle, 'spSkeletonJson_dispose');
  spSkeletonJson_readSkeletonData := GetProcAddress(aDLLHandle, 'spSkeletonJson_readSkeletonData');
  spSkeletonJson_readSkeletonDataFile := GetProcAddress(aDLLHandle, 'spSkeletonJson_readSkeletonDataFile');
  spSkin_addSkin := GetProcAddress(aDLLHandle, 'spSkin_addSkin');
  spSkin_attachAll := GetProcAddress(aDLLHandle, 'spSkin_attachAll');
  spSkin_clear := GetProcAddress(aDLLHandle, 'spSkin_clear');
  spSkin_copySkin := GetProcAddress(aDLLHandle, 'spSkin_copySkin');
  spSkin_create := GetProcAddress(aDLLHandle, 'spSkin_create');
  spSkin_dispose := GetProcAddress(aDLLHandle, 'spSkin_dispose');
  spSkin_getAttachment := GetProcAddress(aDLLHandle, 'spSkin_getAttachment');
  spSkin_getAttachmentName := GetProcAddress(aDLLHandle, 'spSkin_getAttachmentName');
  spSkin_getAttachments := GetProcAddress(aDLLHandle, 'spSkin_getAttachments');
  spSkin_setAttachment := GetProcAddress(aDLLHandle, 'spSkin_setAttachment');
  spSlot_create := GetProcAddress(aDLLHandle, 'spSlot_create');
  spSlot_dispose := GetProcAddress(aDLLHandle, 'spSlot_dispose');
  spSlot_setAttachment := GetProcAddress(aDLLHandle, 'spSlot_setAttachment');
  spSlot_setToSetupPose := GetProcAddress(aDLLHandle, 'spSlot_setToSetupPose');
  spSlotData_create := GetProcAddress(aDLLHandle, 'spSlotData_create');
  spSlotData_dispose := GetProcAddress(aDLLHandle, 'spSlotData_dispose');
  spSlotData_setAttachmentName := GetProcAddress(aDLLHandle, 'spSlotData_setAttachmentName');
  spTextureRegionArray_add := GetProcAddress(aDLLHandle, 'spTextureRegionArray_add');
  spTextureRegionArray_addAll := GetProcAddress(aDLLHandle, 'spTextureRegionArray_addAll');
  spTextureRegionArray_addAllValues := GetProcAddress(aDLLHandle, 'spTextureRegionArray_addAllValues');
  spTextureRegionArray_clear := GetProcAddress(aDLLHandle, 'spTextureRegionArray_clear');
  spTextureRegionArray_contains := GetProcAddress(aDLLHandle, 'spTextureRegionArray_contains');
  spTextureRegionArray_create := GetProcAddress(aDLLHandle, 'spTextureRegionArray_create');
  spTextureRegionArray_dispose := GetProcAddress(aDLLHandle, 'spTextureRegionArray_dispose');
  spTextureRegionArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spTextureRegionArray_ensureCapacity');
  spTextureRegionArray_peek := GetProcAddress(aDLLHandle, 'spTextureRegionArray_peek');
  spTextureRegionArray_pop := GetProcAddress(aDLLHandle, 'spTextureRegionArray_pop');
  spTextureRegionArray_removeAt := GetProcAddress(aDLLHandle, 'spTextureRegionArray_removeAt');
  spTextureRegionArray_setSize := GetProcAddress(aDLLHandle, 'spTextureRegionArray_setSize');
  spTimeline_apply := GetProcAddress(aDLLHandle, 'spTimeline_apply');
  spTimeline_dispose := GetProcAddress(aDLLHandle, 'spTimeline_dispose');
  spTimeline_getDuration := GetProcAddress(aDLLHandle, 'spTimeline_getDuration');
  spTimeline_setBezier := GetProcAddress(aDLLHandle, 'spTimeline_setBezier');
  spTimelineArray_add := GetProcAddress(aDLLHandle, 'spTimelineArray_add');
  spTimelineArray_addAll := GetProcAddress(aDLLHandle, 'spTimelineArray_addAll');
  spTimelineArray_addAllValues := GetProcAddress(aDLLHandle, 'spTimelineArray_addAllValues');
  spTimelineArray_clear := GetProcAddress(aDLLHandle, 'spTimelineArray_clear');
  spTimelineArray_contains := GetProcAddress(aDLLHandle, 'spTimelineArray_contains');
  spTimelineArray_create := GetProcAddress(aDLLHandle, 'spTimelineArray_create');
  spTimelineArray_dispose := GetProcAddress(aDLLHandle, 'spTimelineArray_dispose');
  spTimelineArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spTimelineArray_ensureCapacity');
  spTimelineArray_peek := GetProcAddress(aDLLHandle, 'spTimelineArray_peek');
  spTimelineArray_pop := GetProcAddress(aDLLHandle, 'spTimelineArray_pop');
  spTimelineArray_removeAt := GetProcAddress(aDLLHandle, 'spTimelineArray_removeAt');
  spTimelineArray_setSize := GetProcAddress(aDLLHandle, 'spTimelineArray_setSize');
  spTrackEntry_getAnimationTime := GetProcAddress(aDLLHandle, 'spTrackEntry_getAnimationTime');
  spTrackEntry_getTrackComplete := GetProcAddress(aDLLHandle, 'spTrackEntry_getTrackComplete');
  spTrackEntry_isNextReady := GetProcAddress(aDLLHandle, 'spTrackEntry_isNextReady');
  spTrackEntry_resetRotationDirections := GetProcAddress(aDLLHandle, 'spTrackEntry_resetRotationDirections');
  spTrackEntry_setMixDuration := GetProcAddress(aDLLHandle, 'spTrackEntry_setMixDuration');
  spTrackEntry_wasApplied := GetProcAddress(aDLLHandle, 'spTrackEntry_wasApplied');
  spTrackEntryArray_add := GetProcAddress(aDLLHandle, 'spTrackEntryArray_add');
  spTrackEntryArray_addAll := GetProcAddress(aDLLHandle, 'spTrackEntryArray_addAll');
  spTrackEntryArray_addAllValues := GetProcAddress(aDLLHandle, 'spTrackEntryArray_addAllValues');
  spTrackEntryArray_clear := GetProcAddress(aDLLHandle, 'spTrackEntryArray_clear');
  spTrackEntryArray_contains := GetProcAddress(aDLLHandle, 'spTrackEntryArray_contains');
  spTrackEntryArray_create := GetProcAddress(aDLLHandle, 'spTrackEntryArray_create');
  spTrackEntryArray_dispose := GetProcAddress(aDLLHandle, 'spTrackEntryArray_dispose');
  spTrackEntryArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spTrackEntryArray_ensureCapacity');
  spTrackEntryArray_peek := GetProcAddress(aDLLHandle, 'spTrackEntryArray_peek');
  spTrackEntryArray_pop := GetProcAddress(aDLLHandle, 'spTrackEntryArray_pop');
  spTrackEntryArray_removeAt := GetProcAddress(aDLLHandle, 'spTrackEntryArray_removeAt');
  spTrackEntryArray_setSize := GetProcAddress(aDLLHandle, 'spTrackEntryArray_setSize');
  spTransformConstraint_create := GetProcAddress(aDLLHandle, 'spTransformConstraint_create');
  spTransformConstraint_dispose := GetProcAddress(aDLLHandle, 'spTransformConstraint_dispose');
  spTransformConstraint_setToSetupPose := GetProcAddress(aDLLHandle, 'spTransformConstraint_setToSetupPose');
  spTransformConstraint_update := GetProcAddress(aDLLHandle, 'spTransformConstraint_update');
  spTransformConstraintData_create := GetProcAddress(aDLLHandle, 'spTransformConstraintData_create');
  spTransformConstraintData_dispose := GetProcAddress(aDLLHandle, 'spTransformConstraintData_dispose');
  spTransformConstraintDataArray_add := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_add');
  spTransformConstraintDataArray_addAll := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_addAll');
  spTransformConstraintDataArray_addAllValues := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_addAllValues');
  spTransformConstraintDataArray_clear := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_clear');
  spTransformConstraintDataArray_contains := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_contains');
  spTransformConstraintDataArray_create := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_create');
  spTransformConstraintDataArray_dispose := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_dispose');
  spTransformConstraintDataArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_ensureCapacity');
  spTransformConstraintDataArray_peek := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_peek');
  spTransformConstraintDataArray_pop := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_pop');
  spTransformConstraintDataArray_removeAt := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_removeAt');
  spTransformConstraintDataArray_setSize := GetProcAddress(aDLLHandle, 'spTransformConstraintDataArray_setSize');
  spTransformConstraintTimeline_create := GetProcAddress(aDLLHandle, 'spTransformConstraintTimeline_create');
  spTransformConstraintTimeline_setFrame := GetProcAddress(aDLLHandle, 'spTransformConstraintTimeline_setFrame');
  spTranslateTimeline_create := GetProcAddress(aDLLHandle, 'spTranslateTimeline_create');
  spTranslateTimeline_setFrame := GetProcAddress(aDLLHandle, 'spTranslateTimeline_setFrame');
  spTranslateXTimeline_create := GetProcAddress(aDLLHandle, 'spTranslateXTimeline_create');
  spTranslateXTimeline_setFrame := GetProcAddress(aDLLHandle, 'spTranslateXTimeline_setFrame');
  spTranslateYTimeline_create := GetProcAddress(aDLLHandle, 'spTranslateYTimeline_create');
  spTranslateYTimeline_setFrame := GetProcAddress(aDLLHandle, 'spTranslateYTimeline_setFrame');
  spTriangulator_create := GetProcAddress(aDLLHandle, 'spTriangulator_create');
  spTriangulator_decompose := GetProcAddress(aDLLHandle, 'spTriangulator_decompose');
  spTriangulator_dispose := GetProcAddress(aDLLHandle, 'spTriangulator_dispose');
  spTriangulator_triangulate := GetProcAddress(aDLLHandle, 'spTriangulator_triangulate');
  spUnsignedShortArray_add := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_add');
  spUnsignedShortArray_addAll := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_addAll');
  spUnsignedShortArray_addAllValues := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_addAllValues');
  spUnsignedShortArray_clear := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_clear');
  spUnsignedShortArray_contains := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_contains');
  spUnsignedShortArray_create := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_create');
  spUnsignedShortArray_dispose := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_dispose');
  spUnsignedShortArray_ensureCapacity := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_ensureCapacity');
  spUnsignedShortArray_peek := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_peek');
  spUnsignedShortArray_pop := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_pop');
  spUnsignedShortArray_removeAt := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_removeAt');
  spUnsignedShortArray_setSize := GetProcAddress(aDLLHandle, 'spUnsignedShortArray_setSize');
  spVertexAttachment_computeWorldVertices := GetProcAddress(aDLLHandle, 'spVertexAttachment_computeWorldVertices');
  spVertexAttachment_copyTo := GetProcAddress(aDLLHandle, 'spVertexAttachment_copyTo');
  TTF_AppendTextString := GetProcAddress(aDLLHandle, 'TTF_AppendTextString');
  TTF_CloseFont := GetProcAddress(aDLLHandle, 'TTF_CloseFont');
  TTF_CreateGPUTextEngine := GetProcAddress(aDLLHandle, 'TTF_CreateGPUTextEngine');
  TTF_CreateRendererTextEngine := GetProcAddress(aDLLHandle, 'TTF_CreateRendererTextEngine');
  TTF_CreateSurfaceTextEngine := GetProcAddress(aDLLHandle, 'TTF_CreateSurfaceTextEngine');
  TTF_CreateText := GetProcAddress(aDLLHandle, 'TTF_CreateText');
  TTF_DeleteTextString := GetProcAddress(aDLLHandle, 'TTF_DeleteTextString');
  TTF_DestroyGPUTextEngine := GetProcAddress(aDLLHandle, 'TTF_DestroyGPUTextEngine');
  TTF_DestroyRendererTextEngine := GetProcAddress(aDLLHandle, 'TTF_DestroyRendererTextEngine');
  TTF_DestroySurfaceTextEngine := GetProcAddress(aDLLHandle, 'TTF_DestroySurfaceTextEngine');
  TTF_DestroyText := GetProcAddress(aDLLHandle, 'TTF_DestroyText');
  TTF_DrawRendererText := GetProcAddress(aDLLHandle, 'TTF_DrawRendererText');
  TTF_DrawSurfaceText := GetProcAddress(aDLLHandle, 'TTF_DrawSurfaceText');
  TTF_FontHasGlyph := GetProcAddress(aDLLHandle, 'TTF_FontHasGlyph');
  TTF_FontIsFixedWidth := GetProcAddress(aDLLHandle, 'TTF_FontIsFixedWidth');
  TTF_FontIsScalable := GetProcAddress(aDLLHandle, 'TTF_FontIsScalable');
  TTF_GetFontAscent := GetProcAddress(aDLLHandle, 'TTF_GetFontAscent');
  TTF_GetFontDescent := GetProcAddress(aDLLHandle, 'TTF_GetFontDescent');
  TTF_GetFontDirection := GetProcAddress(aDLLHandle, 'TTF_GetFontDirection');
  TTF_GetFontDPI := GetProcAddress(aDLLHandle, 'TTF_GetFontDPI');
  TTF_GetFontFamilyName := GetProcAddress(aDLLHandle, 'TTF_GetFontFamilyName');
  TTF_GetFontGeneration := GetProcAddress(aDLLHandle, 'TTF_GetFontGeneration');
  TTF_GetFontHeight := GetProcAddress(aDLLHandle, 'TTF_GetFontHeight');
  TTF_GetFontHinting := GetProcAddress(aDLLHandle, 'TTF_GetFontHinting');
  TTF_GetFontKerning := GetProcAddress(aDLLHandle, 'TTF_GetFontKerning');
  TTF_GetFontLineSkip := GetProcAddress(aDLLHandle, 'TTF_GetFontLineSkip');
  TTF_GetFontOutline := GetProcAddress(aDLLHandle, 'TTF_GetFontOutline');
  TTF_GetFontProperties := GetProcAddress(aDLLHandle, 'TTF_GetFontProperties');
  TTF_GetFontSDF := GetProcAddress(aDLLHandle, 'TTF_GetFontSDF');
  TTF_GetFontSize := GetProcAddress(aDLLHandle, 'TTF_GetFontSize');
  TTF_GetFontStyle := GetProcAddress(aDLLHandle, 'TTF_GetFontStyle');
  TTF_GetFontStyleName := GetProcAddress(aDLLHandle, 'TTF_GetFontStyleName');
  TTF_GetFontWrapAlignment := GetProcAddress(aDLLHandle, 'TTF_GetFontWrapAlignment');
  TTF_GetFreeTypeVersion := GetProcAddress(aDLLHandle, 'TTF_GetFreeTypeVersion');
  TTF_GetGlyphImage := GetProcAddress(aDLLHandle, 'TTF_GetGlyphImage');
  TTF_GetGlyphImageForIndex := GetProcAddress(aDLLHandle, 'TTF_GetGlyphImageForIndex');
  TTF_GetGlyphKerning := GetProcAddress(aDLLHandle, 'TTF_GetGlyphKerning');
  TTF_GetGlyphMetrics := GetProcAddress(aDLLHandle, 'TTF_GetGlyphMetrics');
  TTF_GetGlyphScript := GetProcAddress(aDLLHandle, 'TTF_GetGlyphScript');
  TTF_GetGPUTextDrawData := GetProcAddress(aDLLHandle, 'TTF_GetGPUTextDrawData');
  TTF_GetHarfBuzzVersion := GetProcAddress(aDLLHandle, 'TTF_GetHarfBuzzVersion');
  TTF_GetNextTextSubString := GetProcAddress(aDLLHandle, 'TTF_GetNextTextSubString');
  TTF_GetPreviousTextSubString := GetProcAddress(aDLLHandle, 'TTF_GetPreviousTextSubString');
  TTF_GetStringSize := GetProcAddress(aDLLHandle, 'TTF_GetStringSize');
  TTF_GetStringSizeWrapped := GetProcAddress(aDLLHandle, 'TTF_GetStringSizeWrapped');
  TTF_GetTextColor := GetProcAddress(aDLLHandle, 'TTF_GetTextColor');
  TTF_GetTextColorFloat := GetProcAddress(aDLLHandle, 'TTF_GetTextColorFloat');
  TTF_GetTextEngine := GetProcAddress(aDLLHandle, 'TTF_GetTextEngine');
  TTF_GetTextFont := GetProcAddress(aDLLHandle, 'TTF_GetTextFont');
  TTF_GetTextPosition := GetProcAddress(aDLLHandle, 'TTF_GetTextPosition');
  TTF_GetTextProperties := GetProcAddress(aDLLHandle, 'TTF_GetTextProperties');
  TTF_GetTextSize := GetProcAddress(aDLLHandle, 'TTF_GetTextSize');
  TTF_GetTextSubString := GetProcAddress(aDLLHandle, 'TTF_GetTextSubString');
  TTF_GetTextSubStringForLine := GetProcAddress(aDLLHandle, 'TTF_GetTextSubStringForLine');
  TTF_GetTextSubStringForPoint := GetProcAddress(aDLLHandle, 'TTF_GetTextSubStringForPoint');
  TTF_GetTextSubStringsForRange := GetProcAddress(aDLLHandle, 'TTF_GetTextSubStringsForRange');
  TTF_GetTextWrapWidth := GetProcAddress(aDLLHandle, 'TTF_GetTextWrapWidth');
  TTF_Init := GetProcAddress(aDLLHandle, 'TTF_Init');
  TTF_InsertTextString := GetProcAddress(aDLLHandle, 'TTF_InsertTextString');
  TTF_MeasureString := GetProcAddress(aDLLHandle, 'TTF_MeasureString');
  TTF_OpenFont := GetProcAddress(aDLLHandle, 'TTF_OpenFont');
  TTF_OpenFontIO := GetProcAddress(aDLLHandle, 'TTF_OpenFontIO');
  TTF_OpenFontWithProperties := GetProcAddress(aDLLHandle, 'TTF_OpenFontWithProperties');
  TTF_Quit := GetProcAddress(aDLLHandle, 'TTF_Quit');
  TTF_RenderGlyph_Blended := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph_Blended');
  TTF_RenderGlyph_LCD := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph_LCD');
  TTF_RenderGlyph_Shaded := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph_Shaded');
  TTF_RenderGlyph_Solid := GetProcAddress(aDLLHandle, 'TTF_RenderGlyph_Solid');
  TTF_RenderText_Blended := GetProcAddress(aDLLHandle, 'TTF_RenderText_Blended');
  TTF_RenderText_Blended_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderText_Blended_Wrapped');
  TTF_RenderText_LCD := GetProcAddress(aDLLHandle, 'TTF_RenderText_LCD');
  TTF_RenderText_LCD_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderText_LCD_Wrapped');
  TTF_RenderText_Shaded := GetProcAddress(aDLLHandle, 'TTF_RenderText_Shaded');
  TTF_RenderText_Shaded_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderText_Shaded_Wrapped');
  TTF_RenderText_Solid := GetProcAddress(aDLLHandle, 'TTF_RenderText_Solid');
  TTF_RenderText_Solid_Wrapped := GetProcAddress(aDLLHandle, 'TTF_RenderText_Solid_Wrapped');
  TTF_SetFontDirection := GetProcAddress(aDLLHandle, 'TTF_SetFontDirection');
  TTF_SetFontHinting := GetProcAddress(aDLLHandle, 'TTF_SetFontHinting');
  TTF_SetFontKerning := GetProcAddress(aDLLHandle, 'TTF_SetFontKerning');
  TTF_SetFontLanguage := GetProcAddress(aDLLHandle, 'TTF_SetFontLanguage');
  TTF_SetFontLineSkip := GetProcAddress(aDLLHandle, 'TTF_SetFontLineSkip');
  TTF_SetFontOutline := GetProcAddress(aDLLHandle, 'TTF_SetFontOutline');
  TTF_SetFontScript := GetProcAddress(aDLLHandle, 'TTF_SetFontScript');
  TTF_SetFontSDF := GetProcAddress(aDLLHandle, 'TTF_SetFontSDF');
  TTF_SetFontSize := GetProcAddress(aDLLHandle, 'TTF_SetFontSize');
  TTF_SetFontSizeDPI := GetProcAddress(aDLLHandle, 'TTF_SetFontSizeDPI');
  TTF_SetFontStyle := GetProcAddress(aDLLHandle, 'TTF_SetFontStyle');
  TTF_SetFontWrapAlignment := GetProcAddress(aDLLHandle, 'TTF_SetFontWrapAlignment');
  TTF_SetTextColor := GetProcAddress(aDLLHandle, 'TTF_SetTextColor');
  TTF_SetTextColorFloat := GetProcAddress(aDLLHandle, 'TTF_SetTextColorFloat');
  TTF_SetTextEngine := GetProcAddress(aDLLHandle, 'TTF_SetTextEngine');
  TTF_SetTextFont := GetProcAddress(aDLLHandle, 'TTF_SetTextFont');
  TTF_SetTextPosition := GetProcAddress(aDLLHandle, 'TTF_SetTextPosition');
  TTF_SetTextString := GetProcAddress(aDLLHandle, 'TTF_SetTextString');
  TTF_SetTextWrapWhitespaceVisible := GetProcAddress(aDLLHandle, 'TTF_SetTextWrapWhitespaceVisible');
  TTF_SetTextWrapWidth := GetProcAddress(aDLLHandle, 'TTF_SetTextWrapWidth');
  TTF_TextWrapWhitespaceVisible := GetProcAddress(aDLLHandle, 'TTF_TextWrapWhitespaceVisible');
  TTF_UpdateText := GetProcAddress(aDLLHandle, 'TTF_UpdateText');
  TTF_Version := GetProcAddress(aDLLHandle, 'TTF_Version');
  TTF_WasInit := GetProcAddress(aDLLHandle, 'TTF_WasInit');
  unzClose := GetProcAddress(aDLLHandle, 'unzClose');
  unzCloseCurrentFile := GetProcAddress(aDLLHandle, 'unzCloseCurrentFile');
  unzGetCurrentFileInfo64 := GetProcAddress(aDLLHandle, 'unzGetCurrentFileInfo64');
  unzLocateFile := GetProcAddress(aDLLHandle, 'unzLocateFile');
  unzOpen64 := GetProcAddress(aDLLHandle, 'unzOpen64');
  unzOpenCurrentFilePassword := GetProcAddress(aDLLHandle, 'unzOpenCurrentFilePassword');
  unzReadCurrentFile := GetProcAddress(aDLLHandle, 'unzReadCurrentFile');
  unztell64 := GetProcAddress(aDLLHandle, 'unztell64');
  zipClose := GetProcAddress(aDLLHandle, 'zipClose');
  zipCloseFileInZip := GetProcAddress(aDLLHandle, 'zipCloseFileInZip');
  zipOpen64 := GetProcAddress(aDLLHandle, 'zipOpen64');
  zipOpenNewFileInZip3_64 := GetProcAddress(aDLLHandle, 'zipOpenNewFileInZip3_64');
  zipWriteInFileInZip := GetProcAddress(aDLLHandle, 'zipWriteInFileInZip');
end;
{$ENDREGION}

{$REGION ' DLL LOADER '}

{$R DSDL.res}

var
  DepsDLLHandle: THandle = 0;
  DepsDLLFilename: string = '';

procedure UnloadDLL();
begin
  // unload deps DLL
  if DepsDLLHandle <> 0 then
  begin
    FreeLibrary(DepsDLLHandle);
    TFile.Delete(DepsDLLFilename);
    DepsDLLHandle := 0;
    DepsDLLFilename := '';
  end;
end;

function LoadDLL(var AError: string): Boolean;
var
  LResStream: TResourceStream;

  function b85d4a8cff29427882955429f236764e(): string;
  const
    CValue = '3cbb6705eb3f44cc9bbb4e601c05fec9';
  begin
    Result := CValue;
  end;

  procedure SetError(const AText: string);
  begin
    AError := AText;
  end;

  function HasEnoughDiskSpace(const APath: string; ARequiredSpace: Int64): Boolean;
  var
    LFreeAvailable: Int64;
    LTotalSpace: Int64;
    LTotalFree: Int64;
  begin
    Result := GetDiskFreeSpaceEx(PChar(APath), LFreeAvailable, LTotalSpace, @LTotalFree) and
              (LFreeAvailable >= ARequiredSpace);
  end;

begin
  Result := False;
  AError := 'Failed to load LuaJIT DLL';

  // load deps DLL
  if DepsDLLHandle <> 0 then Exit(True);
  try
    if not Boolean((FindResource(HInstance, PChar(b85d4a8cff29427882955429f236764e()), RT_RCDATA) <> 0)) then
    begin
      SetError('Failed to find Deps DLL resource');
      Exit;
    end;
    LResStream := TResourceStream.Create(HInstance, b85d4a8cff29427882955429f236764e(), RT_RCDATA);
    try
      LResStream.Position := 0;
      DepsDLLFilename := TPath.Combine(TPath.GetTempPath,
        TPath.ChangeExtension(TPath.GetGUIDFileName.ToLower, '.'));
      if not HasEnoughDiskSpace(TPath.GetDirectoryName(DepsDLLFilename), LResStream.Size) then
      begin
        AError := 'Not enough disk space to extract the Deps DLL';
        Exit;
      end;

      LResStream.SaveToFile(DepsDLLFilename);
      if not TFile.Exists(DepsDLLFilename) then
      begin
        SetError('Failed to find extracted Deps DLL');
        Exit;
      end;
      DepsDLLHandle := LoadLibrary(PChar(DepsDLLFilename));
      if DepsDLLHandle = 0 then
      begin
        SetError('Failed to load extracted Deps DLL: ' + SysErrorMessage(GetLastError));
        Exit;
      end;

      GetExports(DepsDLLHandle);

      Result := True;
    finally
      LResStream.Free();
    end;
  except
    on E: Exception do
      SetError('Unexpected error: ' + E.Message);
  end;
end;

{$ENDREGION}

{$REGION ' UNIT INIT '}
initialization
var
  LError: string;
begin
  ReportMemoryLeaksOnShutdown := True;
  SetConsoleCP(CP_UTF8);
  SetConsoleOutputCP(CP_UTF8);
  EnableVirtualTerminalProcessing();
  if not LoadDLL(LError) then
  begin
    MessageBox(0, PChar(LError), 'Critical Initialization Error', MB_ICONERROR);
    Halt(1); // Exit the application with a non-zero exit code to indicate failure
  end;
end;

finalization
begin
  try
    UnloadDLL();
  except
    on E: Exception do
    begin
      MessageBox(0, PChar(E.Message), 'Critical Shutdown Error', MB_ICONERROR);
    end;
  end;
end;
{$ENDREGION}

end.
